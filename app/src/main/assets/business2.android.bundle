(function (global) {
  "use strict";

  global.__r = metroRequire;
  global[__METRO_GLOBAL_PREFIX__ + "__d"] = define;
  global.__c = clear;
  global.__registerSegment = registerSegment;
  var modules = clear();
  var EMPTY = {};
  var _ref = {},
      hasOwnProperty = _ref.hasOwnProperty;

  if (__DEV__) {
    global.$RefreshReg$ = function () {};

    global.$RefreshSig$ = function () {
      return function (type) {
        return type;
      };
    };
  }

  function clear() {
    modules = Object.create(null);
    return modules;
  }

  if (__DEV__) {
    var verboseNamesToModuleIds = Object.create(null);
    var initializingModuleIds = [];
  }

  function define(factory, moduleId, dependencyMap) {
    if (modules[moduleId] != null) {
      if (__DEV__) {
        var inverseDependencies = arguments[4];

        if (inverseDependencies) {
          global.__accept(moduleId, factory, dependencyMap, inverseDependencies);
        }
      }

      return;
    }

    var mod = {
      dependencyMap: dependencyMap,
      factory: factory,
      hasError: false,
      importedAll: EMPTY,
      importedDefault: EMPTY,
      isInitialized: false,
      publicModule: {
        exports: {}
      }
    };
    modules[moduleId] = mod;

    if (__DEV__) {
      mod.hot = createHotReloadingObject();
      var verboseName = arguments[3];

      if (verboseName) {
        mod.verboseName = verboseName;
        verboseNamesToModuleIds[verboseName] = moduleId;
      }
    }
  }

  function metroRequire(moduleId) {
    if (__DEV__ && typeof moduleId === "string") {
      var verboseName = moduleId;
      moduleId = verboseNamesToModuleIds[verboseName];

      if (moduleId == null) {
        throw new Error("Unknown named module: \"" + verboseName + "\"");
      } else {
        console.warn("Requiring module \"" + verboseName + "\" by name is only supported for " + "debugging purposes and will BREAK IN PRODUCTION!");
      }
    }

    var moduleIdReallyIsNumber = moduleId;

    if (__DEV__) {
      var initializingIndex = initializingModuleIds.indexOf(moduleIdReallyIsNumber);

      if (initializingIndex !== -1) {
        var cycle = initializingModuleIds.slice(initializingIndex).map(function (id) {
          return modules[id] ? modules[id].verboseName : "[unknown]";
        });
        cycle.push(cycle[0]);
        console.warn("Require cycle: " + cycle.join(" -> ") + "\n\n" + "Require cycles are allowed, but can result in uninitialized values. " + "Consider refactoring to remove the need for a cycle.");
      }
    }

    var module = modules[moduleIdReallyIsNumber];
    return module && module.isInitialized ? module.publicModule.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  function metroImportDefault(moduleId) {
    if (__DEV__ && typeof moduleId === "string") {
      var verboseName = moduleId;
      moduleId = verboseNamesToModuleIds[verboseName];
    }

    var moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedDefault !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedDefault;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedDefault = exports && exports.__esModule ? exports.default : exports;
    return modules[moduleIdReallyIsNumber].importedDefault = importedDefault;
  }

  metroRequire.importDefault = metroImportDefault;

  function metroImportAll(moduleId) {
    if (__DEV__ && typeof moduleId === "string") {
      var verboseName = moduleId;
      moduleId = verboseNamesToModuleIds[verboseName];
    }

    var moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedAll !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedAll;
    }

    var exports = metroRequire(moduleIdReallyIsNumber);
    var importedAll;

    if (exports && exports.__esModule) {
      importedAll = exports;
    } else {
      importedAll = {};

      if (exports) {
        for (var key in exports) {
          if (hasOwnProperty.call(exports, key)) {
            importedAll[key] = exports[key];
          }
        }
      }

      importedAll.default = exports;
    }

    return modules[moduleIdReallyIsNumber].importedAll = importedAll;
  }

  metroRequire.importAll = metroImportAll;
  var inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      var returnValue;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  var ID_MASK_SHIFT = 16;
  var LOCAL_ID_MASK = ~0 >>> ID_MASK_SHIFT;

  function unpackModuleId(moduleId) {
    var segmentId = moduleId >>> ID_MASK_SHIFT;
    var localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId: segmentId,
      localId: localId
    };
  }

  metroRequire.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return (value.segmentId << ID_MASK_SHIFT) + value.localId;
  }

  metroRequire.packModuleId = packModuleId;
  var moduleDefinersBySegmentID = [];
  var definingSegmentByModuleID = new Map();

  function registerSegment(segmentId, moduleDefiner, moduleIds) {
    moduleDefinersBySegmentID[segmentId] = moduleDefiner;

    if (__DEV__) {
      if (segmentId === 0 && moduleIds) {
        throw new Error("registerSegment: Expected moduleIds to be null for main segment");
      }

      if (segmentId !== 0 && !moduleIds) {
        throw new Error("registerSegment: Expected moduleIds to be passed for segment #" + segmentId);
      }
    }

    if (moduleIds) {
      moduleIds.forEach(function (moduleId) {
        if (!modules[moduleId] && !definingSegmentByModuleID.has(moduleId)) {
          definingSegmentByModuleID.set(moduleId, segmentId);
        }
      });
    }
  }

  function loadModuleImplementation(moduleId, module) {
    if (!module && moduleDefinersBySegmentID.length > 0) {
      var _definingSegmentByMod;

      var segmentId = (_definingSegmentByMod = definingSegmentByModuleID.get(moduleId)) !== null && _definingSegmentByMod !== void 0 ? _definingSegmentByMod : 0;
      var definer = moduleDefinersBySegmentID[segmentId];

      if (definer != null) {
        definer(moduleId);
        module = modules[moduleId];
        definingSegmentByModuleID.delete(moduleId);
      }
    }

    var nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      var _unpackModuleId = unpackModuleId(moduleId),
          _segmentId = _unpackModuleId.segmentId,
          localId = _unpackModuleId.localId;

      nativeRequire(localId, _segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    if (__DEV__) {
      var Systrace = metroRequire.Systrace,
          Refresh = metroRequire.Refresh;
    }

    module.isInitialized = true;
    var _module = module,
        factory = _module.factory,
        dependencyMap = _module.dependencyMap;

    if (__DEV__) {
      initializingModuleIds.push(moduleId);
    }

    try {
      if (__DEV__) {
        Systrace.beginEvent("JS_require_" + (module.verboseName || moduleId));
      }

      var moduleObject = module.publicModule;

      if (__DEV__) {
        moduleObject.hot = module.hot;
        var prevRefreshReg = global.$RefreshReg$;
        var prevRefreshSig = global.$RefreshSig$;

        if (Refresh != null) {
          var RefreshRuntime = Refresh;

          global.$RefreshReg$ = function (type, id) {
            RefreshRuntime.register(type, moduleId + " " + id);
          };

          global.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
        }
      }

      moduleObject.id = moduleId;
      factory(global, metroRequire, metroImportDefault, metroImportAll, moduleObject, moduleObject.exports, dependencyMap);

      if (!__DEV__) {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }

      if (__DEV__) {
        Systrace.endEvent();

        if (Refresh != null) {
          registerExportsForReactRefresh(Refresh, moduleObject.exports, moduleId);
        }
      }

      return moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.publicModule.exports = undefined;
      throw e;
    } finally {
      if (__DEV__) {
        if (initializingModuleIds.pop() !== moduleId) {
          throw new Error("initializingModuleIds is corrupt; something is terribly wrong");
        }

        global.$RefreshReg$ = prevRefreshReg;
        global.$RefreshSig$ = prevRefreshSig;
      }
    }
  }

  function unknownModuleError(id) {
    var message = 'Requiring unknown module "' + id + '".';

    if (__DEV__) {
      message += " If you are sure the module exists, try restarting Metro. " + "You may also want to run `yarn` or `npm install`.";
    }

    return Error(message);
  }

  function moduleThrewError(id, error) {
    var displayName = __DEV__ && modules[id] && modules[id].verboseName || id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }

  if (__DEV__) {
    metroRequire.Systrace = {
      beginEvent: function beginEvent() {},
      endEvent: function endEvent() {}
    };

    metroRequire.getModules = function () {
      return modules;
    };

    var createHotReloadingObject = function createHotReloadingObject() {
      var hot = {
        _acceptCallback: null,
        _disposeCallback: null,
        _didAccept: false,
        accept: function accept(callback) {
          hot._didAccept = true;
          hot._acceptCallback = callback;
        },
        dispose: function dispose(callback) {
          hot._disposeCallback = callback;
        }
      };
      return hot;
    };

    var reactRefreshTimeout = null;

    var metroHotUpdateModule = function metroHotUpdateModule(id, factory, dependencyMap, inverseDependencies) {
      var mod = modules[id];

      if (!mod) {
        if (factory) {
          return;
        }

        throw unknownModuleError(id);
      }

      if (!mod.hasError && !mod.isInitialized) {
        mod.factory = factory;
        mod.dependencyMap = dependencyMap;
        return;
      }

      var Refresh = metroRequire.Refresh;
      var refreshBoundaryIDs = new Set();
      var didBailOut = false;
      var updatedModuleIDs = topologicalSort([id], function (pendingID) {
        var pendingModule = modules[pendingID];

        if (pendingModule == null) {
          return [];
        }

        var pendingHot = pendingModule.hot;

        if (pendingHot == null) {
          throw new Error("[Refresh] Expected module.hot to always exist in DEV.");
        }

        var canAccept = pendingHot._didAccept;

        if (!canAccept && Refresh != null) {
          var isBoundary = isReactRefreshBoundary(Refresh, pendingModule.publicModule.exports);

          if (isBoundary) {
            canAccept = true;
            refreshBoundaryIDs.add(pendingID);
          }
        }

        if (canAccept) {
          return [];
        }

        var parentIDs = inverseDependencies[pendingID];

        if (parentIDs.length === 0) {
          performFullRefresh("No root boundary", {
            source: mod,
            failed: pendingModule
          });
          didBailOut = true;
          return [];
        }

        return parentIDs;
      }, function () {
        return didBailOut;
      }).reverse();

      if (didBailOut) {
        return;
      }

      var seenModuleIDs = new Set();

      for (var i = 0; i < updatedModuleIDs.length; i++) {
        var updatedID = updatedModuleIDs[i];

        if (seenModuleIDs.has(updatedID)) {
          continue;
        }

        seenModuleIDs.add(updatedID);
        var updatedMod = modules[updatedID];

        if (updatedMod == null) {
          throw new Error("[Refresh] Expected to find the updated module.");
        }

        var prevExports = updatedMod.publicModule.exports;
        var didError = runUpdatedModule(updatedID, updatedID === id ? factory : undefined, updatedID === id ? dependencyMap : undefined);
        var nextExports = updatedMod.publicModule.exports;

        if (didError) {
          return;
        }

        if (refreshBoundaryIDs.has(updatedID)) {
          var isNoLongerABoundary = !isReactRefreshBoundary(Refresh, nextExports);
          var didInvalidate = shouldInvalidateReactRefreshBoundary(Refresh, prevExports, nextExports);

          if (isNoLongerABoundary || didInvalidate) {
            var parentIDs = inverseDependencies[updatedID];

            if (parentIDs.length === 0) {
              performFullRefresh(isNoLongerABoundary ? "No longer a boundary" : "Invalidated boundary", {
                source: mod,
                failed: updatedMod
              });
              return;
            }

            for (var j = 0; j < parentIDs.length; j++) {
              var parentID = parentIDs[j];
              var parentMod = modules[parentID];

              if (parentMod == null) {
                throw new Error("[Refresh] Expected to find parent module.");
              }

              var canAcceptParent = isReactRefreshBoundary(Refresh, parentMod.publicModule.exports);

              if (canAcceptParent) {
                refreshBoundaryIDs.add(parentID);
                updatedModuleIDs.push(parentID);
              } else {
                performFullRefresh("Invalidated boundary", {
                  source: mod,
                  failed: parentMod
                });
                return;
              }
            }
          }
        }
      }

      if (Refresh != null) {
        if (reactRefreshTimeout == null) {
          reactRefreshTimeout = setTimeout(function () {
            reactRefreshTimeout = null;
            Refresh.performReactRefresh();
          }, 30);
        }
      }
    };

    var topologicalSort = function topologicalSort(roots, getEdges, earlyStop) {
      var result = [];
      var visited = new Set();

      function traverseDependentNodes(node) {
        visited.add(node);
        var dependentNodes = getEdges(node);

        if (earlyStop(node)) {
          return;
        }

        dependentNodes.forEach(function (dependent) {
          if (visited.has(dependent)) {
            return;
          }

          traverseDependentNodes(dependent);
        });
        result.push(node);
      }

      roots.forEach(function (root) {
        if (!visited.has(root)) {
          traverseDependentNodes(root);
        }
      });
      return result;
    };

    var runUpdatedModule = function runUpdatedModule(id, factory, dependencyMap) {
      var mod = modules[id];

      if (mod == null) {
        throw new Error("[Refresh] Expected to find the module.");
      }

      var hot = mod.hot;

      if (!hot) {
        throw new Error("[Refresh] Expected module.hot to always exist in DEV.");
      }

      if (hot._disposeCallback) {
        try {
          hot._disposeCallback();
        } catch (error) {
          console.error("Error while calling dispose handler for module " + id + ": ", error);
        }
      }

      if (factory) {
        mod.factory = factory;
      }

      if (dependencyMap) {
        mod.dependencyMap = dependencyMap;
      }

      mod.hasError = false;
      mod.error = undefined;
      mod.importedAll = EMPTY;
      mod.importedDefault = EMPTY;
      mod.isInitialized = false;
      var prevExports = mod.publicModule.exports;
      mod.publicModule.exports = {};
      hot._didAccept = false;
      hot._acceptCallback = null;
      hot._disposeCallback = null;
      metroRequire(id);

      if (mod.hasError) {
        mod.hasError = false;
        mod.isInitialized = true;
        mod.error = null;
        mod.publicModule.exports = prevExports;
        return true;
      }

      if (hot._acceptCallback) {
        try {
          hot._acceptCallback();
        } catch (error) {
          console.error("Error while calling accept handler for module " + id + ": ", error);
        }
      }

      return false;
    };

    var performFullRefresh = function performFullRefresh(reason, modules) {
      if (typeof window !== "undefined" && window.location != null && typeof window.location.reload === "function") {
        window.location.reload();
      } else {
        var Refresh = metroRequire.Refresh;

        if (Refresh != null) {
          var _modules$source$verbo, _modules$source, _modules$failed$verbo, _modules$failed;

          var sourceName = (_modules$source$verbo = (_modules$source = modules.source) === null || _modules$source === void 0 ? void 0 : _modules$source.verboseName) !== null && _modules$source$verbo !== void 0 ? _modules$source$verbo : "unknown";
          var failedName = (_modules$failed$verbo = (_modules$failed = modules.failed) === null || _modules$failed === void 0 ? void 0 : _modules$failed.verboseName) !== null && _modules$failed$verbo !== void 0 ? _modules$failed$verbo : "unknown";
          Refresh.performFullRefresh("Fast Refresh - " + reason + " <" + sourceName + "> <" + failedName + ">");
        } else {
          console.warn("Could not reload the application after an edit.");
        }
      }
    };

    var isReactRefreshBoundary = function isReactRefreshBoundary(Refresh, moduleExports) {
      if (Refresh.isLikelyComponentType(moduleExports)) {
        return true;
      }

      if (moduleExports == null || typeof moduleExports !== "object") {
        return false;
      }

      var hasExports = false;
      var areAllExportsComponents = true;

      for (var key in moduleExports) {
        hasExports = true;

        if (key === "__esModule") {
          continue;
        }

        var desc = Object.getOwnPropertyDescriptor(moduleExports, key);

        if (desc && desc.get) {
          return false;
        }

        var exportValue = moduleExports[key];

        if (!Refresh.isLikelyComponentType(exportValue)) {
          areAllExportsComponents = false;
        }
      }

      return hasExports && areAllExportsComponents;
    };

    var shouldInvalidateReactRefreshBoundary = function shouldInvalidateReactRefreshBoundary(Refresh, prevExports, nextExports) {
      var prevSignature = getRefreshBoundarySignature(Refresh, prevExports);
      var nextSignature = getRefreshBoundarySignature(Refresh, nextExports);

      if (prevSignature.length !== nextSignature.length) {
        return true;
      }

      for (var i = 0; i < nextSignature.length; i++) {
        if (prevSignature[i] !== nextSignature[i]) {
          return true;
        }
      }

      return false;
    };

    var getRefreshBoundarySignature = function getRefreshBoundarySignature(Refresh, moduleExports) {
      var signature = [];
      signature.push(Refresh.getFamilyByType(moduleExports));

      if (moduleExports == null || typeof moduleExports !== "object") {
        return signature;
      }

      for (var key in moduleExports) {
        if (key === "__esModule") {
          continue;
        }

        var desc = Object.getOwnPropertyDescriptor(moduleExports, key);

        if (desc && desc.get) {
          continue;
        }

        var exportValue = moduleExports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
      }

      return signature;
    };

    var registerExportsForReactRefresh = function registerExportsForReactRefresh(Refresh, moduleExports, moduleID) {
      Refresh.register(moduleExports, moduleID + " %exports%");

      if (moduleExports == null || typeof moduleExports !== "object") {
        return;
      }

      for (var key in moduleExports) {
        var desc = Object.getOwnPropertyDescriptor(moduleExports, key);

        if (desc && desc.get) {
          continue;
        }

        var exportValue = moduleExports[key];
        var typeID = moduleID + " %exports% " + key;
        Refresh.register(exportValue, typeID);
      }
    };

    global.__accept = metroHotUpdateModule;
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var _reactNative = _$$_REQUIRE(_dependencyMap[0], "react-native");

  var _MultiBundleRnApp = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./MultiBundleRnApp"));

  _reactNative.AppRegistry.registerComponent('MultiBundleRnApp', function () {
    return _MultiBundleRnApp.default;
  });
},387,[5,7,493],"business.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v17.0.1
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var _assign = _$$_REQUIRE(_dependencyMap[0], "object-assign");

      var ReactVersion = '17.0.1';
      var REACT_ELEMENT_TYPE = 0xeac7;
      var REACT_PORTAL_TYPE = 0xeaca;
      exports.Fragment = 0xeacb;
      exports.StrictMode = 0xeacc;
      exports.Profiler = 0xead2;
      var REACT_PROVIDER_TYPE = 0xeacd;
      var REACT_CONTEXT_TYPE = 0xeace;
      var REACT_FORWARD_REF_TYPE = 0xead0;
      exports.Suspense = 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = 0xead8;
      var REACT_MEMO_TYPE = 0xead3;
      var REACT_LAZY_TYPE = 0xead4;
      var REACT_BLOCK_TYPE = 0xead9;
      var REACT_SERVER_BLOCK_TYPE = 0xeada;
      var REACT_FUNDAMENTAL_TYPE = 0xead5;
      var REACT_SCOPE_TYPE = 0xead7;
      var REACT_OPAQUE_ID_TYPE = 0xeae0;
      var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
      var REACT_OFFSCREEN_TYPE = 0xeae2;
      var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

      if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        exports.StrictMode = symbolFor('react.strict_mode');
        exports.Profiler = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        exports.Suspense = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
      }

      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator';

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }

        return null;
      }

      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: 0
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;

      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }

      {
        ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
          {
            currentExtraStackFrame = stack;
          }
        };

        ReactDebugCurrentFrame.getCurrentStack = null;

        ReactDebugCurrentFrame.getStackAddendum = function () {
          var stack = '';

          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }

          var impl = ReactDebugCurrentFrame.getCurrentStack;

          if (impl) {
            stack += impl() || '';
          }

          return stack;
        };
      }
      var IsSomeRendererActing = {
        current: false
      };
      var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        assign: _assign
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
      }

      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          printWarning('warn', format, args);
        }
      }

      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          printWarning('error', format, args);
        }
      }

      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame.getStackAddendum();

          if (stack !== '') {
            format += '%s';
            args = args.concat([stack]);
          }

          var argsWithFormat = args.map(function (item) {
            return '' + item;
          });
          argsWithFormat.unshift('Warning: ' + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }

      var didWarnStateUpdateForUnmountedComponent = {};

      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
          var warningKey = componentName + "." + callerName;

          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }

          error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }

      var ReactNoopUpdateQueue = {
        isMounted: function isMounted(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
          warnNoop(publicInstance, 'forceUpdate');
        },
        enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, 'replaceState');
        },
        enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, 'setState');
        }
      };
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }

      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      Component.prototype.isReactComponent = {};

      Component.prototype.setState = function (partialState, callback) {
        if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
          {
            throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
        }

        this.updater.enqueueSetState(this, partialState, callback, 'setState');
      };

      Component.prototype.forceUpdate = function (callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
      };

      {
        var deprecatedAPIs = {
          isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
          replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
        };

        var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function get() {
              warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
              return undefined;
            }
          });
        };

        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }

      function ComponentDummy() {}

      ComponentDummy.prototype = Component.prototype;

      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }

      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;

      _assign(pureComponentPrototype, Component.prototype);

      pureComponentPrototype.isPureReactComponent = true;

      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }

      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
      }

      function getContextName(type) {
        return type.displayName || 'Context';
      }

      function getComponentName(type) {
        if (type == null) {
          return null;
        }

        {
          if (typeof type.tag === 'number') {
            error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
          }
        }

        if (typeof type === 'function') {
          return type.displayName || type.name || null;
        }

        if (typeof type === 'string') {
          return type;
        }

        switch (type) {
          case exports.Fragment:
            return 'Fragment';

          case REACT_PORTAL_TYPE:
            return 'Portal';

          case exports.Profiler:
            return 'Profiler';

          case exports.StrictMode:
            return 'StrictMode';

          case exports.Suspense:
            return 'Suspense';

          case REACT_SUSPENSE_LIST_TYPE:
            return 'SuspenseList';
        }

        if (typeof type === 'object') {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + '.Consumer';

            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + '.Provider';

            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, 'ForwardRef');

            case REACT_MEMO_TYPE:
              return getComponentName(type.type);

            case REACT_BLOCK_TYPE:
              return getComponentName(type._render);

            case REACT_LAZY_TYPE:
              {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;

                try {
                  return getComponentName(init(payload));
                } catch (x) {
                  return null;
                }
              }
          }
        }

        return null;
      }

      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }

      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }

      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }

      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function warnAboutAccessingKey() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
            }
          }
        };

        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }

      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function warnAboutAccessingRef() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
            }
          }
        };

        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }

      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);

            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }

      var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type: type,
          key: key,
          ref: ref,
          props: props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });

          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };

      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }

        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;

          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }

        {
          if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }

            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }

      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }

      function cloneElement(element, config, children) {
        if (!!(element === null || element === undefined)) {
          {
            throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
        }

        var propName;

        var props = _assign({}, element.props);

        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;

        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }

          if (hasValidKey(config)) {
            key = '' + config.key;
          }

          var defaultProps;

          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }

          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }

        var childrenLength = arguments.length - 2;

        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);

          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }

          props.children = childArray;
        }

        return ReactElement(element.type, key, ref, self, source, owner, props);
      }

      function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      var SEPARATOR = '.';
      var SUBSEPARATOR = ':';

      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          '=': '=0',
          ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function (match) {
          return escaperLookup[match];
        });
        return '$' + escapedString;
      }

      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;

      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
      }

      function getElementKey(element, index) {
        if (typeof element === 'object' && element !== null && element.key != null) {
          return escape('' + element.key);
        }

        return index.toString(36);
      }

      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;

        if (type === 'undefined' || type === 'boolean') {
          children = null;
        }

        var invokeCallback = false;

        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case 'string':
            case 'number':
              invokeCallback = true;
              break;

            case 'object':
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }

          }
        }

        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

          if (Array.isArray(mappedChild)) {
            var escapedChildKey = '';

            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + '/';
            }

            mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
            }

            array.push(mappedChild);
          }

          return 1;
        }

        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);

          if (typeof iteratorFn === 'function') {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
                }

                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;

            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === 'object') {
            var childrenString = '' + children;
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }

        return subtreeCount;
      }

      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }

        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function (child) {
          return func.call(context, child, count++);
        });
        return result;
      }

      function countChildren(children) {
        var n = 0;
        mapChildren(children, function () {
          n++;
        });
        return n;
      }

      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function () {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }

      function toArray(children) {
        return mapChildren(children, function (child) {
          return child;
        }) || [];
      }

      function onlyChild(children) {
        if (!isValidElement(children)) {
          {
            throw Error("React.Children.only expected to receive a single React element child.");
          }
        }

        return children;
      }

      function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) {
          calculateChangedBits = null;
        } else {
          {
            if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
              error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
            }
          }
        }

        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _calculateChangedBits: calculateChangedBits,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function get() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
                }

                return context.Provider;
              },
              set: function set(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function get() {
                return context._currentValue;
              },
              set: function set(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function get() {
                return context._currentValue2;
              },
              set: function set(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function get() {
                return context._threadCount;
              },
              set: function set(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function get() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                }

                return context.Consumer;
              }
            },
            displayName: {
              get: function get() {
                return context.displayName;
              },
              set: function set(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }

      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;

      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          var pending = payload;
          pending._status = Pending;
          pending._result = thenable;
          thenable.then(function (moduleObject) {
            if (payload._status === Pending) {
              var defaultExport = moduleObject.default;
              {
                if (defaultExport === undefined) {
                  error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + 'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
                }
              }
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = defaultExport;
            }
          }, function (error) {
            if (payload._status === Pending) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error;
            }
          });
        }

        if (payload._status === Resolved) {
          return payload._result;
        } else {
          throw payload._result;
        }
      }

      function lazy(ctor) {
        var payload = {
          _status: -1,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function get() {
                return defaultProps;
              },
              set: function set(newDefaultProps) {
                error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, 'defaultProps', {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function get() {
                return propTypes;
              },
              set: function set(newPropTypes) {
                error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, 'propTypes', {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }

      function forwardRef(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
          } else if (typeof render !== 'function') {
            error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
          } else {
            if (render.length !== 0 && render.length !== 2) {
              error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
            }
          }

          if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) {
              error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render: render
        };
        {
          var ownName;
          Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function get() {
              return ownName;
            },
            set: function set(name) {
              ownName = name;

              if (render.displayName == null) {
                render.displayName = name;
              }
            }
          });
        }
        return elementType;
      }

      var enableScopeAPI = false;

      function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') {
          return true;
        }

        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
          return true;
        }

        if (typeof type === 'object' && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
            return true;
          }
        }

        return false;
      }

      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type: type,
          compare: compare === undefined ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function get() {
              return ownName;
            },
            set: function set(name) {
              ownName = name;

              if (type.displayName == null) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }

      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;

        if (!(dispatcher !== null)) {
          {
            throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }

        return dispatcher;
      }

      function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        {
          if (unstable_observedBits !== undefined) {
            error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
          }

          if (Context._context !== undefined) {
            var realContext = Context._context;

            if (realContext.Consumer === Context) {
              error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
            } else if (realContext.Provider === Context) {
              error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
            }
          }
        }
        return dispatcher.useContext(Context, unstable_observedBits);
      }

      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }

      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }

      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }

      function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }

      function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }

      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }

      function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }

      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }

      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }

      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;

      function disabledLog() {}

      disabledLog.__reactDisabledLog = true;

      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }

          disabledDepth++;
        }
      }

      function reenableLogs() {
        {
          disabledDepth--;

          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: _assign({}, props, {
                value: prevLog
              }),
              info: _assign({}, props, {
                value: prevInfo
              }),
              warn: _assign({}, props, {
                value: prevWarn
              }),
              error: _assign({}, props, {
                value: prevError
              }),
              group: _assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: _assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: _assign({}, props, {
                value: prevGroupEnd
              })
            });
          }

          if (disabledDepth < 0) {
            error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
          }
        }
      }

      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;

      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || '';
            }
          }

          return '\n' + prefix + name;
        }
      }

      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }

      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return '';
        }

        {
          var frame = componentFrameCache.get(fn);

          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }

        try {
          if (construct) {
            var Fake = function Fake() {
              throw Error();
            };

            Object.defineProperty(Fake.prototype, 'props', {
              set: function set() {
                throw Error();
              }
            });

            if (typeof Reflect === 'object' && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }

              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }

              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }

            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === 'string') {
            var sampleLines = sample.stack.split('\n');
            var controlLines = control.stack.split('\n');
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;

            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }

            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;

                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                      {
                        if (typeof fn === 'function') {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }

                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }

        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        {
          if (typeof fn === 'function') {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }

      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }

      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }

      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return '';
        }

        if (typeof type === 'function') {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }

        if (typeof type === 'string') {
          return describeBuiltInComponentFrame(type);
        }

        switch (type) {
          case exports.Suspense:
            return describeBuiltInComponentFrame('Suspense');

          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame('SuspenseList');
        }

        if (typeof type === 'object') {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);

            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render);

            case REACT_LAZY_TYPE:
              {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;

                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
              }
          }
        }

        return '';
      }

      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }

      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(Object.prototype.hasOwnProperty);

          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;

              try {
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                  var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                  err.name = 'Invariant Violation';
                  throw err;
                }

                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
              } catch (ex) {
                error$1 = ex;
              }

              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }

              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }

      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }

      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }

      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentName(ReactCurrentOwner.current.type);

          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }

        return '';
      }

      function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }

        return '';
      }

      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }

        return '';
      }

      var ownerHasKeyUseWarning = {};

      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();

        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }

        return info;
      }

      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }

        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';

        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        }

        {
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }

      function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') {
          return;
        }

        if (Array.isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];

            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);

          if (typeof iteratorFn === 'function') {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;

              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }

      function validatePropTypes(element) {
        {
          var type = element.type;

          if (type === null || type === undefined || typeof type === 'string') {
            return;
          }

          var propTypes;

          if (typeof type === 'function') {
            propTypes = type.propTypes;
          } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }

          if (propTypes) {
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;

            var _name = getComponentName(type);

            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
          }

          if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
            error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
          }
        }
      }

      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);

          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];

            if (key !== 'children' && key !== 'key') {
              setCurrentlyValidatingElement$1(fragment);
              error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }

          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
          }
        }
      }

      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);

        if (!validType) {
          var info = '';

          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }

          var sourceInfo = getSourceInfoErrorAddendumForProps(props);

          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }

          var typeString;

          if (type === null) {
            typeString = 'null';
          } else if (Array.isArray(type)) {
            typeString = 'array';
          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
            info = ' Did you accidentally export a JSX literal instead of a component?';
          } else {
            typeString = typeof type;
          }

          {
            error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
          }
        }

        var element = createElement.apply(this, arguments);

        if (element == null) {
          return element;
        }

        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }

        if (type === exports.Fragment) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }

        return element;
      }

      var didWarnAboutDeprecatedCreateFactory = false;

      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
          }

          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function get() {
              warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }

      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);

        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }

        validatePropTypes(newElement);
        return newElement;
      }

      {
        try {
          var frozenObject = Object.freeze({});
          new Map([[frozenObject, null]]);
          new Set([frozenObject]);
        } catch (e) {}
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
      };
      exports.Children = Children;
      exports.Component = Component;
      exports.PureComponent = PureComponent;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.cloneElement = cloneElement$1;
      exports.createContext = createContext;
      exports.createElement = createElement$1;
      exports.createFactory = createFactory;
      exports.createRef = createRef;
      exports.forwardRef = forwardRef;
      exports.isValidElement = isValidElement;
      exports.lazy = lazy;
      exports.memo = memo;
      exports.useCallback = useCallback;
      exports.useContext = useContext;
      exports.useDebugValue = useDebugValue;
      exports.useEffect = useEffect;
      exports.useImperativeHandle = useImperativeHandle;
      exports.useLayoutEffect = useLayoutEffect;
      exports.useMemo = useMemo;
      exports.useReducer = useReducer;
      exports.useRef = useRef;
      exports.useState = useState;
      exports.version = ReactVersion;
    })();
  }
},388,[3],"node_modules/react/cjs/react.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.reportLogBoxError = reportLogBoxError;
  exports.isLogBoxErrorMessage = isLogBoxErrorMessage;
  exports.isMessageIgnored = isMessageIgnored;
  exports.addLog = addLog;
  exports.addException = addException;
  exports.symbolicateLogNow = symbolicateLogNow;
  exports.retrySymbolicateLogNow = retrySymbolicateLogNow;
  exports.symbolicateLogLazy = symbolicateLogLazy;
  exports.clear = clear;
  exports.setSelectedLog = setSelectedLog;
  exports.clearWarnings = clearWarnings;
  exports.clearErrors = clearErrors;
  exports.dismiss = dismiss;
  exports.setWarningFilter = setWarningFilter;
  exports.setAppInfo = setAppInfo;
  exports.getAppInfo = getAppInfo;
  exports.checkWarningFilter = checkWarningFilter;
  exports.addIgnorePatterns = addIgnorePatterns;
  exports.setDisabled = setDisabled;
  exports.isDisabled = isDisabled;
  exports.observe = observe;
  exports.withSubscription = withSubscription;

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6], "react"));

  var _LogBoxLog = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "./LogBoxLog"));

  var _parseErrorStack = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "../../Core/Devtools/parseErrorStack"));

  var _NativeLogBox = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "../../NativeModules/specs/NativeLogBox"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  'use strict';

  var observers = new Set();
  var ignorePatterns = new Set();
  var appInfo = null;
  var logs = new Set();
  var updateTimeout = null;
  var _isDisabled = false;

  var _selectedIndex = -1;

  var warningFilter = function warningFilter(format) {
    return {
      finalFormat: format,
      forceDialogImmediately: false,
      suppressDialog_LEGACY: true,
      suppressCompletely: false,
      monitorEvent: 'unknown',
      monitorListVersion: 0,
      monitorSampleRate: 1
    };
  };

  var LOGBOX_ERROR_MESSAGE = 'An error was thrown when attempting to render log messages via LogBox.';

  function getNextState() {
    return {
      logs: logs,
      isDisabled: _isDisabled,
      selectedLogIndex: _selectedIndex
    };
  }

  function reportLogBoxError(error, componentStack) {
    var ExceptionsManager = _$$_REQUIRE(_dependencyMap[10], "../../Core/ExceptionsManager");

    error.forceRedbox = true;
    error.message = LOGBOX_ERROR_MESSAGE + "\n\n" + error.message;

    if (componentStack != null) {
      error.componentStack = componentStack;
    }

    ExceptionsManager.handleException(error, true);
  }

  function isLogBoxErrorMessage(message) {
    return typeof message === 'string' && message.includes(LOGBOX_ERROR_MESSAGE);
  }

  function isMessageIgnored(message) {
    for (var _iterator = _createForOfIteratorHelperLoose(ignorePatterns), _step; !(_step = _iterator()).done;) {
      var pattern = _step.value;

      if (pattern instanceof RegExp && pattern.test(message) || typeof pattern === 'string' && message.includes(pattern)) {
        return true;
      }
    }

    return false;
  }

  function handleUpdate() {
    if (updateTimeout == null) {
      updateTimeout = setImmediate(function () {
        updateTimeout = null;
        var nextState = getNextState();
        observers.forEach(function (_ref) {
          var observer = _ref.observer;
          return observer(nextState);
        });
      });
    }
  }

  function appendNewLog(newLog) {
    if (isMessageIgnored(newLog.message.content)) {
      return;
    }

    var lastLog = Array.from(logs).pop();

    if (lastLog && lastLog.category === newLog.category) {
      lastLog.incrementCount();
      handleUpdate();
      return;
    }

    if (newLog.level === 'fatal') {
      var OPTIMISTIC_WAIT_TIME = 1000;

      var _addPendingLog = function addPendingLog() {
        logs.add(newLog);

        if (_selectedIndex < 0) {
          setSelectedLog(logs.size - 1);
        } else {
          handleUpdate();
        }

        _addPendingLog = null;
      };

      var optimisticTimeout = setTimeout(function () {
        if (_addPendingLog) {
          _addPendingLog();
        }
      }, OPTIMISTIC_WAIT_TIME);
      newLog.symbolicate(function (status) {
        if (_addPendingLog && status !== 'PENDING') {
          _addPendingLog();

          clearTimeout(optimisticTimeout);
        } else if (status !== 'PENDING') {
          handleUpdate();
        }
      });
    } else if (newLog.level === 'syntax') {
      logs.add(newLog);
      setSelectedLog(logs.size - 1);
    } else {
      logs.add(newLog);
      handleUpdate();
    }
  }

  function addLog(log) {
    var errorForStackTrace = new Error();
    setImmediate(function () {
      try {
        var stack = (0, _parseErrorStack.default)(errorForStackTrace == null ? void 0 : errorForStackTrace.stack);
        appendNewLog(new _LogBoxLog.default({
          level: log.level,
          message: log.message,
          isComponentError: false,
          stack: stack,
          category: log.category,
          componentStack: log.componentStack
        }));
      } catch (error) {
        reportLogBoxError(error);
      }
    });
  }

  function addException(error) {
    setImmediate(function () {
      try {
        appendNewLog(new _LogBoxLog.default((0, _$$_REQUIRE(_dependencyMap[11], "./parseLogBoxLog").parseLogBoxException)(error)));
      } catch (loggingError) {
        reportLogBoxError(loggingError);
      }
    });
  }

  function symbolicateLogNow(log) {
    log.symbolicate(function () {
      handleUpdate();
    });
  }

  function retrySymbolicateLogNow(log) {
    log.retrySymbolicate(function () {
      handleUpdate();
    });
  }

  function symbolicateLogLazy(log) {
    log.symbolicate();
  }

  function clear() {
    if (logs.size > 0) {
      logs = new Set();
      setSelectedLog(-1);
    }
  }

  function setSelectedLog(proposedNewIndex) {
    var oldIndex = _selectedIndex;
    var newIndex = proposedNewIndex;
    var logArray = Array.from(logs);
    var index = logArray.length - 1;

    while (index >= 0) {
      if (logArray[index].level === 'syntax') {
        newIndex = index;
        break;
      }

      index -= 1;
    }

    _selectedIndex = newIndex;
    handleUpdate();

    if (_NativeLogBox.default) {
      setTimeout(function () {
        if (oldIndex < 0 && newIndex >= 0) {
          _NativeLogBox.default.show();
        } else if (oldIndex >= 0 && newIndex < 0) {
          _NativeLogBox.default.hide();
        }
      }, 0);
    }
  }

  function clearWarnings() {
    var newLogs = Array.from(logs).filter(function (log) {
      return log.level !== 'warn';
    });

    if (newLogs.length !== logs.size) {
      logs = new Set(newLogs);
      setSelectedLog(-1);
      handleUpdate();
    }
  }

  function clearErrors() {
    var newLogs = Array.from(logs).filter(function (log) {
      return log.level !== 'error' && log.level !== 'fatal';
    });

    if (newLogs.length !== logs.size) {
      logs = new Set(newLogs);
      setSelectedLog(-1);
    }
  }

  function dismiss(log) {
    if (logs.has(log)) {
      logs.delete(log);
      handleUpdate();
    }
  }

  function setWarningFilter(filter) {
    warningFilter = filter;
  }

  function setAppInfo(info) {
    appInfo = info;
  }

  function getAppInfo() {
    return appInfo != null ? appInfo() : null;
  }

  function checkWarningFilter(format) {
    return warningFilter(format);
  }

  function addIgnorePatterns(patterns) {
    var newPatterns = patterns.filter(function (pattern) {
      if (pattern instanceof RegExp) {
        for (var _iterator2 = _createForOfIteratorHelperLoose(ignorePatterns.entries()), _step2; !(_step2 = _iterator2()).done;) {
          var existingPattern = _step2.value;

          if (existingPattern instanceof RegExp && existingPattern.toString() === pattern.toString()) {
            return false;
          }
        }

        return true;
      }

      return !ignorePatterns.has(pattern);
    });

    if (newPatterns.length === 0) {
      return;
    }

    for (var _iterator3 = _createForOfIteratorHelperLoose(newPatterns), _step3; !(_step3 = _iterator3()).done;) {
      var pattern = _step3.value;
      ignorePatterns.add(pattern);
      logs = new Set(Array.from(logs).filter(function (log) {
        return !isMessageIgnored(log.message.content);
      }));
    }

    handleUpdate();
  }

  function setDisabled(value) {
    if (value === _isDisabled) {
      return;
    }

    _isDisabled = value;
    handleUpdate();
  }

  function isDisabled() {
    return _isDisabled;
  }

  function observe(observer) {
    var subscription = {
      observer: observer
    };
    observers.add(subscription);
    observer(getNextState());
    return {
      unsubscribe: function unsubscribe() {
        observers.delete(subscription);
      }
    };
  }

  function withSubscription(WrappedComponent) {
    var LogBoxStateSubscription = function (_React$Component) {
      (0, _inherits2.default)(LogBoxStateSubscription, _React$Component);

      var _super = _createSuper(LogBoxStateSubscription);

      function LogBoxStateSubscription() {
        var _this;

        (0, _classCallCheck2.default)(this, LogBoxStateSubscription);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this.state = {
          logs: new Set(),
          isDisabled: false,
          hasError: false,
          selectedLogIndex: -1
        };

        _this._handleDismiss = function () {
          var _this$state = _this.state,
              selectedLogIndex = _this$state.selectedLogIndex,
              stateLogs = _this$state.logs;
          var logsArray = Array.from(stateLogs);

          if (selectedLogIndex != null) {
            if (logsArray.length - 1 <= 0) {
              setSelectedLog(-1);
            } else if (selectedLogIndex >= logsArray.length - 1) {
              setSelectedLog(selectedLogIndex - 1);
            }

            dismiss(logsArray[selectedLogIndex]);
          }
        };

        _this._handleMinimize = function () {
          setSelectedLog(-1);
        };

        _this._handleSetSelectedLog = function (index) {
          setSelectedLog(index);
        };

        return _this;
      }

      (0, _createClass2.default)(LogBoxStateSubscription, [{
        key: "componentDidCatch",
        value: function componentDidCatch(err, errorInfo) {
          reportLogBoxError(err, errorInfo.componentStack);
        }
      }, {
        key: "render",
        value: function render() {
          if (this.state.hasError) {
            return null;
          }

          return React.createElement(WrappedComponent, {
            logs: Array.from(this.state.logs),
            isDisabled: this.state.isDisabled,
            selectedLogIndex: this.state.selectedLogIndex,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 430,
              columnNumber: 9
            }
          });
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          this._subscription = observe(function (data) {
            _this2.setState(data);
          });
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this._subscription != null) {
            this._subscription.unsubscribe();
          }
        }
      }], [{
        key: "getDerivedStateFromError",
        value: function getDerivedStateFromError() {
          return {
            hasError: true
          };
        }
      }]);
      return LogBoxStateSubscription;
    }(React.Component);

    return LogBoxStateSubscription;
  }
},389,[7,9,10,14,16,13,1,390,62,394,56,395],"node_modules/react-native/Libraries/LogBox/Data/LogBoxData.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var LogBoxSymbolication = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "./LogBoxSymbolication"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var LogBoxLog = function () {
    function LogBoxLog(data) {
      (0, _classCallCheck2.default)(this, LogBoxLog);
      this.symbolicated = {
        error: null,
        stack: null,
        status: 'NONE'
      };
      this.level = data.level;
      this.type = data.type;
      this.message = data.message;
      this.stack = data.stack;
      this.category = data.category;
      this.componentStack = data.componentStack;
      this.codeFrame = data.codeFrame;
      this.isComponentError = data.isComponentError;
      this.count = 1;
    }

    (0, _createClass2.default)(LogBoxLog, [{
      key: "incrementCount",
      value: function incrementCount() {
        this.count += 1;
      }
    }, {
      key: "getAvailableStack",
      value: function getAvailableStack() {
        return this.symbolicated.status === 'COMPLETE' ? this.symbolicated.stack : this.stack;
      }
    }, {
      key: "retrySymbolicate",
      value: function retrySymbolicate(callback) {
        if (this.symbolicated.status !== 'COMPLETE') {
          LogBoxSymbolication.deleteStack(this.stack);
          this.handleSymbolicate(callback);
        }
      }
    }, {
      key: "symbolicate",
      value: function symbolicate(callback) {
        if (this.symbolicated.status === 'NONE') {
          this.handleSymbolicate(callback);
        }
      }
    }, {
      key: "handleSymbolicate",
      value: function handleSymbolicate(callback) {
        var _this = this;

        if (this.symbolicated.status !== 'PENDING') {
          this.updateStatus(null, null, null, callback);
          LogBoxSymbolication.symbolicate(this.stack).then(function (data) {
            _this.updateStatus(null, data == null ? void 0 : data.stack, data == null ? void 0 : data.codeFrame, callback);
          }, function (error) {
            _this.updateStatus(error, null, null, callback);
          });
        }
      }
    }, {
      key: "updateStatus",
      value: function updateStatus(error, stack, codeFrame, callback) {
        var lastStatus = this.symbolicated.status;

        if (error != null) {
          this.symbolicated = {
            error: error,
            stack: null,
            status: 'FAILED'
          };
        } else if (stack != null) {
          if (codeFrame) {
            this.codeFrame = codeFrame;
          }

          this.symbolicated = {
            error: null,
            stack: stack,
            status: 'COMPLETE'
          };
        } else {
          this.symbolicated = {
            error: null,
            stack: null,
            status: 'PENDING'
          };
        }

        if (callback && lastStatus !== this.symbolicated.status) {
          callback(this.symbolicated.status);
        }
      }
    }]);
    return LogBoxLog;
  }();

  var _default = LogBoxLog;
  exports.default = _default;
},390,[7,9,10,391],"node_modules/react-native/Libraries/LogBox/Data/LogBoxLog.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.deleteStack = deleteStack;
  exports.symbolicate = symbolicate;

  var _symbolicateStackTrace = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Core/Devtools/symbolicateStackTrace"));

  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var cache = new Map();

  var sanitize = function sanitize(_ref) {
    var maybeStack = _ref.stack,
        codeFrame = _ref.codeFrame;

    if (!Array.isArray(maybeStack)) {
      throw new Error('Expected stack to be an array.');
    }

    var stack = [];

    for (var _iterator = _createForOfIteratorHelperLoose(maybeStack), _step; !(_step = _iterator()).done;) {
      var maybeFrame = _step.value;
      var collapse = false;

      if ('collapse' in maybeFrame) {
        if (typeof maybeFrame.collapse !== 'boolean') {
          throw new Error('Expected stack frame `collapse` to be a boolean.');
        }

        collapse = maybeFrame.collapse;
      }

      stack.push({
        column: maybeFrame.column,
        file: maybeFrame.file,
        lineNumber: maybeFrame.lineNumber,
        methodName: maybeFrame.methodName,
        collapse: collapse
      });
    }

    return {
      stack: stack,
      codeFrame: codeFrame
    };
  };

  function deleteStack(stack) {
    cache.delete(stack);
  }

  function symbolicate(stack) {
    var promise = cache.get(stack);

    if (promise == null) {
      promise = (0, _symbolicateStackTrace.default)(stack).then(sanitize);
      cache.set(stack, promise);
    }

    return promise;
  }
},391,[7,392],"node_modules/react-native/Libraries/LogBox/Data/LogBoxSymbolication.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function symbolicateStackTrace(stack) {
    var _global$fetch;

    var devServer, fetch, response;
    return _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/regenerator").async(function symbolicateStackTrace$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            devServer = _$$_REQUIRE(_dependencyMap[1], "./getDevServer")();

            if (devServer.bundleLoadedFromServer) {
              _context.next = 3;
              break;
            }

            throw new Error('Bundle was not loaded from Metro.');

          case 3:
            fetch = (_global$fetch = global.fetch) != null ? _global$fetch : _$$_REQUIRE(_dependencyMap[2], "../../Network/fetch");
            _context.next = 6;
            return _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/regenerator").awrap(fetch(devServer.url + 'symbolicate', {
              method: 'POST',
              body: JSON.stringify({
                stack: stack
              })
            }));

          case 6:
            response = _context.sent;
            _context.next = 9;
            return _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/regenerator").awrap(response.json());

          case 9:
            return _context.abrupt("return", _context.sent);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  }

  module.exports = symbolicateStackTrace;
},392,[273,393,106],"node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeSourceCode = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../NativeModules/specs/NativeSourceCode"));

  var _cachedDevServerURL;

  var _cachedFullBundleURL;

  var FALLBACK = 'http://localhost:8081/';

  function getDevServer() {
    var _cachedDevServerURL2;

    if (_cachedDevServerURL === undefined) {
      var scriptUrl = _NativeSourceCode.default.getConstants().scriptURL;

      var match = scriptUrl.match(/^https?:\/\/.*?\//);
      _cachedDevServerURL = match ? match[0] : null;
      _cachedFullBundleURL = match ? scriptUrl : null;
    }

    return {
      url: (_cachedDevServerURL2 = _cachedDevServerURL) != null ? _cachedDevServerURL2 : FALLBACK,
      fullBundleUrl: _cachedFullBundleURL,
      bundleLoadedFromServer: _cachedDevServerURL !== null
    };
  }

  module.exports = getDevServer;
},393,[7,171],"node_modules/react-native/Libraries/Core/Devtools/getDevServer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var TurboModuleRegistry = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/TurboModule/TurboModuleRegistry"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var _default = TurboModuleRegistry.get('LogBox');

  exports.default = _default;
},394,[29],"node_modules/react-native/Libraries/NativeModules/specs/NativeLogBox.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parseInterpolation = parseInterpolation;
  exports.parseComponentStack = parseComponentStack;
  exports.parseLogBoxException = parseLogBoxException;
  exports.parseLogBoxLog = parseLogBoxLog;

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/slicedToArray"));

  var _toConsumableArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/toConsumableArray"));

  var _UTFSequence = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../UTFSequence"));

  var _stringifySafe = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Utilities/stringifySafe"));

  var _parseErrorStack = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Core/Devtools/parseErrorStack"));

  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \((\d+):(\d+)\)\n\n([\s\S]+)/;
  var BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*):? (?:(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?)(\/(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*): ((?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+?)\n([ >]{2}[\t-\r 0-9\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+ \|(?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+|\x1B(?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)/;
  var METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) ((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*): ((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*) \(([0-9]+):([0-9]+)\)\n\n((?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)/;
  var SUBSTITUTION = _UTFSequence.default.BOM + '%s';

  function parseInterpolation(args) {
    var categoryParts = [];
    var contentParts = [];
    var substitutionOffsets = [];
    var remaining = (0, _toConsumableArray2.default)(args);

    if (typeof remaining[0] === 'string') {
      var formatString = String(remaining.shift());
      var formatStringParts = formatString.split('%s');
      var substitutionCount = formatStringParts.length - 1;
      var substitutions = remaining.splice(0, substitutionCount);
      var categoryString = '';
      var contentString = '';
      var substitutionIndex = 0;

      for (var _iterator = _createForOfIteratorHelperLoose(formatStringParts), _step; !(_step = _iterator()).done;) {
        var formatStringPart = _step.value;
        categoryString += formatStringPart;
        contentString += formatStringPart;

        if (substitutionIndex < substitutionCount) {
          if (substitutionIndex < substitutions.length) {
            var substitution = typeof substitutions[substitutionIndex] === 'string' ? substitutions[substitutionIndex] : (0, _stringifySafe.default)(substitutions[substitutionIndex]);
            substitutionOffsets.push({
              length: substitution.length,
              offset: contentString.length
            });
            categoryString += SUBSTITUTION;
            contentString += substitution;
          } else {
            substitutionOffsets.push({
              length: 2,
              offset: contentString.length
            });
            categoryString += '%s';
            contentString += '%s';
          }

          substitutionIndex++;
        }
      }

      categoryParts.push(categoryString);
      contentParts.push(contentString);
    }

    var remainingArgs = remaining.map(function (arg) {
      return typeof arg === 'string' ? arg : (0, _stringifySafe.default)(arg);
    });
    categoryParts.push.apply(categoryParts, (0, _toConsumableArray2.default)(remainingArgs));
    contentParts.push.apply(contentParts, (0, _toConsumableArray2.default)(remainingArgs));
    return {
      category: categoryParts.join(' '),
      message: {
        content: contentParts.join(' '),
        substitutions: substitutionOffsets
      }
    };
  }

  function isComponentStack(consoleArgument) {
    var isOldComponentStackFormat = / {4}in/.test(consoleArgument);
    var isNewComponentStackFormat = / {4}at/.test(consoleArgument);
    var isNewJSCComponentStackFormat = /@.*\n/.test(consoleArgument);
    return isOldComponentStackFormat || isNewComponentStackFormat || isNewJSCComponentStackFormat;
  }

  function parseComponentStack(message) {
    var stack = (0, _parseErrorStack.default)(message);

    if (stack && stack.length > 0) {
      return stack.map(function (frame) {
        return {
          content: frame.methodName,
          collapse: frame.collapse || false,
          fileName: frame.file == null ? 'unknown' : frame.file,
          location: {
            column: frame.column == null ? -1 : frame.column,
            row: frame.lineNumber == null ? -1 : frame.lineNumber
          }
        };
      });
    }

    return message.split(/\n {4}in /g).map(function (s) {
      if (!s) {
        return null;
      }

      var match = s.match(/(.*) \(at (.*\.js):([\d]+)\)/);

      if (!match) {
        return null;
      }

      var _match$slice = match.slice(1),
          _match$slice2 = (0, _slicedToArray2.default)(_match$slice, 3),
          content = _match$slice2[0],
          fileName = _match$slice2[1],
          row = _match$slice2[2];

      return {
        content: content,
        fileName: fileName,
        location: {
          column: -1,
          row: parseInt(row, 10)
        }
      };
    }).filter(Boolean);
  }

  function parseLogBoxException(error) {
    var message = error.originalMessage != null ? error.originalMessage : 'Unknown';
    var metroInternalError = message.match(METRO_ERROR_FORMAT);

    if (metroInternalError) {
      var _metroInternalError$s = metroInternalError.slice(1),
          _metroInternalError$s2 = (0, _slicedToArray2.default)(_metroInternalError$s, 5),
          content = _metroInternalError$s2[0],
          fileName = _metroInternalError$s2[1],
          row = _metroInternalError$s2[2],
          column = _metroInternalError$s2[3],
          codeFrame = _metroInternalError$s2[4];

      return {
        level: 'fatal',
        type: 'Metro Error',
        stack: [],
        isComponentError: false,
        componentStack: [],
        codeFrame: {
          fileName: fileName,
          location: {
            row: parseInt(row, 10),
            column: parseInt(column, 10)
          },
          content: codeFrame
        },
        message: {
          content: content,
          substitutions: []
        },
        category: fileName + "-" + row + "-" + column
      };
    }

    var babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);

    if (babelTransformError) {
      var _babelTransformError$ = babelTransformError.slice(1),
          _babelTransformError$2 = (0, _slicedToArray2.default)(_babelTransformError$, 5),
          _fileName = _babelTransformError$2[0],
          _content = _babelTransformError$2[1],
          _row = _babelTransformError$2[2],
          _column = _babelTransformError$2[3],
          _codeFrame = _babelTransformError$2[4];

      return {
        level: 'syntax',
        stack: [],
        isComponentError: false,
        componentStack: [],
        codeFrame: {
          fileName: _fileName,
          location: {
            row: parseInt(_row, 10),
            column: parseInt(_column, 10)
          },
          content: _codeFrame
        },
        message: {
          content: _content,
          substitutions: []
        },
        category: _fileName + "-" + _row + "-" + _column
      };
    }

    var babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);

    if (babelCodeFrameError) {
      var _babelCodeFrameError$ = babelCodeFrameError.slice(1),
          _babelCodeFrameError$2 = (0, _slicedToArray2.default)(_babelCodeFrameError$, 3),
          _fileName2 = _babelCodeFrameError$2[0],
          _content2 = _babelCodeFrameError$2[1],
          _codeFrame2 = _babelCodeFrameError$2[2];

      return {
        level: 'syntax',
        stack: [],
        isComponentError: false,
        componentStack: [],
        codeFrame: {
          fileName: _fileName2,
          location: null,
          content: _codeFrame2
        },
        message: {
          content: _content2,
          substitutions: []
        },
        category: _fileName2 + "-" + 1 + "-" + 1
      };
    }

    if (message.match(/^TransformError /)) {
      return {
        level: 'syntax',
        stack: error.stack,
        isComponentError: error.isComponentError,
        componentStack: [],
        message: {
          content: message,
          substitutions: []
        },
        category: message
      };
    }

    var componentStack = error.componentStack;

    if (error.isFatal || error.isComponentError) {
      return (0, _extends2.default)({
        level: 'fatal',
        stack: error.stack,
        isComponentError: error.isComponentError,
        componentStack: componentStack != null ? parseComponentStack(componentStack) : []
      }, parseInterpolation([message]));
    }

    if (componentStack != null) {
      return (0, _extends2.default)({
        level: 'error',
        stack: error.stack,
        isComponentError: error.isComponentError,
        componentStack: parseComponentStack(componentStack)
      }, parseInterpolation([message]));
    }

    return (0, _extends2.default)({
      level: 'error',
      stack: error.stack,
      isComponentError: error.isComponentError
    }, parseLogBoxLog([message]));
  }

  function parseLogBoxLog(args) {
    var message = args[0];
    var argsWithoutComponentStack = [];
    var componentStack = [];

    if (typeof message === 'string' && message.slice(-2) === '%s' && args.length > 0) {
      var lastArg = args[args.length - 1];

      if (typeof lastArg === 'string' && isComponentStack(lastArg)) {
        argsWithoutComponentStack = args.slice(0, -1);
        argsWithoutComponentStack[0] = message.slice(0, -2);
        componentStack = parseComponentStack(lastArg);
      }
    }

    if (componentStack.length === 0) {
      for (var _iterator2 = _createForOfIteratorHelperLoose(args), _step2; !(_step2 = _iterator2()).done;) {
        var arg = _step2.value;

        if (typeof arg === 'string' && isComponentStack(arg)) {
          var messageEndIndex = arg.search(/\n {4}(in|at) /);

          if (messageEndIndex < 0) {
            messageEndIndex = arg.search(/\n/);
          }

          if (messageEndIndex > 0) {
            argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));
          }

          componentStack = parseComponentStack(arg);
        } else {
          argsWithoutComponentStack.push(arg);
        }
      }
    }

    return (0, _extends2.default)({}, parseInterpolation(argsWithoutComponentStack), {
      componentStack: componentStack
    });
  }
},395,[7,4,31,42,380,41,62],"node_modules/react-native/Libraries/LogBox/Data/parseLogBoxLog.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (__DEV__) {
    (function () {
      "use strict";

      var React = _$$_REQUIRE(_dependencyMap[0], "react");

      _$$_REQUIRE(_dependencyMap[1], "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore");

      var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface");

      var Scheduler = _$$_REQUIRE(_dependencyMap[3], "scheduler");

      var tracing = _$$_REQUIRE(_dependencyMap[4], "scheduler/tracing");

      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          printWarning("warn", format, args);
        }
      }

      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          printWarning("error", format, args);
        }
      }

      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame.getStackAddendum();

          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }

          var argsWithFormat = args.map(function (item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }

      function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);

        try {
          func.apply(context, funcArgs);
        } catch (error) {
          this.onError(error);
        }
      }

      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");

          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            if (!(typeof document !== "undefined")) {
              throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }

            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");

            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback, false);

              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            }

            var funcArgs = Array.prototype.slice.call(arguments, 3);

            function callCallback() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context, funcArgs);
              didError = false;
            }

            var error;
            var didSetError = false;
            var isCrossOriginError = false;

            function handleWindowError(event) {
              error = event.error;
              didSetError = true;

              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }

              if (event.defaultPrevented) {
                if (error != null && typeof error === "object") {
                  try {
                    error._suppressLogging = true;
                  } catch (inner) {}
                }
              }
            }

            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);

            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }

            if (didCall && didError) {
              if (!didSetError) {
                error = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
              } else if (isCrossOriginError) {
                error = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://reactjs.org/link/crossorigin-error for more information.");
              }

              this.onError(error);
            }

            window.removeEventListener("error", handleWindowError);

            if (!didCall) {
              restoreAfterDispatch();
              return invokeGuardedCallbackProd.apply(this, arguments);
            }
          };
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function onError(error) {
          hasError = true;
          caughtError = error;
        }
      };

      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }

      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);

        if (hasError) {
          var error = clearCaughtError();

          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error;
          }
        }
      }

      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error;
        }
      }

      function hasCaughtError() {
        return hasError;
      }

      function clearCaughtError() {
        if (hasError) {
          var error = caughtError;
          hasError = false;
          caughtError = null;
          return error;
        } else {
          {
            throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      var getFiberCurrentPropsFromNode = null;
      var getInstanceFromNode = null;
      var getNodeFromInstance = null;

      function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
        getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
        getInstanceFromNode = getInstanceFromNodeImpl;
        getNodeFromInstance = getNodeFromInstanceImpl;
        {
          if (!getNodeFromInstance || !getInstanceFromNode) {
            error("EventPluginUtils.setComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
          }
        }
      }

      var validateEventDispatches;
      {
        validateEventDispatches = function validateEventDispatches(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          var listenersIsArr = Array.isArray(dispatchListeners);
          var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
          var instancesIsArr = Array.isArray(dispatchInstances);
          var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

          if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
            error("EventPluginUtils: Invalid `event`.");
          }
        };
      }

      function executeDispatch(event, listener, inst) {
        var type = event.type || "unknown-event";
        event.currentTarget = getNodeFromInstance(inst);
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }

      function executeDispatchesInOrder(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
          }
        } else if (dispatchListeners) {
          executeDispatch(event, dispatchListeners, dispatchInstances);
        }

        event._dispatchListeners = null;
        event._dispatchInstances = null;
      }

      function executeDispatchesInOrderStopAtTrueImpl(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            if (dispatchListeners[i](event, dispatchInstances[i])) {
              return dispatchInstances[i];
            }
          }
        } else if (dispatchListeners) {
          if (dispatchListeners(event, dispatchInstances)) {
            return dispatchInstances;
          }
        }

        return null;
      }

      function executeDispatchesInOrderStopAtTrue(event) {
        var ret = executeDispatchesInOrderStopAtTrueImpl(event);
        event._dispatchInstances = null;
        event._dispatchListeners = null;
        return ret;
      }

      function executeDirectDispatch(event) {
        {
          validateEventDispatches(event);
        }
        var dispatchListener = event._dispatchListeners;
        var dispatchInstance = event._dispatchInstances;

        if (!!Array.isArray(dispatchListener)) {
          throw Error("executeDirectDispatch(...): Invalid `event`.");
        }

        event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
        var res = dispatchListener ? dispatchListener(event) : null;
        event.currentTarget = null;
        event._dispatchListeners = null;
        event._dispatchInstances = null;
        return res;
      }

      function hasDispatches(event) {
        return !!event._dispatchListeners;
      }

      var EVENT_POOL_SIZE = 10;
      var EventInterface = {
        type: null,
        target: null,
        currentTarget: function currentTarget() {
          return null;
        },
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function timeStamp(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
      };

      function functionThatReturnsTrue() {
        return true;
      }

      function functionThatReturnsFalse() {
        return false;
      }

      function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        {
          delete this.nativeEvent;
          delete this.preventDefault;
          delete this.stopPropagation;
          delete this.isDefaultPrevented;
          delete this.isPropagationStopped;
        }
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        this._dispatchListeners = null;
        this._dispatchInstances = null;
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          if (!Interface.hasOwnProperty(propName)) {
            continue;
          }

          {
            delete this[propName];
          }
          var normalize = Interface[propName];

          if (normalize) {
            this[propName] = normalize(nativeEvent);
          } else {
            if (propName === "target") {
              this.target = nativeEventTarget;
            } else {
              this[propName] = nativeEvent[propName];
            }
          }
        }

        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

        if (defaultPrevented) {
          this.isDefaultPrevented = functionThatReturnsTrue;
        } else {
          this.isDefaultPrevented = functionThatReturnsFalse;
        }

        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }

      _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")(SyntheticEvent.prototype, {
        preventDefault: function preventDefault() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }

          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function stopPropagation() {
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }

          this.isPropagationStopped = functionThatReturnsTrue;
        },
        persist: function persist() {
          this.isPersistent = functionThatReturnsTrue;
        },
        isPersistent: functionThatReturnsFalse,
        destructor: function destructor() {
          var Interface = this.constructor.Interface;

          for (var propName in Interface) {
            {
              Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            }
          }

          this.dispatchConfig = null;
          this._targetInst = null;
          this.nativeEvent = null;
          this.isDefaultPrevented = functionThatReturnsFalse;
          this.isPropagationStopped = functionThatReturnsFalse;
          this._dispatchListeners = null;
          this._dispatchInstances = null;
          {
            Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
            Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
            Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
            Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function () {}));
            Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function () {}));
          }
        }
      });

      SyntheticEvent.Interface = EventInterface;

      SyntheticEvent.extend = function (Interface) {
        var Super = this;

        var E = function E() {};

        E.prototype = Super.prototype;
        var prototype = new E();

        function Class() {
          return Super.apply(this, arguments);
        }

        _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")(prototype, Class.prototype);

        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, Super.Interface, Interface);
        Class.extend = Super.extend;
        addEventPoolingTo(Class);
        return Class;
      };

      addEventPoolingTo(SyntheticEvent);

      function getPooledWarningPropertyDefinition(propName, getVal) {
        function set(val) {
          var action = isFunction ? "setting the method" : "setting the property";
          warn(action, "This is effectively a no-op");
          return val;
        }

        function get() {
          var action = isFunction ? "accessing the method" : "accessing the property";
          var result = isFunction ? "This is a no-op function" : "This is set to null";
          warn(action, result);
          return getVal;
        }

        function warn(action, result) {
          {
            error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://reactjs.org/link/event-pooling for more information.", action, propName, result);
          }
        }

        var isFunction = typeof getVal === "function";
        return {
          configurable: true,
          set: set,
          get: get
        };
      }

      function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;

        if (EventConstructor.eventPool.length) {
          var instance = EventConstructor.eventPool.pop();
          EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
          return instance;
        }

        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
      }

      function releasePooledEvent(event) {
        var EventConstructor = this;

        if (!(event instanceof EventConstructor)) {
          throw Error("Trying to release an event instance into a pool of a different type.");
        }

        event.destructor();

        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
          EventConstructor.eventPool.push(event);
        }
      }

      function addEventPoolingTo(EventConstructor) {
        EventConstructor.getPooled = createOrGetPooledEvent;
        EventConstructor.eventPool = [];
        EventConstructor.release = releasePooledEvent;
      }

      var ResponderSyntheticEvent = SyntheticEvent.extend({
        touchHistory: function touchHistory(nativeEvent) {
          return null;
        }
      });
      var TOP_TOUCH_START = "topTouchStart";
      var TOP_TOUCH_MOVE = "topTouchMove";
      var TOP_TOUCH_END = "topTouchEnd";
      var TOP_TOUCH_CANCEL = "topTouchCancel";
      var TOP_SCROLL = "topScroll";
      var TOP_SELECTION_CHANGE = "topSelectionChange";

      function isStartish(topLevelType) {
        return topLevelType === TOP_TOUCH_START;
      }

      function isMoveish(topLevelType) {
        return topLevelType === TOP_TOUCH_MOVE;
      }

      function isEndish(topLevelType) {
        return topLevelType === TOP_TOUCH_END || topLevelType === TOP_TOUCH_CANCEL;
      }

      var startDependencies = [TOP_TOUCH_START];
      var moveDependencies = [TOP_TOUCH_MOVE];
      var endDependencies = [TOP_TOUCH_CANCEL, TOP_TOUCH_END];
      var MAX_TOUCH_BANK = 20;
      var touchBank = [];
      var touchHistory = {
        touchBank: touchBank,
        numberActiveTouches: 0,
        indexOfSingleActiveTouch: -1,
        mostRecentTimeStamp: 0
      };

      function timestampForTouch(touch) {
        return touch.timeStamp || touch.timestamp;
      }

      function createTouchRecord(touch) {
        return {
          touchActive: true,
          startPageX: touch.pageX,
          startPageY: touch.pageY,
          startTimeStamp: timestampForTouch(touch),
          currentPageX: touch.pageX,
          currentPageY: touch.pageY,
          currentTimeStamp: timestampForTouch(touch),
          previousPageX: touch.pageX,
          previousPageY: touch.pageY,
          previousTimeStamp: timestampForTouch(touch)
        };
      }

      function resetTouchRecord(touchRecord, touch) {
        touchRecord.touchActive = true;
        touchRecord.startPageX = touch.pageX;
        touchRecord.startPageY = touch.pageY;
        touchRecord.startTimeStamp = timestampForTouch(touch);
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchRecord.previousPageX = touch.pageX;
        touchRecord.previousPageY = touch.pageY;
        touchRecord.previousTimeStamp = timestampForTouch(touch);
      }

      function getTouchIdentifier(_ref) {
        var identifier = _ref.identifier;

        if (!(identifier != null)) {
          throw Error("Touch object is missing identifier.");
        }

        {
          if (identifier > MAX_TOUCH_BANK) {
            error("Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK);
          }
        }
        return identifier;
      }

      function recordTouchStart(touch) {
        var identifier = getTouchIdentifier(touch);
        var touchRecord = touchBank[identifier];

        if (touchRecord) {
          resetTouchRecord(touchRecord, touch);
        } else {
          touchBank[identifier] = createTouchRecord(touch);
        }

        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      }

      function recordTouchMove(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = true;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          {
            warn("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n" + "Touch Bank: %s", printTouch(touch), printTouchBank());
          }
        }
      }

      function recordTouchEnd(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = false;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          {
            warn("Cannot record touch end without a touch start.\n" + "Touch End: %s\n" + "Touch Bank: %s", printTouch(touch), printTouchBank());
          }
        }
      }

      function printTouch(touch) {
        return JSON.stringify({
          identifier: touch.identifier,
          pageX: touch.pageX,
          pageY: touch.pageY,
          timestamp: timestampForTouch(touch)
        });
      }

      function printTouchBank() {
        var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));

        if (touchBank.length > MAX_TOUCH_BANK) {
          printed += " (original size: " + touchBank.length + ")";
        }

        return printed;
      }

      var ResponderTouchHistoryStore = {
        recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
          if (isMoveish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchMove);
          } else if (isStartish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchStart);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
            }
          } else if (isEndish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchEnd);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];

                if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
                  touchHistory.indexOfSingleActiveTouch = i;
                  break;
                }
              }

              {
                var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];

                if (activeRecord == null || !activeRecord.touchActive) {
                  error("Cannot find single active touch.");
                }
              }
            }
          }
        },
        touchHistory: touchHistory
      };

      function accumulate(current, next) {
        if (!(next != null)) {
          throw Error("accumulate(...): Accumulated items must not be null or undefined.");
        }

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          return current.concat(next);
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      function accumulateInto(current, next) {
        if (!(next != null)) {
          throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
        }

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          if (Array.isArray(next)) {
            current.push.apply(current, next);
            return current;
          }

          current.push(next);
          return current;
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) {
          arr.forEach(cb, scope);
        } else if (arr) {
          cb.call(scope, arr);
        }
      }

      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var FundamentalComponent = 20;
      var ScopeComponent = 21;
      var Block = 22;
      var OffscreenComponent = 23;
      var LegacyHiddenComponent = 24;
      var responderInst = null;
      var trackedTouchCount = 0;

      var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
        var oldResponderInst = responderInst;
        responderInst = nextResponderInst;

        if (ResponderEventPlugin.GlobalResponderHandler !== null) {
          ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
        }
      };

      var eventTypes = {
        startShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
          },
          dependencies: startDependencies
        },
        scrollShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
          },
          dependencies: [TOP_SCROLL]
        },
        selectionChangeShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
          },
          dependencies: [TOP_SELECTION_CHANGE]
        },
        moveShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
          },
          dependencies: moveDependencies
        },
        responderStart: {
          registrationName: "onResponderStart",
          dependencies: startDependencies
        },
        responderMove: {
          registrationName: "onResponderMove",
          dependencies: moveDependencies
        },
        responderEnd: {
          registrationName: "onResponderEnd",
          dependencies: endDependencies
        },
        responderRelease: {
          registrationName: "onResponderRelease",
          dependencies: endDependencies
        },
        responderTerminationRequest: {
          registrationName: "onResponderTerminationRequest",
          dependencies: []
        },
        responderGrant: {
          registrationName: "onResponderGrant",
          dependencies: []
        },
        responderReject: {
          registrationName: "onResponderReject",
          dependencies: []
        },
        responderTerminate: {
          registrationName: "onResponderTerminate",
          dependencies: []
        }
      };

      function getParent(inst) {
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);

        if (inst) {
          return inst;
        }

        return null;
      }

      function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;

        for (var tempA = instA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }

        var depthB = 0;

        for (var tempB = instB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }

        while (depthA - depthB > 0) {
          instA = getParent(instA);
          depthA--;
        }

        while (depthB - depthA > 0) {
          instB = getParent(instB);
          depthB--;
        }

        var depth = depthA;

        while (depth--) {
          if (instA === instB || instA === instB.alternate) {
            return instA;
          }

          instA = getParent(instA);
          instB = getParent(instB);
        }

        return null;
      }

      function isAncestor(instA, instB) {
        while (instB) {
          if (instA === instB || instA === instB.alternate) {
            return true;
          }

          instB = getParent(instB);
        }

        return false;
      }

      function traverseTwoPhase(inst, fn, arg) {
        var path = [];

        while (inst) {
          path.push(inst);
          inst = getParent(inst);
        }

        var i;

        for (i = path.length; i-- > 0;) {
          fn(path[i], "captured", arg);
        }

        for (i = 0; i < path.length; i++) {
          fn(path[i], "bubbled", arg);
        }
      }

      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;

        if (stateNode === null) {
          return null;
        }

        var props = getFiberCurrentPropsFromNode(stateNode);

        if (props === null) {
          return null;
        }

        var listener = props[registrationName];

        if (!(!listener || typeof listener === "function")) {
          throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }

        return listener;
      }

      function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
      }

      function accumulateDirectionalDispatches(inst, phase, event) {
        {
          if (!inst) {
            error("Dispatching inst must not be null");
          }
        }
        var listener = listenerAtPhase(inst, event, phase);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }

      function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener(inst, registrationName);

          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }

      function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches(event._targetInst, null, event);
        }
      }

      function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
      }

      function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          var targetInst = event._targetInst;
          var parentInst = targetInst ? getParent(targetInst) : null;
          traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateTwoPhaseDispatchesSkipTarget(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
      }

      function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
      }

      function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === TOP_SELECTION_CHANGE ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);
        var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
        var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
        shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

        if (skipOverBubbleShouldSetFrom) {
          accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
        } else {
          accumulateTwoPhaseDispatches(shouldSetEvent);
        }

        var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);

        if (!shouldSetEvent.isPersistent()) {
          shouldSetEvent.constructor.release(shouldSetEvent);
        }

        if (!wantsResponderInst || wantsResponderInst === responderInst) {
          return null;
        }

        var extracted;
        var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
        grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
        accumulateDirectDispatches(grantEvent);
        var blockHostResponder = executeDirectDispatch(grantEvent) === true;

        if (responderInst) {
          var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
          terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(terminationRequestEvent);
          var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);

          if (!terminationRequestEvent.isPersistent()) {
            terminationRequestEvent.constructor.release(terminationRequestEvent);
          }

          if (shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(terminateEvent);
            extracted = accumulate(extracted, [grantEvent, terminateEvent]);
            changeResponder(wantsResponderInst, blockHostResponder);
          } else {
            var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(rejectEvent);
            extracted = accumulate(extracted, rejectEvent);
          }
        } else {
          extracted = accumulate(extracted, grantEvent);
          changeResponder(wantsResponderInst, blockHostResponder);
        }

        return extracted;
      }

      function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
        return topLevelInst && (topLevelType === TOP_SCROLL && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === TOP_SELECTION_CHANGE || isStartish(topLevelType) || isMoveish(topLevelType));
      }

      function noResponderTouches(nativeEvent) {
        var touches = nativeEvent.touches;

        if (!touches || touches.length === 0) {
          return true;
        }

        for (var i = 0; i < touches.length; i++) {
          var activeTouch = touches[i];
          var target = activeTouch.target;

          if (target !== null && target !== undefined && target !== 0) {
            var targetInst = getInstanceFromNode(target);

            if (isAncestor(responderInst, targetInst)) {
              return false;
            }
          }
        }

        return true;
      }

      var ResponderEventPlugin = {
        _getResponder: function _getResponder() {
          return responderInst;
        },
        eventTypes: eventTypes,
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          if (isStartish(topLevelType)) {
            trackedTouchCount += 1;
          } else if (isEndish(topLevelType)) {
            if (trackedTouchCount >= 0) {
              trackedTouchCount -= 1;
            } else {
              {
                warn("Ended a touch event which was not counted in `trackedTouchCount`.");
              }
              return null;
            }
          }

          ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
          var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;
          var isResponderTouchStart = responderInst && isStartish(topLevelType);
          var isResponderTouchMove = responderInst && isMoveish(topLevelType);
          var isResponderTouchEnd = responderInst && isEndish(topLevelType);
          var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

          if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(gesture);
            extracted = accumulate(extracted, gesture);
          }

          var isResponderTerminate = responderInst && topLevelType === TOP_TOUCH_CANCEL;
          var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
          var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;

          if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(finalEvent);
            extracted = accumulate(extracted, finalEvent);
            changeResponder(null);
          }

          return extracted;
        },
        GlobalResponderHandler: null,
        injection: {
          injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
          }
        }
      };
      var eventPluginOrder = null;
      var namesToPlugins = {};

      function recomputePluginOrdering() {
        if (!eventPluginOrder) {
          return;
        }

        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName];
          var pluginIndex = eventPluginOrder.indexOf(pluginName);

          if (!(pluginIndex > -1)) {
            throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
          }

          if (plugins[pluginIndex]) {
            continue;
          }

          if (!pluginModule.extractEvents) {
            throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
          }

          plugins[pluginIndex] = pluginModule;
          var publishedEvents = pluginModule.eventTypes;

          for (var eventName in publishedEvents) {
            if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
              throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
            }
          }
        }
      }

      function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
          throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
        }

        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

        if (phasedRegistrationNames) {
          for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
              var phasedRegistrationName = phasedRegistrationNames[phaseName];
              publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
          }

          return true;
        } else if (dispatchConfig.registrationName) {
          publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
          return true;
        }

        return false;
      }

      function publishRegistrationName(registrationName, pluginModule, eventName) {
        if (!!registrationNameModules[registrationName]) {
          throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
        }

        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
        }
      }

      var plugins = [];
      var eventNameDispatchConfigs = {};
      var registrationNameModules = {};
      var registrationNameDependencies = {};

      function injectEventPluginOrder(injectedEventPluginOrder) {
        if (!!eventPluginOrder) {
          throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
        }

        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
      }

      function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;

        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }

          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            if (!!namesToPlugins[pluginName]) {
              throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
            }

            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }

        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      }

      function getListener$1(inst, registrationName) {
        var stateNode = inst.stateNode;

        if (stateNode === null) {
          return null;
        }

        var props = getFiberCurrentPropsFromNode(stateNode);

        if (props === null) {
          return null;
        }

        var listener = props[registrationName];

        if (!(!listener || typeof listener === "function")) {
          throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }

        return listener;
      }

      var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
          customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;

      function listenerAtPhase$1(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener$1(inst, registrationName);
      }

      function accumulateDirectionalDispatches$1(inst, phase, event) {
        {
          if (!inst) {
            error("Dispatching inst must not be null");
          }
        }
        var listener = listenerAtPhase$1(inst, event, phase);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }

      function getParent$1(inst) {
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);

        if (inst) {
          return inst;
        }

        return null;
      }

      function traverseTwoPhase$1(inst, fn, arg) {
        var path = [];

        while (inst) {
          path.push(inst);
          inst = getParent$1(inst);
        }

        var i;

        for (i = path.length; i-- > 0;) {
          fn(path[i], "captured", arg);
        }

        for (i = 0; i < path.length; i++) {
          fn(path[i], "bubbled", arg);
        }
      }

      function accumulateTwoPhaseDispatchesSingle$1(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event);
        }
      }

      function accumulateTwoPhaseDispatches$1(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle$1);
      }

      function accumulateDispatches$1(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener$1(inst, registrationName);

          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }

      function accumulateDirectDispatchesSingle$1(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches$1(event._targetInst, null, event);
        }
      }

      function accumulateDirectDispatches$1(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle$1);
      }

      var ReactNativeBridgeEventPlugin = {
        eventTypes: {},
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (targetInst == null) {
            return null;
          }

          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
          var directDispatchConfig = customDirectEventTypes[topLevelType];

          if (!(bubbleDispatchConfig || directDispatchConfig)) {
            throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
          }

          var event = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);

          if (bubbleDispatchConfig) {
            accumulateTwoPhaseDispatches$1(event);
          } else if (directDispatchConfig) {
            accumulateDirectDispatches$1(event);
          } else {
            return null;
          }

          return event;
        }
      };
      var ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"];
      injectEventPluginOrder(ReactNativeEventPluginOrder);
      injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
      });
      var instanceCache = new Map();
      var instanceProps = new Map();

      function precacheFiberNode(hostInst, tag) {
        instanceCache.set(tag, hostInst);
      }

      function uncacheFiberNode(tag) {
        instanceCache.delete(tag);
        instanceProps.delete(tag);
      }

      function getInstanceFromTag(tag) {
        return instanceCache.get(tag) || null;
      }

      function getTagFromInstance(inst) {
        var nativeInstance = inst.stateNode;
        var tag = nativeInstance._nativeTag;

        if (tag === undefined) {
          nativeInstance = nativeInstance.canonical;
          tag = nativeInstance._nativeTag;
        }

        if (!tag) {
          throw Error("All native instances should have a tag.");
        }

        return nativeInstance;
      }

      function getFiberCurrentPropsFromNode$1(stateNode) {
        return instanceProps.get(stateNode._nativeTag) || null;
      }

      function updateFiberProps(tag, props) {
        instanceProps.set(tag, props);
      }

      var batchedUpdatesImpl = function batchedUpdatesImpl(fn, bookkeeping) {
        return fn(bookkeeping);
      };

      var isInsideEventHandler = false;

      function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) {
          return fn(bookkeeping);
        }

        isInsideEventHandler = true;

        try {
          return batchedUpdatesImpl(fn, bookkeeping);
        } finally {
          isInsideEventHandler = false;
        }
      }

      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
      }

      var eventQueue = null;

      var executeDispatchesAndRelease = function executeDispatchesAndRelease(event) {
        if (event) {
          executeDispatchesInOrder(event);

          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };

      var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
        return executeDispatchesAndRelease(e);
      };

      function runEventsInBatch(events) {
        if (events !== null) {
          eventQueue = accumulateInto(eventQueue, events);
        }

        var processingEventQueue = eventQueue;
        eventQueue = null;

        if (!processingEventQueue) {
          return;
        }

        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

        if (!!eventQueue) {
          throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        }

        rethrowCaughtError();
      }

      var EMPTY_NATIVE_EVENT = {};

      var touchSubsequence = function touchSubsequence(touches, indices) {
        var ret = [];

        for (var i = 0; i < indices.length; i++) {
          ret.push(touches[indices[i]]);
        }

        return ret;
      };

      var removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
        var rippedOut = [];
        var temp = touches;

        for (var i = 0; i < indices.length; i++) {
          var index = indices[i];
          rippedOut.push(touches[index]);
          temp[index] = null;
        }

        var fillAt = 0;

        for (var j = 0; j < temp.length; j++) {
          var cur = temp[j];

          if (cur !== null) {
            temp[fillAt++] = cur;
          }
        }

        temp.length = fillAt;
        return rippedOut;
      };

      function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
        var inst = getInstanceFromTag(rootNodeID);
        var target = null;

        if (inst != null) {
          target = inst.stateNode;
        }

        batchedUpdates(function () {
          runExtractedPluginEventsInBatch(topLevelType, inst, nativeEvent, target);
        });
      }

      function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = null;
        var legacyPlugins = plugins;

        for (var i = 0; i < legacyPlugins.length; i++) {
          var possiblePlugin = legacyPlugins[i];

          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

            if (extractedEvents) {
              events = accumulateInto(events, extractedEvents);
            }
          }
        }

        return events;
      }

      function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        runEventsInBatch(events);
      }

      function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
        _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
      }

      function receiveTouches(eventTopLevelType, touches, changedIndices) {
        var changedTouches = eventTopLevelType === "topTouchEnd" || eventTopLevelType === "topTouchCancel" ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices);

        for (var jj = 0; jj < changedTouches.length; jj++) {
          var touch = changedTouches[jj];
          touch.changedTouches = changedTouches;
          touch.touches = touches;
          var nativeEvent = touch;
          var rootNodeID = null;
          var target = nativeEvent.target;

          if (target !== null && target !== undefined) {
            if (target < 1) {
              {
                error("A view is reporting that a touch occurred on tag zero.");
              }
            } else {
              rootNodeID = target;
            }
          }

          _receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
      }

      var ReactNativeGlobalResponderHandler = {
        onChange: function onChange(from, to, blockNativeResponder) {
          if (to !== null) {
            var tag = to.stateNode._nativeTag;
            ReactNativePrivateInterface.UIManager.setJSResponder(tag, blockNativeResponder);
          } else {
            ReactNativePrivateInterface.UIManager.clearJSResponder();
          }
        }
      };
      ReactNativePrivateInterface.RCTEventEmitter.register({
        receiveEvent: receiveEvent,
        receiveTouches: receiveTouches
      });
      setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromTag, getTagFromInstance);
      ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler);

      function get(key) {
        return key._reactInternals;
      }

      function set(key, value) {
        key._reactInternals = value;
      }

      var REACT_ELEMENT_TYPE = 0xeac7;
      var REACT_PORTAL_TYPE = 0xeaca;
      var REACT_FRAGMENT_TYPE = 0xeacb;
      var REACT_STRICT_MODE_TYPE = 0xeacc;
      var REACT_PROFILER_TYPE = 0xead2;
      var REACT_PROVIDER_TYPE = 0xeacd;
      var REACT_CONTEXT_TYPE = 0xeace;
      var REACT_FORWARD_REF_TYPE = 0xead0;
      var REACT_SUSPENSE_TYPE = 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = 0xead8;
      var REACT_MEMO_TYPE = 0xead3;
      var REACT_LAZY_TYPE = 0xead4;
      var REACT_BLOCK_TYPE = 0xead9;
      var REACT_SERVER_BLOCK_TYPE = 0xeada;
      var REACT_FUNDAMENTAL_TYPE = 0xead5;
      var REACT_SCOPE_TYPE = 0xead7;
      var REACT_OPAQUE_ID_TYPE = 0xeae0;
      var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
      var REACT_OFFSCREEN_TYPE = 0xeae2;
      var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
        REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
        REACT_PROFILER_TYPE = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        REACT_SCOPE_TYPE = symbolFor("react.scope");
        REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
      }

      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }

        return null;
      }

      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }

      function getContextName(type) {
        return type.displayName || "Context";
      }

      function getComponentName(type) {
        if (type == null) {
          return null;
        }

        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentName(). " + "This is likely a bug in React. Please file an issue.");
          }
        }

        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }

        if (typeof type === "string") {
          return type;
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";

          case REACT_PORTAL_TYPE:
            return "Portal";

          case REACT_PROFILER_TYPE:
            return "Profiler";

          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";

          case REACT_SUSPENSE_TYPE:
            return "Suspense";

          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }

        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";

            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";

            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");

            case REACT_MEMO_TYPE:
              return getComponentName(type.type);

            case REACT_BLOCK_TYPE:
              return getComponentName(type._render);

            case REACT_LAZY_TYPE:
              {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;

                try {
                  return getComponentName(init(payload));
                } catch (x) {
                  return null;
                }
              }
          }
        }

        return null;
      }

      var enableProfilerTimer = true;
      var enableFundamentalAPI = false;
      var warnAboutStringRefs = false;
      var enableNewReconciler = false;
      var NoFlags = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var DidCapture = 64;
      var Ref = 128;
      var Snapshot = 256;
      var Passive = 512;
      var Hydrating = 1024;
      var HydratingAndUpdate = 1028;
      var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot;
      var HostEffectMask = 4095;
      var Incomplete = 4096;
      var ShouldCapture = 8192;
      var PassiveUnmountPendingDev = 16384;
      var ForceUpdateForLegacySuspense = 32768;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;

        if (!fiber.alternate) {
          var nextNode = node;

          do {
            node = nextNode;

            if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
              nearestMounted = node.return;
            }

            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }

        if (node.tag === HostRoot) {
          return nearestMounted;
        }

        return null;
      }

      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }

      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;

            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
            }

            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);

        if (!fiber) {
          return false;
        }

        return getNearestMountedFiber(fiber) === fiber;
      }

      function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) {
          throw Error("Unable to find node on an unmounted component.");
        }
      }

      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;

        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);

          if (!(nearestMounted !== null)) {
            throw Error("Unable to find node on an unmounted component.");
          }

          if (nearestMounted !== fiber) {
            return null;
          }

          return fiber;
        }

        var a = fiber;
        var b = alternate;

        while (true) {
          var parentA = a.return;

          if (parentA === null) {
            break;
          }

          var parentB = parentA.alternate;

          if (parentB === null) {
            var nextParent = parentA.return;

            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }

            break;
          }

          if (parentA.child === parentB.child) {
            var child = parentA.child;

            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }

              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }

              child = child.sibling;
            }

            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }

          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }

              _child = _child.sibling;
            }

            if (!didFindChild) {
              _child = parentB.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }

                _child = _child.sibling;
              }

              if (!didFindChild) {
                throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }

          if (!(a.alternate === b)) {
            throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        if (!(a.tag === HostRoot)) {
          throw Error("Unable to find node on an unmounted component.");
        }

        if (a.stateNode.current === a) {
          return fiber;
        }

        return alternate;
      }

      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }

        return null;
      }

      function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;

        while (node !== null) {
          if (node === parentFiber || node === parentFiberAlternate) {
            return true;
          }

          node = node.return;
        }

        return false;
      }

      var emptyObject = {};
      var removedKeys = null;
      var removedKeyCount = 0;
      var deepDifferOptions = {
        unsafelyIgnoreFunctions: true
      };

      function defaultDiffer(prevProp, nextProp) {
        if (typeof nextProp !== "object" || nextProp === null) {
          return true;
        } else {
          return ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
        }
      }

      function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
        if (Array.isArray(node)) {
          var i = node.length;

          while (i-- && removedKeyCount > 0) {
            restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
          }
        } else if (node && removedKeyCount > 0) {
          var obj = node;

          for (var propKey in removedKeys) {
            if (!removedKeys[propKey]) {
              continue;
            }

            var nextProp = obj[propKey];

            if (nextProp === undefined) {
              continue;
            }

            var attributeConfig = validAttributes[propKey];

            if (!attributeConfig) {
              continue;
            }

            if (typeof nextProp === "function") {
              nextProp = true;
            }

            if (typeof nextProp === "undefined") {
              nextProp = null;
            }

            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            removedKeys[propKey] = false;
            removedKeyCount--;
          }
        }
      }

      function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
        var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
        var i;

        for (i = 0; i < minLength; i++) {
          updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
        }

        for (; i < prevArray.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
        }

        for (; i < nextArray.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
        }

        return updatePayload;
      }

      function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
        if (!updatePayload && prevProp === nextProp) {
          return updatePayload;
        }

        if (!prevProp || !nextProp) {
          if (nextProp) {
            return addNestedProperty(updatePayload, nextProp, validAttributes);
          }

          if (prevProp) {
            return clearNestedProperty(updatePayload, prevProp, validAttributes);
          }

          return updatePayload;
        }

        if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
          return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
          return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp)) {
          return diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes);
        }

        return diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
      }

      function addNestedProperty(updatePayload, nextProp, validAttributes) {
        if (!nextProp) {
          return updatePayload;
        }

        if (!Array.isArray(nextProp)) {
          return addProperties(updatePayload, nextProp, validAttributes);
        }

        for (var i = 0; i < nextProp.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        }

        return updatePayload;
      }

      function clearNestedProperty(updatePayload, prevProp, validAttributes) {
        if (!prevProp) {
          return updatePayload;
        }

        if (!Array.isArray(prevProp)) {
          return clearProperties(updatePayload, prevProp, validAttributes);
        }

        for (var i = 0; i < prevProp.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        }

        return updatePayload;
      }

      function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
        var attributeConfig;
        var nextProp;
        var prevProp;

        for (var propKey in nextProps) {
          attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          prevProp = prevProps[propKey];
          nextProp = nextProps[propKey];

          if (typeof nextProp === "function") {
            nextProp = true;

            if (typeof prevProp === "function") {
              prevProp = true;
            }
          }

          if (typeof nextProp === "undefined") {
            nextProp = null;

            if (typeof prevProp === "undefined") {
              prevProp = null;
            }
          }

          if (removedKeys) {
            removedKeys[propKey] = false;
          }

          if (updatePayload && updatePayload[propKey] !== undefined) {
            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            continue;
          }

          if (prevProp === nextProp) {
            continue;
          }

          if (typeof attributeConfig !== "object") {
            if (defaultDiffer(prevProp, nextProp)) {
              (updatePayload || (updatePayload = {}))[propKey] = nextProp;
            }
          } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === "function" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));

            if (shouldUpdate) {
              var _nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;

              (updatePayload || (updatePayload = {}))[propKey] = _nextValue;
            }
          } else {
            removedKeys = null;
            removedKeyCount = 0;
            updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);

            if (removedKeyCount > 0 && updatePayload) {
              restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
              removedKeys = null;
            }
          }
        }

        for (var _propKey in prevProps) {
          if (nextProps[_propKey] !== undefined) {
            continue;
          }

          attributeConfig = validAttributes[_propKey];

          if (!attributeConfig) {
            continue;
          }

          if (updatePayload && updatePayload[_propKey] !== undefined) {
            continue;
          }

          prevProp = prevProps[_propKey];

          if (prevProp === undefined) {
            continue;
          }

          if (typeof attributeConfig !== "object" || typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            (updatePayload || (updatePayload = {}))[_propKey] = null;

            if (!removedKeys) {
              removedKeys = {};
            }

            if (!removedKeys[_propKey]) {
              removedKeys[_propKey] = true;
              removedKeyCount++;
            }
          } else {
            updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
          }
        }

        return updatePayload;
      }

      function addProperties(updatePayload, props, validAttributes) {
        return diffProperties(updatePayload, emptyObject, props, validAttributes);
      }

      function clearProperties(updatePayload, prevProps, validAttributes) {
        return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
      }

      function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
      }

      function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
      }

      function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
        return function () {
          if (!callback) {
            return undefined;
          }

          if (typeof context.__isMounted === "boolean") {
            if (!context.__isMounted) {
              return undefined;
            }
          }

          return callback.apply(context, arguments);
        };
      }

      function warnForStyleProps(props, validAttributes) {
        {
          for (var key in validAttributes.style) {
            if (!(validAttributes[key] || props[key] === undefined)) {
              error("You are setting the style `{ %s" + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { %s" + ": ... } }`", key, key);
            }
          }
        }
      }

      var ReactNativeFiberHostComponent = function () {
        function ReactNativeFiberHostComponent(tag, viewConfig, internalInstanceHandleDEV) {
          this._nativeTag = tag;
          this._children = [];
          this.viewConfig = viewConfig;
          {
            this._internalFiberInstanceHandleDEV = internalInstanceHandleDEV;
          }
        }

        var _proto = ReactNativeFiberHostComponent.prototype;

        _proto.blur = function blur() {
          ReactNativePrivateInterface.TextInputState.blurTextInput(this);
        };

        _proto.focus = function focus() {
          ReactNativePrivateInterface.TextInputState.focusTextInput(this);
        };

        _proto.measure = function measure(callback) {
          ReactNativePrivateInterface.UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        _proto.measureInWindow = function measureInWindow(callback) {
          ReactNativePrivateInterface.UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        _proto.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          var relativeNode;

          if (typeof relativeToNativeNode === "number") {
            relativeNode = relativeToNativeNode;
          } else {
            var nativeNode = relativeToNativeNode;

            if (nativeNode._nativeTag) {
              relativeNode = nativeNode._nativeTag;
            }
          }

          if (relativeNode == null) {
            {
              error("Warning: ref.measureLayout must be called with a node handle or a ref to a native component.");
            }
            return;
          }

          ReactNativePrivateInterface.UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
        };

        _proto.setNativeProps = function setNativeProps(nativeProps) {
          {
            warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, this.viewConfig.validAttributes);

          if (updatePayload != null) {
            ReactNativePrivateInterface.UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeFiberHostComponent;
      }();

      function shim() {
        {
          throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      var isSuspenseInstancePending = shim;
      var isSuspenseInstanceFallback = shim;
      var hydrateTextInstance = shim;
      var getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get;
      var UPDATE_SIGNAL = {};
      {
        Object.freeze(UPDATE_SIGNAL);
      }
      var nextReactTag = 3;

      function allocateTag() {
        var tag = nextReactTag;

        if (tag % 10 === 1) {
          tag += 2;
        }

        nextReactTag = tag + 2;
        return tag;
      }

      function recursivelyUncacheFiberNode(node) {
        if (typeof node === "number") {
          uncacheFiberNode(node);
        } else {
          uncacheFiberNode(node._nativeTag);

          node._children.forEach(recursivelyUncacheFiberNode);
        }
      }

      function appendInitialChild(parentInstance, child) {
        parentInstance._children.push(child);
      }

      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = allocateTag();
        var viewConfig = getViewConfigForType(type);
        {
          for (var key in viewConfig.validAttributes) {
            if (props.hasOwnProperty(key)) {
              ReactNativePrivateInterface.deepFreezeAndThrowOnMutationInDev(props[key]);
            }
          }
        }
        var updatePayload = create(props, viewConfig.validAttributes);
        ReactNativePrivateInterface.UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
        var component = new ReactNativeFiberHostComponent(tag, viewConfig, internalInstanceHandle);
        precacheFiberNode(internalInstanceHandle, tag);
        updateFiberProps(tag, props);
        return component;
      }

      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        if (!hostContext.isInAParentText) {
          throw Error("Text strings must be rendered within a <Text> component.");
        }

        var tag = allocateTag();
        ReactNativePrivateInterface.UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
          text: text
        });
        precacheFiberNode(internalInstanceHandle, tag);
        return tag;
      }

      function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance, hostContext) {
        if (parentInstance._children.length === 0) {
          return false;
        }

        var nativeTags = parentInstance._children.map(function (child) {
          return typeof child === "number" ? child : child._nativeTag;
        });

        ReactNativePrivateInterface.UIManager.setChildren(parentInstance._nativeTag, nativeTags);
        return false;
      }

      function getRootHostContext(rootContainerInstance) {
        return {
          isInAParentText: false
        };
      }

      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var prevIsInAParentText = parentHostContext.isInAParentText;
        var isInAParentText = type === "AndroidTextInput" || type === "RCTMultilineTextInputView" || type === "RCTSinglelineTextInputView" || type === "RCTText" || type === "RCTVirtualText";

        if (prevIsInAParentText !== isInAParentText) {
          return {
            isInAParentText: isInAParentText
          };
        } else {
          return parentHostContext;
        }
      }

      function getPublicInstance(instance) {
        return instance;
      }

      function prepareForCommit(containerInfo) {
        return null;
      }

      function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
        return UPDATE_SIGNAL;
      }

      function resetAfterCommit(containerInfo) {}

      var scheduleTimeout = setTimeout;
      var cancelTimeout = clearTimeout;
      var noTimeout = -1;

      function shouldSetTextContent(type, props) {
        return false;
      }

      function appendChild(parentInstance, child) {
        var childTag = typeof child === "number" ? child : child._nativeTag;
        var children = parentInstance._children;
        var index = children.indexOf(child);

        if (index >= 0) {
          children.splice(index, 1);
          children.push(child);
          ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], []);
        } else {
          children.push(child);
          ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []);
        }
      }

      function appendChildToContainer(parentInstance, child) {
        var childTag = typeof child === "number" ? child : child._nativeTag;
        ReactNativePrivateInterface.UIManager.setChildren(parentInstance, [childTag]);
      }

      function commitTextUpdate(textInstance, oldText, newText) {
        ReactNativePrivateInterface.UIManager.updateView(textInstance, "RCTRawText", {
          text: newText
        });
      }

      function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
        var viewConfig = instance.viewConfig;
        updateFiberProps(instance._nativeTag, newProps);
        var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);

        if (updatePayload != null) {
          ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
        }
      }

      function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children;
        var index = children.indexOf(child);

        if (index >= 0) {
          children.splice(index, 1);
          var beforeChildIndex = children.indexOf(beforeChild);
          children.splice(beforeChildIndex, 0, child);
          ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
        } else {
          var _beforeChildIndex = children.indexOf(beforeChild);

          children.splice(_beforeChildIndex, 0, child);
          var childTag = typeof child === "number" ? child : child._nativeTag;
          ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
        }
      }

      function insertInContainerBefore(parentInstance, child, beforeChild) {
        if (!(typeof parentInstance !== "number")) {
          throw Error("Container does not support insertBefore operation");
        }
      }

      function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children;
        var index = children.indexOf(child);
        children.splice(index, 1);
        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
      }

      function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
      }

      function resetTextContent(instance) {}

      function hideInstance(instance) {
        var viewConfig = instance.viewConfig;
        var updatePayload = create({
          style: {
            display: "none"
          }
        }, viewConfig.validAttributes);
        ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
      }

      function hideTextInstance(textInstance) {
        throw new Error("Not yet implemented.");
      }

      function unhideInstance(instance, props) {
        var viewConfig = instance.viewConfig;
        var updatePayload = diff(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, props, {
          style: [props.style, {
            display: "none"
          }]
        }), props, viewConfig.validAttributes);
        ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
      }

      function clearContainer(container) {}

      function unhideTextInstance(textInstance, text) {
        throw new Error("Not yet implemented.");
      }

      function makeClientIdInDEV(warnOnAccessInDEV) {
        throw new Error("Not yet implemented");
      }

      function preparePortalMount(portalInstance) {}

      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;

      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          var ownerName = null;

          if (ownerFn) {
            ownerName = ownerFn.displayName || ownerFn.name || null;
          }

          return describeComponentFrame(name, source, ownerName);
        }
      }

      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

      function describeComponentFrame(name, source, ownerName) {
        var sourceInfo = "";

        if (source) {
          var path = source.fileName;
          var fileName = path.replace(BEFORE_SLASH_RE, "");

          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                fileName = folderName + "/" + fileName;
              }
            }
          }

          sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
        } else if (ownerName) {
          sourceInfo = " (created by " + ownerName + ")";
        }

        return "\n    in " + (name || "Unknown") + sourceInfo;
      }

      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeFunctionComponentFrame(ctor, source, ownerFn);
        }
      }

      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          if (!fn) {
            return "";
          }

          var name = fn.displayName || fn.name || null;
          var ownerName = null;

          if (ownerFn) {
            ownerName = ownerFn.displayName || ownerFn.name || null;
          }

          return describeComponentFrame(name, source, ownerName);
        }
      }

      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }

        if (typeof type === "function") {
          {
            return describeFunctionComponentFrame(type, source, ownerFn);
          }
        }

        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type, source, ownerFn);
        }

        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense", source, ownerFn);

          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList", source, ownerFn);
        }

        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render, source, ownerFn);

            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render, source, ownerFn);

            case REACT_LAZY_TYPE:
              {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;

                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
              }
          }
        }

        return "";
      }

      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }

      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(Object.prototype.hasOwnProperty);

          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;

              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }

                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }

              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }

              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }

      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;

      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }

      function pop(cursor, fiber) {
        if (index < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }

        {
          if (fiber !== fiberStack[index]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }

      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }

      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;

      function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            return previousContext;
          }

          return contextStackCursor.current;
        }
      }

      function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }

      function getMaskedContext(workInProgress, unmaskedContext) {
        {
          var type = workInProgress.type;
          var contextTypes = type.contextTypes;

          if (!contextTypes) {
            return emptyContextObject;
          }

          var instance = workInProgress.stateNode;

          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }

          var context = {};

          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }

          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }

          if (instance) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return context;
        }
      }

      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }

      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== undefined;
        }
      }

      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }

      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }

      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (!(contextStackCursor.current === emptyContextObject)) {
            throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }

          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }

      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;

          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentName(type) || "Unknown";

              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }

          var childContext = instance.getChildContext();

          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            }
          }

          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, parentContext, childContext);
        }
      }

      function pushContextProvider(workInProgress) {
        {
          var instance = workInProgress.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
          return true;
        }
      }

      function invalidateContextProvider(workInProgress, type, didChange) {
        {
          var instance = workInProgress.stateNode;

          if (!instance) {
            throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }

          if (didChange) {
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          }
        }
      }

      function findCurrentUnmaskedContext(fiber) {
        {
          if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
            throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }

          var node = fiber;

          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;

              case ClassComponent:
                {
                  var Component = node.type;

                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }

                  break;
                }
            }

            node = node.return;
          } while (node !== null);

          {
            throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      var LegacyRoot = 0;
      var BlockingRoot = 1;
      var ConcurrentRoot = 2;
      var rendererID = null;
      var injectedHook = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";

      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }

        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

        if (hook.isDisabled) {
          return true;
        }

        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://reactjs.org/link/react-devtools");
          }
          return true;
        }

        try {
          rendererID = hook.inject(internals);
          injectedHook = hook;
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }

        return true;
      }

      function onScheduleRoot(root, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }

      function onCommitRoot(root, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root.current.flags & DidCapture) === DidCapture;

            if (enableProfilerTimer) {
              injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
            } else {
              injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }

      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }

      var Scheduler_now = Scheduler.unstable_now;
      {
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
        }
      }
      var ImmediatePriority = 99;
      var UserBlockingPriority = 98;
      var NormalPriority = 97;
      var LowPriority = 96;
      var IdlePriority = 95;
      var NoPriority = 90;
      var initialTimeMs = Scheduler_now();
      var SyncLanePriority = 15;
      var SyncBatchedLanePriority = 14;
      var InputDiscreteHydrationLanePriority = 13;
      var InputDiscreteLanePriority = 12;
      var InputContinuousHydrationLanePriority = 11;
      var InputContinuousLanePriority = 10;
      var DefaultHydrationLanePriority = 9;
      var DefaultLanePriority = 8;
      var TransitionHydrationPriority = 7;
      var TransitionPriority = 6;
      var RetryLanePriority = 5;
      var SelectiveHydrationLanePriority = 4;
      var IdleHydrationLanePriority = 3;
      var IdleLanePriority = 2;
      var OffscreenLanePriority = 1;
      var NoLanePriority = 0;
      var TotalLanes = 31;
      var NoLanes = 0;
      var NoLane = 0;
      var SyncLane = 1;
      var SyncBatchedLane = 2;
      var InputDiscreteHydrationLane = 4;
      var InputDiscreteLanes = 24;
      var InputContinuousHydrationLane = 32;
      var InputContinuousLanes = 192;
      var DefaultHydrationLane = 256;
      var DefaultLanes = 3584;
      var TransitionHydrationLane = 4096;
      var TransitionLanes = 4186112;
      var RetryLanes = 62914560;
      var SomeRetryLane = 33554432;
      var SelectiveHydrationLane = 67108864;
      var NonIdleLanes = 134217727;
      var IdleHydrationLane = 134217728;
      var IdleLanes = 805306368;
      var OffscreenLane = 1073741824;
      var NoTimestamp = -1;
      var return_highestLanePriority = DefaultLanePriority;

      function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
          return_highestLanePriority = SyncLanePriority;
          return SyncLane;
        }

        if ((SyncBatchedLane & lanes) !== NoLanes) {
          return_highestLanePriority = SyncBatchedLanePriority;
          return SyncBatchedLane;
        }

        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
          return_highestLanePriority = InputDiscreteHydrationLanePriority;
          return InputDiscreteHydrationLane;
        }

        var inputDiscreteLanes = InputDiscreteLanes & lanes;

        if (inputDiscreteLanes !== NoLanes) {
          return_highestLanePriority = InputDiscreteLanePriority;
          return inputDiscreteLanes;
        }

        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
          return_highestLanePriority = InputContinuousHydrationLanePriority;
          return InputContinuousHydrationLane;
        }

        var inputContinuousLanes = InputContinuousLanes & lanes;

        if (inputContinuousLanes !== NoLanes) {
          return_highestLanePriority = InputContinuousLanePriority;
          return inputContinuousLanes;
        }

        if ((lanes & DefaultHydrationLane) !== NoLanes) {
          return_highestLanePriority = DefaultHydrationLanePriority;
          return DefaultHydrationLane;
        }

        var defaultLanes = DefaultLanes & lanes;

        if (defaultLanes !== NoLanes) {
          return_highestLanePriority = DefaultLanePriority;
          return defaultLanes;
        }

        if ((lanes & TransitionHydrationLane) !== NoLanes) {
          return_highestLanePriority = TransitionHydrationPriority;
          return TransitionHydrationLane;
        }

        var transitionLanes = TransitionLanes & lanes;

        if (transitionLanes !== NoLanes) {
          return_highestLanePriority = TransitionPriority;
          return transitionLanes;
        }

        var retryLanes = RetryLanes & lanes;

        if (retryLanes !== NoLanes) {
          return_highestLanePriority = RetryLanePriority;
          return retryLanes;
        }

        if (lanes & SelectiveHydrationLane) {
          return_highestLanePriority = SelectiveHydrationLanePriority;
          return SelectiveHydrationLane;
        }

        if ((lanes & IdleHydrationLane) !== NoLanes) {
          return_highestLanePriority = IdleHydrationLanePriority;
          return IdleHydrationLane;
        }

        var idleLanes = IdleLanes & lanes;

        if (idleLanes !== NoLanes) {
          return_highestLanePriority = IdleLanePriority;
          return idleLanes;
        }

        if ((OffscreenLane & lanes) !== NoLanes) {
          return_highestLanePriority = OffscreenLanePriority;
          return OffscreenLane;
        }

        {
          error("Should have found matching lanes. This is a bug in React.");
        }
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
      }

      function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch (schedulerPriorityLevel) {
          case ImmediatePriority:
            return SyncLanePriority;

          case UserBlockingPriority:
            return InputContinuousLanePriority;

          case NormalPriority:
          case LowPriority:
            return DefaultLanePriority;

          case IdlePriority:
            return IdleLanePriority;

          default:
            return NoLanePriority;
        }
      }

      function lanePriorityToSchedulerPriority(lanePriority) {
        switch (lanePriority) {
          case SyncLanePriority:
          case SyncBatchedLanePriority:
            return ImmediatePriority;

          case InputDiscreteHydrationLanePriority:
          case InputDiscreteLanePriority:
          case InputContinuousHydrationLanePriority:
          case InputContinuousLanePriority:
            return UserBlockingPriority;

          case DefaultHydrationLanePriority:
          case DefaultLanePriority:
          case TransitionHydrationPriority:
          case TransitionPriority:
          case SelectiveHydrationLanePriority:
          case RetryLanePriority:
            return NormalPriority;

          case IdleHydrationLanePriority:
          case IdleLanePriority:
          case OffscreenLanePriority:
            return IdlePriority;

          case NoLanePriority:
            return NoPriority;

          default:
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
        }
      }

      function getNextLanes(root, wipLanes) {
        var pendingLanes = root.pendingLanes;

        if (pendingLanes === NoLanes) {
          return_highestLanePriority = NoLanePriority;
          return NoLanes;
        }

        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root.expiredLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;

        if (expiredLanes !== NoLanes) {
          nextLanes = expiredLanes;
          nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              nextLanePriority = return_highestLanePriority;
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                nextLanePriority = return_highestLanePriority;
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;

            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
              nextLanePriority = return_highestLanePriority;
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
                nextLanePriority = return_highestLanePriority;
              }
            }
          }
        }

        if (nextLanes === NoLanes) {
          return NoLanes;
        }

        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);

        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
          getHighestPriorityLanes(wipLanes);
          var wipLanePriority = return_highestLanePriority;

          if (nextLanePriority <= wipLanePriority) {
            return wipLanes;
          } else {
            return_highestLanePriority = nextLanePriority;
          }
        }

        var entangledLanes = root.entangledLanes;

        if (entangledLanes !== NoLanes) {
          var entanglements = root.entanglements;
          var lanes = nextLanes & entangledLanes;

          while (lanes > 0) {
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            nextLanes |= entanglements[index];
            lanes &= ~lane;
          }
        }

        return nextLanes;
      }

      function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          var eventTime = eventTimes[index];

          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime;
          }

          lanes &= ~lane;
        }

        return mostRecentEventTime;
      }

      function computeExpirationTime(lane, currentTime) {
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;

        if (priority >= InputContinuousLanePriority) {
          return currentTime + 250;
        } else if (priority >= TransitionPriority) {
          return currentTime + 5000;
        } else {
          return NoTimestamp;
        }
      }

      function markStarvedLanesAsExpired(root, currentTime) {
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes;
        var lanes = pendingLanes;

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          var expirationTime = expirationTimes[index];

          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root.expiredLanes |= lane;
          }

          lanes &= ~lane;
        }
      }

      function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }

        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }

        return NoLanes;
      }

      function returnNextLanesPriority() {
        return return_highestLanePriority;
      }

      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }

      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }

      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }

      function findUpdateLane(lanePriority, wipLanes) {
        switch (lanePriority) {
          case NoLanePriority:
            break;

          case SyncLanePriority:
            return SyncLane;

          case SyncBatchedLanePriority:
            return SyncBatchedLane;

          case InputDiscreteLanePriority:
            {
              var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);

              if (_lane === NoLane) {
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
              }

              return _lane;
            }

          case InputContinuousLanePriority:
            {
              var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);

              if (_lane2 === NoLane) {
                return findUpdateLane(DefaultLanePriority, wipLanes);
              }

              return _lane2;
            }

          case DefaultLanePriority:
            {
              var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);

              if (_lane3 === NoLane) {
                _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);

                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(DefaultLanes);
                }
              }

              return _lane3;
            }

          case TransitionPriority:
          case RetryLanePriority:
            break;

          case IdleLanePriority:
            var lane = pickArbitraryLane(IdleLanes & ~wipLanes);

            if (lane === NoLane) {
              lane = pickArbitraryLane(IdleLanes);
            }

            return lane;
        }

        {
          throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
      }

      function findTransitionLane(wipLanes, pendingLanes) {
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);

        if (lane === NoLane) {
          lane = pickArbitraryLane(TransitionLanes & ~wipLanes);

          if (lane === NoLane) {
            lane = pickArbitraryLane(TransitionLanes);
          }
        }

        return lane;
      }

      function findRetryLane(wipLanes) {
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);

        if (lane === NoLane) {
          lane = pickArbitraryLane(RetryLanes);
        }

        return lane;
      }

      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }

      function getLowestPriorityLane(lanes) {
        var index = 31 - clz32(lanes);
        return index < 0 ? NoLanes : 1 << index;
      }

      function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
      }

      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }

      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }

      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }

      function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
      }

      function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset;
      }

      function mergeLanes(a, b) {
        return a | b;
      }

      function removeLanes(set, subset) {
        return set & ~subset;
      }

      function laneToLanes(lane) {
        return lane;
      }

      function createLaneMap(initial) {
        var laneMap = [];

        for (var i = 0; i < TotalLanes; i++) {
          laneMap.push(initial);
        }

        return laneMap;
      }

      function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane;
        var higherPriorityLanes = updateLane - 1;
        root.suspendedLanes &= higherPriorityLanes;
        root.pingedLanes &= higherPriorityLanes;
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane);
        eventTimes[index] = eventTime;
      }

      function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          expirationTimes[index] = NoTimestamp;
          lanes &= ~lane;
        }
      }

      function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
      }

      function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
      }

      function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes;
      }

      function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes;
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes;
        var lanes = noLongerPendingLanes;

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          entanglements[index] = NoLanes;
          eventTimes[index] = NoTimestamp;
          expirationTimes[index] = NoTimestamp;
          lanes &= ~lane;
        }
      }

      function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = entangledLanes;

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          entanglements[index] |= entangledLanes;
          lanes &= ~lane;
        }
      }

      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log = Math.log;
      var LN2 = Math.LN2;

      function clz32Fallback(lanes) {
        if (lanes === 0) {
          return 32;
        }

        return 31 - (log(lanes) / LN2 | 0) | 0;
      }

      var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
          Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
          Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
          Scheduler_shouldYield = Scheduler.unstable_shouldYield,
          Scheduler_requestPaint = Scheduler.unstable_requestPaint,
          Scheduler_now$1 = Scheduler.unstable_now,
          Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
          Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
          Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
          Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
          Scheduler_LowPriority = Scheduler.unstable_LowPriority,
          Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
      {
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
        }
      }
      var fakeCallbackNode = {};
      var ImmediatePriority$1 = 99;
      var UserBlockingPriority$1 = 98;
      var NormalPriority$1 = 97;
      var LowPriority$1 = 96;
      var IdlePriority$1 = 95;
      var NoPriority$1 = 90;
      var shouldYield = Scheduler_shouldYield;
      var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
      var syncQueue = null;
      var immediateQueueCallbackNode = null;
      var isFlushingSyncQueue = false;
      var initialTimeMs$1 = Scheduler_now$1();
      var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
        return Scheduler_now$1() - initialTimeMs$1;
      };

      function getCurrentPriorityLevel() {
        switch (Scheduler_getCurrentPriorityLevel()) {
          case Scheduler_ImmediatePriority:
            return ImmediatePriority$1;

          case Scheduler_UserBlockingPriority:
            return UserBlockingPriority$1;

          case Scheduler_NormalPriority:
            return NormalPriority$1;

          case Scheduler_LowPriority:
            return LowPriority$1;

          case Scheduler_IdlePriority:
            return IdlePriority$1;

          default:
            {
              throw Error("Unknown priority level.");
            }
        }
      }

      function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch (reactPriorityLevel) {
          case ImmediatePriority$1:
            return Scheduler_ImmediatePriority;

          case UserBlockingPriority$1:
            return Scheduler_UserBlockingPriority;

          case NormalPriority$1:
            return Scheduler_NormalPriority;

          case LowPriority$1:
            return Scheduler_LowPriority;

          case IdlePriority$1:
            return Scheduler_IdlePriority;

          default:
            {
              throw Error("Unknown priority level.");
            }
        }
      }

      function runWithPriority(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
      }

      function scheduleCallback(reactPriorityLevel, callback, options) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options);
      }

      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
          immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else {
          syncQueue.push(callback);
        }

        return fakeCallbackNode;
      }

      function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) {
          Scheduler_cancelCallback(callbackNode);
        }
      }

      function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
          var node = immediateQueueCallbackNode;
          immediateQueueCallbackNode = null;
          Scheduler_cancelCallback(node);
        }

        flushSyncCallbackQueueImpl();
      }

      function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i = 0;
          {
            try {
              var _isSync2 = true;
              var _queue = syncQueue;
              runWithPriority(ImmediatePriority$1, function () {
                for (; i < _queue.length; i++) {
                  var callback = _queue[i];

                  do {
                    callback = callback(_isSync2);
                  } while (callback !== null);
                }
              });
              syncQueue = null;
            } catch (error) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }

              Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
              throw error;
            } finally {
              isFlushingSyncQueue = false;
            }
          }
        }
      }

      var ReactVersion = "17.0.1-4e5d7faf5";
      var NoMode = 0;
      var StrictMode = 1;
      var BlockingMode = 2;
      var ConcurrentMode = 4;
      var ProfileMode = 8;
      var DebugTracingMode = 16;
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = 0;

      function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
      }

      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }

      var objectIs = typeof Object.is === "function" ? Object.is : is;
      var hasOwnProperty = Object.prototype.hasOwnProperty;

      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }

        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }

        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);

        if (keysA.length !== keysB.length) {
          return false;
        }

        for (var i = 0; i < keysA.length; i++) {
          if (!hasOwnProperty.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
            return false;
          }
        }

        return true;
      }

      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;

        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type, source, owner);

          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy", source, owner);

          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense", source, owner);

          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList", source, owner);

          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type, source, owner);

          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render, source, owner);

          case Block:
            return describeFunctionComponentFrame(fiber.type._render, source, owner);

          case ClassComponent:
            return describeClassComponentFrame(fiber.type, source, owner);

          default:
            return "";
        }
      }

      function getStackByFiberInDevAndProd(workInProgress) {
        try {
          var info = "";
          var node = workInProgress;

          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);

          return info;
        } catch (x) {
          return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
      }

      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;

      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }

          var owner = current._debugOwner;

          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner.type);
          }
        }
        return null;
      }

      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }

          return getStackByFiberInDevAndProd(current);
        }
      }

      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame$1.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }

      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }

      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }

      function getIsRendering() {
        {
          return isRendering;
        }
      }

      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {},
        recordLegacyContextWarning: function recordLegacyContextWarning(fiber, instance) {},
        flushLegacyContextWarning: function flushLegacyContextWarning() {},
        discardPendingWarnings: function discardPendingWarnings() {}
      };
      {
        var findStrictRoot = function findStrictRoot(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;

          while (node !== null) {
            if (node.mode & StrictMode) {
              maybeStrictRoot = node;
            }

            node = node.return;
          }

          return maybeStrictRoot;
        };

        var setToSortedString = function setToSortedString(set) {
          var array = [];
          set.forEach(function (value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };

        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set();

        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }

          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }

          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }

          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };

        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
          var componentWillMountUniqueNames = new Set();

          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function (fiber) {
              componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }

          var UNSAFE_componentWillMountUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }

          var componentWillReceivePropsUniqueNames = new Set();

          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }

          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }

          var componentWillUpdateUniqueNames = new Set();

          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function (fiber) {
              componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }

          var UNSAFE_componentWillUpdateUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }

          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "\nPlease update the following components: %s", sortedNames);
          }

          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, " + "refactor your code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n" + "\nPlease update the following components: %s", _sortedNames);
          }

          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "\nPlease update the following components: %s", _sortedNames2);
          }

          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

            warn("componentWillMount has been renamed, and is not recommended for use. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "* Rename componentWillMount to UNSAFE_componentWillMount to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames3);
          }

          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

            warn("componentWillReceiveProps has been renamed, and is not recommended for use. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, refactor your " + "code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n" + "* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames4);
          }

          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

            warn("componentWillUpdate has been renamed, and is not recommended for use. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames5);
          }
        };

        var pendingLegacyContextWarning = new Map();
        var didWarnAboutLegacyContext = new Set();

        ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
          var strictRoot = findStrictRoot(fiber);

          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. " + "This error is likely caused by a bug in React. Please file an issue.");
            return;
          }

          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }

          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }

            warningsForRoot.push(fiber);
          }
        };

        ReactStrictModeWarnings.flushLegacyContextWarning = function () {
          pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }

            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function (fiber) {
              uniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);

            try {
              setCurrentFiber(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree." + "\n\nThe old API will be supported in all 16.x releases, but applications " + "using it should migrate to the new version." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };

        ReactStrictModeWarnings.discardPendingWarnings = function () {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map();
        };
      }

      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, baseProps);

          var defaultProps = Component.defaultProps;

          for (var propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }

          return props;
        }

        return baseProps;
      }

      var MAX_SIGNED_31_BIT_INT = 1073741823;
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastContextWithAllBitsObserved = null;
      var isDisallowedContextReadInDEV = false;

      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }

      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }

      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }

      function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.");
            }

            context._currentRenderer = rendererSigil;
          }
        }
      }

      function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        {
          context._currentValue = currentValue;
        }
      }

      function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) {
          return 0;
        } else {
          var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          {
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
              error("calculateChangedBits: Expected the return value to be a " + "31-bit integer. Instead received: %s", changedBits);
            }
          }
          return changedBits | 0;
        }
      }

      function scheduleWorkOnParentPath(parent, renderLanes) {
        var node = parent;

        while (node !== null) {
          var alternate = node.alternate;

          if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
            node.childLanes = mergeLanes(node.childLanes, renderLanes);

            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
          } else {
            break;
          }

          node = node.return;
        }
      }

      function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
        var fiber = workInProgress.child;

        if (fiber !== null) {
          fiber.return = workInProgress;
        }

        while (fiber !== null) {
          var nextFiber = void 0;
          var list = fiber.dependencies;

          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;

            while (dependency !== null) {
              if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                if (fiber.tag === ClassComponent) {
                  var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                  update.tag = ForceUpdate;
                  enqueueUpdate(fiber, update);
                }

                fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                var alternate = fiber.alternate;

                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                }

                scheduleWorkOnParentPath(fiber.return, renderLanes);
                list.lanes = mergeLanes(list.lanes, renderLanes);
                break;
              }

              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
          } else {
            nextFiber = fiber.child;
          }

          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;

            while (nextFiber !== null) {
              if (nextFiber === workInProgress) {
                nextFiber = null;
                break;
              }

              var sibling = nextFiber.sibling;

              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }

              nextFiber = nextFiber.return;
            }
          }

          fiber = nextFiber;
        }
      }

      function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;

        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;

          if (firstContext !== null) {
            if (includesSomeLane(dependencies.lanes, renderLanes)) {
              markWorkInProgressReceivedUpdate();
            }

            dependencies.firstContext = null;
          }
        }
      }

      function _readContext(context, observedBits) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
          }
        }
        if (lastContextWithAllBitsObserved === context) ;else if (observedBits === false || observedBits === 0) ;else {
          var resolvedObservedBits;

          if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
            lastContextWithAllBitsObserved = context;
            resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
          } else {
            resolvedObservedBits = observedBits;
          }

          var contextItem = {
            context: context,
            observedBits: resolvedObservedBits,
            next: null
          };

          if (lastContextDependency === null) {
            if (!(currentlyRenderingFiber !== null)) {
              throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }

            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem,
              responders: null
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return context._currentValue;
      }

      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }

      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }

      function cloneUpdateQueue(current, workInProgress) {
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;

        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress.updateQueue = clone;
        }
      }

      function createUpdate(eventTime, lane) {
        var update = {
          eventTime: eventTime,
          lane: lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }

      function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;

        if (updateQueue === null) {
          return;
        }

        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;

        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }

        sharedQueue.pending = update;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
      }

      function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        var queue = workInProgress.updateQueue;
        var current = workInProgress.alternate;

        if (current !== null) {
          var currentQueue = current.updateQueue;

          if (queue === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue.firstBaseUpdate;

            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;

              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };

                if (newLast === null) {
                  newFirst = newLast = clone;
                } else {
                  newLast.next = clone;
                  newLast = clone;
                }

                update = update.next;
              } while (update !== null);

              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }

            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress.updateQueue = queue;
            return;
          }
        }

        var lastBaseUpdate = queue.lastBaseUpdate;

        if (lastBaseUpdate === null) {
          queue.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }

        queue.lastBaseUpdate = capturedUpdate;
      }

      function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState:
            {
              var payload = update.payload;

              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }

              return payload;
            }

          case CaptureUpdate:
            {
              workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            }

          case UpdateState:
            {
              var _payload = update.payload;
              var partialState;

              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }

              if (partialState === null || partialState === undefined) {
                return prevState;
              }

              return _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, prevState, partialState);
            }

          case ForceUpdate:
            {
              hasForceUpdate = true;
              return prevState;
            }
        }

        return prevState;
      }

      function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate;
        var pendingQueue = queue.shared.pending;

        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;

          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }

          lastBaseUpdate = lastPendingUpdate;
          var current = workInProgress.alternate;

          if (current !== null) {
            var currentQueue = current.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }

              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }

        if (firstBaseUpdate !== null) {
          var newState = queue.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update = firstBaseUpdate;

          do {
            var updateLane = update.lane;
            var updateEventTime = update.eventTime;

            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };

              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone;
              }

              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }

              newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
              var callback = update.callback;

              if (callback !== null) {
                workInProgress.flags |= Callback;
                var effects = queue.effects;

                if (effects === null) {
                  queue.effects = [update];
                } else {
                  effects.push(update);
                }
              }
            }

            update = update.next;

            if (update === null) {
              pendingQueue = queue.shared.pending;

              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update = _firstPendingUpdate;
                queue.lastBaseUpdate = _lastPendingUpdate;
                queue.shared.pending = null;
              }
            }
          } while (true);

          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }

          queue.baseState = newBaseState;
          queue.firstBaseUpdate = newFirstBaseUpdate;
          queue.lastBaseUpdate = newLastBaseUpdate;
          markSkippedUpdateLanes(newLanes);
          workInProgress.lanes = newLanes;
          workInProgress.memoizedState = newState;
        }

        {
          currentlyProcessingQueue = null;
        }
      }

      function callCallback(callback, context) {
        if (!(typeof callback === "function")) {
          throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        }

        callback.call(context);
      }

      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }

      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }

      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;

        if (effects !== null) {
          for (var i = 0; i < effects.length; i++) {
            var effect = effects[i];
            var callback = effect.callback;

            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }

      var fakeInternalInstance = {};
      var isArray = Array.isArray;
      var emptyRefsObject = new React.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set();
        didWarnAboutUninitializedState = new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
        didWarnAboutDirectlyAssigningPropsToState = new Set();
        didWarnAboutUndefinedDerivedState = new Set();
        didWarnAboutContextTypeAndContextTypes = new Set();
        didWarnAboutInvalidateContextType = new Set();
        var didWarnOnInvalidCallback = new Set();

        warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }

          var key = callerName + "_" + callback;

          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
          }
        };

        warnOnUndefinedDerivedState = function warnOnUndefinedDerivedState(type, partialState) {
          if (partialState === undefined) {
            var componentName = getComponentName(type) || "Component";

            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " + "You have returned undefined.", componentName);
            }
          }
        };

        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function value() {
            {
              throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          }
        });
        Object.freeze(fakeInternalInstance);
      }

      function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === undefined ? prevState : _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState;

        if (workInProgress.lanes === NoLanes) {
          var updateQueue = workInProgress.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }

      var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function enqueueSetState(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.payload = payload;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ReplaceState;
          update.payload = payload;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
      };

      function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;

        if (typeof instance.shouldComponentUpdate === "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (shouldUpdate === undefined) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }

        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }

        return true;
      }

      function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        {
          var name = getComponentName(ctor) || "Component";
          var renderPresent = instance.render;

          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
            }
          }

          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
          }

          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
          }

          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
          }

          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static " + "property to define contextType instead.", name);
          }

          {
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
            }

            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. " + "The legacy contextTypes property will be ignored.", name);
            }
          }

          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name);
          }

          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
          }

          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
          }

          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }

          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }

          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called " + "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }

          var hasMutatedProps = instance.props !== newProps;

          if (instance.props !== undefined && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
          }

          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). " + "This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
          }

          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }

          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }

          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method " + "and will be ignored. Instead, declare it as an instance method.", name);
          }

          var _state = instance.state;

          if (_state && (typeof _state !== "object" || isArray(_state))) {
            error("%s.state: must be set to an object or null", name);
          }

          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", name);
          }
        }
      }

      function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance;
        set(instance, workInProgress);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }

      function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;

            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";

              if (contextType === undefined) {
                addendum = " However, it is set to undefined. " + "This can be caused by a typo or by mixing up named and default imports. " + "This can also happen due to a circular dependency, so " + "try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== undefined) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }

              error("%s defines an invalid contextType. " + "contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
            }
          }
        }

        if (typeof contextType === "object" && contextType !== null) {
          context = _readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }

        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentName(ctor) || "Component";

            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is " + "%s. This is not recommended. Instead, define the initial state by " + "assigning an object to `this.state` in the constructor of `%s`. " + "This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }

          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;

            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }

            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }

            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }

            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentName(ctor) || "Component";

              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";

              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + "%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n" + "The above lifecycles should be removed. Learn more about this warning here:\n" + "https://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }

        if (isLegacyContextConsumer) {
          cacheContext(workInProgress, unmaskedContext, context);
        }

        return instance;
      }

      function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;

        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }

        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }

        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName(workInProgress.type) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }

      function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;

        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }

        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }

        if (instance.state !== oldState) {
          {
            var componentName = getComponentName(workInProgress.type) || "Component";

            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }

      function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        {
          checkClassInstance(workInProgress, ctor, newProps);
        }
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;

        if (typeof contextType === "object" && contextType !== null) {
          instance.context = _readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }

        {
          if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || "Component";

            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state " + "because updates to props won't be reflected in state. " + "In most cases, it is better to use props directly.", componentName);
            }
          }

          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
          }

          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
          }
        }
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress.memoizedState;
        }

        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress, instance);
          processUpdateQueue(workInProgress, newProps, instance, renderLanes);
          instance.state = workInProgress.memoizedState;
        }

        if (typeof instance.componentDidMount === "function") {
          workInProgress.flags |= Update;
        }
      }

      function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;

        if (typeof contextType === "object" && contextType !== null) {
          nextContext = _readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }

        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
          }
        }

        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;

        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            workInProgress.flags |= Update;
          }

          return false;
        }

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress.memoizedState;
        }

        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }

            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
          }

          if (typeof instance.componentDidMount === "function") {
            workInProgress.flags |= Update;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            workInProgress.flags |= Update;
          }

          workInProgress.memoizedProps = newProps;
          workInProgress.memoizedState = newState;
        }

        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }

      function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;

        if (typeof contextType === "object" && contextType !== null) {
          nextContext = _readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }

        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
          }
        }

        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;

        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.flags |= Update;
            }
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.flags |= Snapshot;
            }
          }

          return false;
        }

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress.memoizedState;
        }

        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }

            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }

          if (typeof instance.componentDidUpdate === "function") {
            workInProgress.flags |= Update;
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress.flags |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.flags |= Update;
            }
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.flags |= Snapshot;
            }
          }

          workInProgress.memoizedProps = newProps;
          workInProgress.memoizedState = newState;
        }

        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }

      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;

      var warnForMissingKey = function warnForMissingKey(child, returnFiber) {};

      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};

        warnForMissingKey = function warnForMissingKey(child, returnFiber) {
          if (child === null || typeof child !== "object") {
            return;
          }

          if (!child._store || child._store.validated || child.key != null) {
            return;
          }

          if (!(typeof child._store === "object")) {
            throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }

          child._store.validated = true;
          var componentName = getComponentName(returnFiber.type) || "Component";

          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }

          ownerHasKeyUseWarning[componentName] = true;
          error("Each child in a list should have a unique " + '"key" prop. See https://reactjs.org/link/warning-keys for ' + "more information.");
        };
      }
      var isArray$1 = Array.isArray;

      function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;

        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentName(returnFiber.type) || "Component";

              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('A string ref, "%s", has been found within a strict mode tree. ' + "String refs are a source of potential bugs and should be avoided. " + "We recommend using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }

          if (element._owner) {
            var owner = element._owner;
            var inst;

            if (owner) {
              var ownerFiber = owner;

              if (!(ownerFiber.tag === ClassComponent)) {
                throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              }

              inst = ownerFiber.stateNode;
            }

            if (!inst) {
              throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }

            var stringRef = "" + mixedRef;

            if (current !== null && current.ref !== null && typeof current.ref === "function" && current.ref._stringRef === stringRef) {
              return current.ref;
            }

            var ref = function ref(value) {
              var refs = inst.refs;

              if (refs === emptyRefsObject) {
                refs = inst.refs = {};
              }

              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };

            ref._stringRef = stringRef;
            return ref;
          } else {
            if (!(typeof mixedRef === "string")) {
              throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }

            if (!element._owner) {
              throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
          }
        }

        return mixedRef;
      }

      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          {
            throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
      }

      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentName(returnFiber.type) || "Component";

          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }

          ownerHasFunctionTypeWarning[componentName] = true;
          error("Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.");
        }
      }

      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }

          childToDelete.nextEffect = null;
          childToDelete.flags = Deletion;
        }

        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }

          var childToDelete = currentFirstChild;

          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }

          return null;
        }

        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;

          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }

            existingChild = existingChild.sibling;
          }

          return existingChildren;
        }

        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }

        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;

          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }

          var current = newFiber.alternate;

          if (current !== null) {
            var oldIndex = current.index;

            if (oldIndex < lastPlacedIndex) {
              newFiber.flags = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags = Placement;
            return lastPlacedIndex;
          }
        }

        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags = Placement;
          }

          return newFiber;
        }

        function updateTextNode(returnFiber, current, textContent, lanes) {
          if (current === null || current.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }

        function updateElement(returnFiber, current, element, lanes) {
          if (current !== null) {
            if (current.elementType === element.type || isCompatibleFamilyForHotReloading(current, element)) {
              var existing = useFiber(current, element.props);
              existing.ref = coerceRef(returnFiber, current, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }

          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current, element);
          created.return = returnFiber;
          return created;
        }

        function updatePortal(returnFiber, current, portal, lanes) {
          if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }

        function updateFragment(returnFiber, current, fragment, lanes, key) {
          if (current === null || current.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }

        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }

              case REACT_PORTAL_TYPE:
                {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

                  _created2.return = returnFiber;
                  return _created2;
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

              _created3.return = returnFiber;
              return _created3;
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }

        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;

          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }

            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                    }

                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }

              case REACT_PORTAL_TYPE:
                {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }

              return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }

        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                  }

                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }

              case REACT_PORTAL_TYPE:
                {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;

              return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }

        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }

            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;

                if (typeof key !== "string") {
                  break;
                }

                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }

                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }

                error("Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.", key);
                break;
            }
          }
          return knownKeys;
        }

        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;

            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;

          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

              if (_newFiber === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }

              previousNewFiber = _newFiber;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }

              previousNewFiber = _newFiber2;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);

          if (!(typeof iteratorFn === "function")) {
            throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }

          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield " + "unexpected results because enumerating a generator mutates it. " + "You may convert it to an array with `Array.from()` or the " + "`[...spread]` operator before rendering. Keep in mind " + "you might need to polyfill these features for older browsers.");
              }

              didWarnAboutGenerators = true;
            }

            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. " + "Use an array of keyed ReactElements instead.");
              }

              didWarnAboutMaps = true;
            }

            var _newChildren = iteratorFn.call(newChildrenIterable);

            if (_newChildren) {
              var knownKeys = null;

              var _step = _newChildren.next();

              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);

          if (!(newChildren != null)) {
            throw Error("An iterable object provided no iterator.");
          }

          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();

          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);

              if (_newFiber3 === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }

              previousNewFiber = _newFiber3;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }

              previousNewFiber = _newFiber4;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }

          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }

        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key = element.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              switch (child.tag) {
                case Fragment:
                  {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }

                    break;
                  }

                case Block:
                default:
                  {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);

                      var _existing3 = useFiber(child, element.props);

                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }

                    break;
                  }
              }

              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }

        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key = portal.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }

        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }

          var isObject = typeof newChild === "object" && newChild !== null;

          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
          }

          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }

          if (isArray$1(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
          }

          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
          }

          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }

          if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
            switch (returnFiber.tag) {
              case ClassComponent:
                {
                  {
                    var instance = returnFiber.stateNode;

                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }

              case Block:
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                {
                  {
                    throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                  }
                }
            }
          }

          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }

        return reconcileChildFibers;
      }

      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);

      function cloneChildFibers(current, workInProgress) {
        if (!(current === null || workInProgress.child === current.child)) {
          throw Error("Resuming work not yet implemented.");
        }

        if (workInProgress.child === null) {
          return;
        }

        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;

        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress;
        }

        newChild.sibling = null;
      }

      function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;

        while (child !== null) {
          resetWorkInProgress(child, lanes);
          child = child.sibling;
        }
      }

      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);

      function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) {
          throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }

        return c;
      }

      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }

      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext();
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }

      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }

      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }

      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);

        if (context === nextContext) {
          return;
        }

        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }

      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }

        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }

      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);

      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }

      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }

      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }

      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }

      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }

      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }

      function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        var nextState = workInProgress.memoizedState;

        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }

          return false;
        }

        var props = workInProgress.memoizedProps;

        if (props.fallback === undefined) {
          return false;
        }

        if (props.unstable_avoidThisFallback !== true) {
          return true;
        }

        if (hasInvisibleParent) {
          return false;
        }

        return true;
      }

      function findFirstSuspended(row) {
        var node = row;

        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;

            if (state !== null) {
              var dehydrated = state.dehydrated;

              if (dehydrated === null || isSuspenseInstancePending() || isSuspenseInstanceFallback()) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;

            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === row) {
            return null;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }

        return null;
      }

      var NoFlags$1 = 0;
      var HasEffect = 1;
      var Layout = 2;
      var Passive$1 = 4;
      var isHydrating = false;

      function enterHydrationState(fiber) {
        {
          return false;
        }
      }

      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        {
          {
            throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      function prepareToHydrateHostTextInstance(fiber) {
        {
          {
            throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var shouldUpdate = hydrateTextInstance();
      }

      function popHydrationState(fiber) {
        {
          return false;
        }
      }

      function getIsHydrating() {
        return isHydrating;
      }

      var workInProgressSources = [];
      var rendererSigil$1;
      {
        rendererSigil$1 = {};
      }

      function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
      }

      function resetWorkInProgressVersions() {
        for (var i = 0; i < workInProgressSources.length; i++) {
          var mutableSource = workInProgressSources[i];
          {
            mutableSource._workInProgressVersionPrimary = null;
          }
        }

        workInProgressSources.length = 0;
      }

      function getWorkInProgressVersion(mutableSource) {
        {
          return mutableSource._workInProgressVersionPrimary;
        }
      }

      function setWorkInProgressVersion(mutableSource, version) {
        {
          mutableSource._workInProgressVersionPrimary = version;
        }
        workInProgressSources.push(mutableSource);
      }

      function warnAboutMultipleRenderersDEV(mutableSource) {
        {
          {
            if (mutableSource._currentPrimaryRenderer == null) {
              mutableSource._currentPrimaryRenderer = rendererSigil$1;
            } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
              error("Detected multiple renderers concurrently rendering the " + "same mutable source. This is currently unsupported.");
            }
          }
        }
      }

      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
          ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnAboutUseOpaqueIdentifier;
      {
        didWarnAboutUseOpaqueIdentifier = {};
        didWarnAboutMismatchedHooksForComponent = new Set();
      }
      var renderLanes = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;

      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;

          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }

      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;

          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;

            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }

      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When " + "specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }

      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentName(currentlyRenderingFiber$1.type);

          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);

            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;

              for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i];
                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i + 1 + ". " + oldHookName;

                while (row.length < secondColumnStart) {
                  row += " ";
                }

                row += newHookName + "\n";
                table += row;
              }

              error("React has detected a change in the order of Hooks called by %s. " + "This will lead to bugs and errors if not fixed. " + "For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n" + "   Previous render            Next render\n" + "   ------------------------------------------------------\n" + "%s" + "   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
          }
        }
      }

      function throwInvalidHookError() {
        {
          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
      }

      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }

        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during " + "the previous render. Even though the final argument is optional, " + "its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }

        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The " + "order and size of this array must remain constant.\n\n" + "Previous: %s\n" + "Incoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }

        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
          if (objectIs(nextDeps[i], prevDeps[i])) {
            continue;
          }

          return false;
        }

        return true;
      }

      function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        {
          hookTypesDev = current !== null ? current._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        }
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes;
        {
          if (current !== null && current.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component(props, secondArg);

        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;

          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false;

            if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
              throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }

            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }

        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
        }
        didScheduleRenderPhaseUpdate = false;

        if (!!didRenderTooFewHooks) {
          throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }

        return children;
      }

      function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.flags &= ~(Passive | Update);
        current.lanes = removeLanes(current.lanes, lanes);
      }

      function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;

          while (hook !== null) {
            var queue = hook.queue;

            if (queue !== null) {
              queue.pending = null;
            }

            hook = hook.next;
          }

          didScheduleRenderPhaseUpdate = false;
        }

        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          isUpdatingOpaqueValueInRenderPhase = false;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
      }

      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };

        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }

        return workInProgressHook;
      }

      function updateWorkInProgressHook() {
        var nextCurrentHook;

        if (currentHook === null) {
          var current = currentlyRenderingFiber$1.alternate;

          if (current !== null) {
            nextCurrentHook = current.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }

        var nextWorkInProgressHook;

        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }

        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (!(nextCurrentHook !== null)) {
            throw Error("Rendered more hooks than during the previous render.");
          }

          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };

          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }

        return workInProgressHook;
      }

      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null
        };
      }

      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }

      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;

        if (init !== undefined) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }

        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }

      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;

        if (!(queue !== null)) {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }

        queue.lastRenderedReducer = reducer;
        var current = currentHook;
        var baseQueue = current.baseQueue;
        var pendingQueue = queue.pending;

        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }

          {
            if (current.baseQueue !== baseQueue) {
              error("Internal error: Expected work-in-progress queue to be a clone. " + "This is a bug in React.");
            }
          }
          current.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }

        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = current.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first;

          do {
            var updateLane = update.lane;

            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone = {
                lane: updateLane,
                action: update.action,
                eagerReducer: update.eagerReducer,
                eagerState: update.eagerState,
                next: null
              };

              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }

              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  lane: NoLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }

              if (update.eagerReducer === reducer) {
                newState = update.eagerState;
              } else {
                var action = update.action;
                newState = reducer(newState, action);
              }
            }

            update = update.next;
          } while (update !== null && update !== first);

          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }

          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }

          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }

        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }

      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;

        if (!(queue !== null)) {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }

        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;

        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;

          do {
            var action = update.action;
            newState = reducer(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);

          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }

          hook.memoizedState = newState;

          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }

          queue.lastRenderedState = newState;
        }

        return [newState, dispatch];
      }

      function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
        {
          warnAboutMultipleRenderersDEV(source);
        }
        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var isSafeToReadFromSource = false;
        var currentRenderVersion = getWorkInProgressVersion(source);

        if (currentRenderVersion !== null) {
          isSafeToReadFromSource = currentRenderVersion === version;
        } else {
          isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);

          if (isSafeToReadFromSource) {
            setWorkInProgressVersion(source, version);
          }
        }

        if (isSafeToReadFromSource) {
          var snapshot = getSnapshot(source._source);
          {
            if (typeof snapshot === "function") {
              error("Mutable source should not return a function as the snapshot value. " + "Functions may close over mutable values and cause tearing.");
            }
          }
          return snapshot;
        } else {
          markSourceAsDirty(source);
          {
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
          }
        }
      }

      function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root = getWorkInProgressRoot();

        if (!(root !== null)) {
          throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }

        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current;

        var _dispatcher$useState = dispatcher.useState(function () {
          return readFromUnsubcribedMutableSource(root, source, getSnapshot);
        }),
            currentSnapshot = _dispatcher$useState[0],
            setSnapshot = _dispatcher$useState[1];

        var snapshot = currentSnapshot;
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
          refs: refs,
          source: source,
          subscribe: subscribe
        };
        dispatcher.useEffect(function () {
          refs.getSnapshot = getSnapshot;
          refs.setSnapshot = setSnapshot;
          var maybeNewVersion = getVersion(source._source);

          if (!objectIs(version, maybeNewVersion)) {
            var maybeNewSnapshot = getSnapshot(source._source);
            {
              if (typeof maybeNewSnapshot === "function") {
                error("Mutable source should not return a function as the snapshot value. " + "Functions may close over mutable values and cause tearing.");
              }
            }

            if (!objectIs(snapshot, maybeNewSnapshot)) {
              setSnapshot(maybeNewSnapshot);
              var lane = requestUpdateLane(fiber);
              markRootMutableRead(root, lane);
            }

            markRootEntangled(root, root.mutableReadLanes);
          }
        }, [getSnapshot, source, subscribe]);
        dispatcher.useEffect(function () {
          var handleChange = function handleChange() {
            var latestGetSnapshot = refs.getSnapshot;
            var latestSetSnapshot = refs.setSnapshot;

            try {
              latestSetSnapshot(latestGetSnapshot(source._source));
              var lane = requestUpdateLane(fiber);
              markRootMutableRead(root, lane);
            } catch (error) {
              latestSetSnapshot(function () {
                throw error;
              });
            }
          };

          var unsubscribe = subscribe(source._source, handleChange);
          {
            if (typeof unsubscribe !== "function") {
              error("Mutable source subscribe function must return an unsubscribe function.");
            }
          }
          return unsubscribe;
        }, [source, subscribe]);

        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
          var newQueue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: snapshot
          };
          newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
          stateHook.queue = newQueue;
          stateHook.baseQueue = null;
          snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
          stateHook.memoizedState = stateHook.baseState = snapshot;
        }

        return snapshot;
      }

      function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
          refs: {
            getSnapshot: getSnapshot,
            setSnapshot: null
          },
          source: source,
          subscribe: subscribe
        };
        return useMutableSource(hook, source, getSnapshot, subscribe);
      }

      function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source, getSnapshot, subscribe);
      }

      function mountState(initialState) {
        var hook = mountWorkInProgressHook();

        if (typeof initialState === "function") {
          initialState = initialState();
        }

        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }

      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }

      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }

      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag: tag,
          create: create,
          destroy: destroy,
          deps: deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;

          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }

        return effect;
      }

      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          hook.memoizedState = _ref2;
          return _ref2;
        }
      }

      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }

      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
      }

      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;

        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;

          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              pushEffect(hookFlags, create, destroy, nextDeps);
              return;
            }
          }
        }

        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
      }

      function mountEffect(create, deps) {
        {
          if ("undefined" !== typeof jest) {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
      }

      function updateEffect(create, deps) {
        {
          if ("undefined" !== typeof jest) {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
          }
        }
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
      }

      function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
      }

      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
      }

      function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;

          var _inst = create();

          refCallback(_inst);
          return function () {
            refCallback(null);
          };
        } else if (ref !== null && ref !== undefined) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a " + "ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }

          var _inst2 = create();

          refObject.current = _inst2;
          return function () {
            refObject.current = null;
          };
        }
      }

      function mountImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }

      function updateImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }

      function mountDebugValue(value, formatterFn) {}

      var updateDebugValue = mountDebugValue;

      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }

      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;

        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }

        hook.memoizedState = [callback, nextDeps];
        return callback;
      }

      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }

      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;

        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }

        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }

      function mountDeferredValue(value) {
        var _mountState = mountState(value),
            prevValue = _mountState[0],
            setValue = _mountState[1];

        mountEffect(function () {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }

      function updateDeferredValue(value) {
        var _updateState = updateState(),
            prevValue = _updateState[0],
            setValue = _updateState[1];

        updateEffect(function () {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }

      function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(),
            prevValue = _rerenderState[0],
            setValue = _rerenderState[1];

        updateEffect(function () {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }

      function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        {
          runWithPriority(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
            setPending(true);
          });
          runWithPriority(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;

            try {
              setPending(false);
              callback();
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          });
        }
      }

      function mountTransition() {
        var _mountState2 = mountState(false),
            isPending = _mountState2[0],
            setPending = _mountState2[1];

        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [start, isPending];
      }

      function updateTransition() {
        var _updateState2 = updateState(),
            isPending = _updateState2[0];

        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [start, isPending];
      }

      function rerenderTransition() {
        var _rerenderState2 = rerenderState(),
            isPending = _rerenderState2[0];

        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [start, isPending];
      }

      var isUpdatingOpaqueValueInRenderPhase = false;

      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase;
        }
      }

      function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        {
          var name = getComponentName(fiber.type) || "Unknown";

          if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error("The object passed back from useOpaqueIdentifier is meant to be " + "passed through to attributes only. Do not read the " + "value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
          }
        }
      }

      function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        {
          var _id = makeId();

          mountState(_id);
          return _id;
        }
      }

      function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
      }

      function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
      }

      function dispatchAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the " + "second callback argument. To execute a side effect after " + "rendering, declare it in the component body with useEffect().");
          }
        }
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
          lane: lane,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        };
        var pending = queue.pending;

        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }

        queue.pending = update;
        var alternate = fiber.alternate;

        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        } else {
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;

            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }

              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.eagerReducer = lastRenderedReducer;
                update.eagerState = eagerState;

                if (objectIs(eagerState, currentState)) {
                  return;
                }
              } catch (error) {} finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }

          {
            if ("undefined" !== typeof jest) {
              warnIfNotScopedWithMatchingAct(fiber);
              warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
          }
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
      }

      var ContextOnlyDispatcher = {
        readContext: _readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function warnInvalidContextAccess() {
          error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
        };

        var warnInvalidHookAccess = function warnInvalidHookAccess() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. " + "You can only call Hooks at the top level of your React function. " + "For more information, see " + "https://reactjs.org/link/rules-of-hooks");
        };

        HooksDispatcherOnMountInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            mountHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return updateOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var profilerStartTime = -1;

      function getCommitTime() {
        return commitTime;
      }

      function recordCommitTime() {
        commitTime = now$1();
      }

      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();

        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }

      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }

      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;

          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }

          profilerStartTime = -1;
        }
      }

      function transferActualDuration(fiber) {
        var child = fiber.child;

        while (child) {
          fiber.actualDuration += child.actualDuration;
          child = child.sibling;
        }
      }

      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }

      function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        if (current === null) {
          workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        } else {
          workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
        }
      }

      function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes);
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
      }

      function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var render = Component.render;
        var ref = workInProgress.ref;
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes);
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
          setIsRendering(false);
        }

        if (current !== null && !didReceiveUpdate) {
          bailoutHooks(current, workInProgress, renderLanes);
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }

        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
        if (current === null) {
          var type = Component.type;

          if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress.tag = SimpleMemoComponent;
            workInProgress.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress, type);
            }
            return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
          }

          {
            var innerPropTypes = type.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
            }
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
          child.ref = workInProgress.ref;
          child.return = workInProgress;
          workInProgress.child = child;
          return child;
        }

        {
          var _type = Component.type;
          var _innerPropTypes = _type.propTypes;

          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
          }
        }
        var currentChild = current.child;

        if (!includesSomeLane(updateLanes, renderLanes)) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component.compare;
          compare = compare !== null ? compare : shallowEqual;

          if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          }
        }

        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
      }

      function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerMemoType = workInProgress.elementType;

            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;

              try {
                outerMemoType = init(payload);
              } catch (x) {
                outerMemoType = null;
              }

              var outerPropTypes = outerMemoType && outerMemoType.propTypes;

              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
              }
            }
          }
        }

        if (current !== null) {
          var prevProps = current.memoizedProps;

          if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
            didReceiveUpdate = false;

            if (!includesSomeLane(renderLanes, updateLanes)) {
              workInProgress.lanes = current.lanes;
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            }
          }
        }

        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
      }

      function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current !== null ? current.memoizedState : null;

        if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
          if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes
            };
            workInProgress.memoizedState = nextState;
            pushRenderLanes(workInProgress, renderLanes);
          } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
            var nextBaseLanes;

            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
            } else {
              nextBaseLanes = renderLanes;
            }

            {
              markSpawnedWork(OffscreenLane);
            }
            workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
            var _nextState = {
              baseLanes: nextBaseLanes
            };
            workInProgress.memoizedState = _nextState;
            pushRenderLanes(workInProgress, nextBaseLanes);
            return null;
          } else {
            var _nextState2 = {
              baseLanes: NoLanes
            };
            workInProgress.memoizedState = _nextState2;
            var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
            pushRenderLanes(workInProgress, subtreeRenderLanes);
          }
        } else {
          var _subtreeRenderLanes;

          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
            workInProgress.memoizedState = null;
          } else {
            _subtreeRenderLanes = renderLanes;
          }

          pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }

        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      var updateLegacyHiddenComponent = updateOffscreenComponent;

      function updateFragment(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function updateProfiler(current, workInProgress, renderLanes) {
        {
          workInProgress.flags |= Update;
          var stateNode = workInProgress.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function markRef(current, workInProgress) {
        var ref = workInProgress.ref;

        if (current === null && ref !== null || current !== null && current.ref !== ref) {
          workInProgress.flags |= Ref;
        }
      }

      function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
          context = getMaskedContext(workInProgress, unmaskedContext);
        }
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes);
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
          setIsRendering(false);
        }

        if (current !== null && !didReceiveUpdate) {
          bailoutHooks(current, workInProgress, renderLanes);
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }

        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var hasContext;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        prepareToReadContext(workInProgress, renderLanes);
        var instance = workInProgress.stateNode;
        var shouldUpdate;

        if (instance === null) {
          if (current !== null) {
            current.alternate = null;
            workInProgress.alternate = null;
            workInProgress.flags |= Placement;
          }

          constructClassInstance(workInProgress, Component, nextProps);
          mountClassInstance(workInProgress, Component, nextProps, renderLanes);
          shouldUpdate = true;
        } else if (current === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
        } else {
          shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
        }

        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
        {
          var inst = workInProgress.stateNode;

          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. " + "This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || "a component");
            }

            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }

      function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
        markRef(current, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress, Component, false);
          }

          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }

        var instance = workInProgress.stateNode;
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;

        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            setIsRendering(true);
            nextChildren = instance.render();
            setIsRendering(false);
          }
        }

        workInProgress.flags |= PerformedWork;

        if (current !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }

        workInProgress.memoizedState = instance.state;

        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, true);
        }

        return workInProgress.child;
      }

      function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;

        if (root.pendingContext) {
          pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        } else if (root.context) {
          pushTopLevelContextObject(workInProgress, root.context, false);
        }

        pushHostContainer(workInProgress, root.containerInfo);
      }

      function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;

        if (!(current !== null && updateQueue !== null)) {
          throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        }

        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState;
        var nextChildren = nextState.element;

        if (nextChildren === prevChildren) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }

        var root = workInProgress.stateNode;

        if (root.hydrate && enterHydrationState()) {
          var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
          workInProgress.child = child;
          var node = child;

          while (node) {
            node.flags = node.flags & ~Placement | Hydrating;
            node = node.sibling;
          }
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }

        return workInProgress.child;
      }

      function updateHostComponent(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;

        if (prevProps !== null && shouldSetTextContent()) {
          workInProgress.flags |= ContentReset;
        }

        markRef(current, workInProgress);
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function updateHostText(current, workInProgress) {
        return null;
      }

      function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.flags |= Placement;
        }

        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload);
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;

        switch (resolvedTag) {
          case FunctionComponent:
            {
              {
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
              return child;
            }

          case ClassComponent:
            {
              {
                workInProgress.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
              return child;
            }

          case ForwardRef:
            {
              {
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
              return child;
            }

          case MemoComponent:
            {
              {
                if (workInProgress.type !== workInProgress.elementType) {
                  var outerPropTypes = Component.propTypes;

                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes);
              return child;
            }
        }

        var hint = "";
        {
          if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        {
          throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
        }
      }

      function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.flags |= Placement;
        }

        workInProgress.tag = ClassComponent;
        var hasContext;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        prepareToReadContext(workInProgress, renderLanes);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
      }

      function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.flags |= Placement;
        }

        var props = workInProgress.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
          context = getMaskedContext(workInProgress, unmaskedContext);
        }
        prepareToReadContext(workInProgress, renderLanes);
        var value;
        {
          if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentName(Component) || "Unknown";

            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }

          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
          }

          setIsRendering(true);
          ReactCurrentOwner$1.current = workInProgress;
          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
          setIsRendering(false);
        }
        workInProgress.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || "Unknown";

            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }

        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
          {
            var _componentName2 = getComponentName(Component) || "Unknown";

            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress.tag = ClassComponent;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          var hasContext = false;

          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
          } else {
            hasContext = false;
          }

          workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
          initializeUpdateQueue(workInProgress);
          var getDerivedStateFromProps = Component.getDerivedStateFromProps;

          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
          }

          adoptClassInstance(workInProgress, value);
          mountClassInstance(workInProgress, Component, props, renderLanes);
          return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else {
          workInProgress.tag = FunctionComponent;
          reconcileChildren(null, workInProgress, value, renderLanes);
          {
            validateFunctionComponentInDev(workInProgress, Component);
          }
          return workInProgress.child;
        }
      }

      function validateFunctionComponentInDev(workInProgress, Component) {
        {
          if (Component) {
            if (Component.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
            }
          }

          if (workInProgress.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();

            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }

            var warningKey = ownerName || workInProgress._debugID || "";
            var debugSource = workInProgress._debugSource;

            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }

            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. " + "Attempts to access this ref will fail. " + "Did you mean to use React.forwardRef()?%s", info);
            }
          }

          if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentName(Component) || "Unknown";

            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }

          if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || "Unknown";

            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }

      var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
      };

      function mountSuspenseOffscreenState(renderLanes) {
        return {
          baseLanes: renderLanes
        };
      }

      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
        };
      }

      function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
        if (current !== null) {
          var suspenseState = current.memoizedState;

          if (suspenseState === null) {
            return false;
          }
        }

        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }

      function getRemainingWorkInPrimaryTree(current, renderLanes) {
        return removeLanes(current.childLanes, renderLanes);
      }

      function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        {
          if (shouldSuspend(workInProgress)) {
            workInProgress.flags |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
          showFallback = true;
          workInProgress.flags &= ~DidCapture;
        } else {
          if (current === null || current.memoizedState !== null) {
            if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }

        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext);

        if (current === null) {
          if (nextProps.fallback !== undefined) ;
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;

          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
            var primaryChildFragment = workInProgress.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
            workInProgress.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
            var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);

            var _primaryChildFragment = workInProgress.child;
            _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
            workInProgress.memoizedState = SUSPENDED_MARKER;
            workInProgress.lanes = SomeRetryLane;
            {
              markSpawnedWork(SomeRetryLane);
            }
            return _fallbackFragment;
          } else {
            return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
          }
        } else {
          var prevState = current.memoizedState;

          if (prevState !== null) {
            if (showFallback) {
              var _nextFallbackChildren2 = nextProps.fallback;
              var _nextPrimaryChildren2 = nextProps.children;

              var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);

              var _primaryChildFragment3 = workInProgress.child;
              var prevOffscreenState = current.child.memoizedState;
              _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
              _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
              workInProgress.memoizedState = SUSPENDED_MARKER;
              return _fallbackChildFragment;
            } else {
              var _nextPrimaryChildren3 = nextProps.children;

              var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);

              workInProgress.memoizedState = null;
              return _primaryChildFragment4;
            }
          } else {
            if (showFallback) {
              var _nextFallbackChildren3 = nextProps.fallback;
              var _nextPrimaryChildren4 = nextProps.children;

              var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);

              var _primaryChildFragment5 = workInProgress.child;
              var _prevOffscreenState = current.child.memoizedState;
              _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
              _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
              workInProgress.memoizedState = SUSPENDED_MARKER;
              return _fallbackChildFragment2;
            } else {
              var _nextPrimaryChildren5 = nextProps.children;

              var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);

              workInProgress.memoizedState = null;
              return _primaryChildFragment6;
            }
          }
        }
      }

      function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
      }

      function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;

        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;

          if (workInProgress.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }

          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        } else {
          primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        }

        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
      }

      function createWorkInProgressOffscreenFiber(current, offscreenProps) {
        return createWorkInProgress(current, offscreenProps);
      }

      function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes;
        }

        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;

        if (currentFallbackChildFragment !== null) {
          currentFallbackChildFragment.nextEffect = null;
          currentFallbackChildFragment.flags = Deletion;
          workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
        }

        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
      }

      function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;

        if ((mode & BlockingMode) === NoMode && workInProgress.child !== currentPrimaryChildFragment) {
          var progressedPrimaryFragment = workInProgress.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;

          if (workInProgress.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }

          var progressedLastEffect = primaryChildFragment.lastEffect;

          if (progressedLastEffect !== null) {
            workInProgress.firstEffect = primaryChildFragment.firstEffect;
            workInProgress.lastEffect = progressedLastEffect;
            progressedLastEffect.nextEffect = null;
          } else {
            workInProgress.firstEffect = workInProgress.lastEffect = null;
          }
        } else {
          primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        }

        var fallbackChildFragment;

        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
          fallbackChildFragment.flags |= Placement;
        }

        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
      }

      function scheduleWorkOnFiber(fiber, renderLanes) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
        var alternate = fiber.alternate;

        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
        }

        scheduleWorkOnParentPath(fiber.return, renderLanes);
      }

      function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
        var node = firstChild;

        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;

            if (state !== null) {
              scheduleWorkOnFiber(node, renderLanes);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleWorkOnFiber(node, renderLanes);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;

        while (row !== null) {
          var currentRow = row.alternate;

          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }

          row = row.sibling;
        }

        return lastContentRow;
      }

      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;

            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards":
                  {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }

                case "forward":
                case "backward":
                  {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }

                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error("%s is not a supported value for revealOrder on <SuspenseList />. " + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }

      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }

      function validateSuspenseListNestedChild(childSlot, index) {
        {
          var isArray = Array.isArray(childSlot);
          var isIterable = !isArray && typeof getIteratorFn(childSlot) === "function";

          if (isArray || isIterable) {
            var type = isArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in " + "an additional SuspenseList to configure its revealOrder: " + "<SuspenseList revealOrder=...> ... " + "<SuspenseList revealOrder=...>{%s}</SuspenseList> ... " + "</SuspenseList>", type, index, type);
            return false;
          }
        }
        return true;
      }

      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);

              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);

                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;

                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }

                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + "This is not useful since it needs multiple rows. " + "Did you mean to pass multiple children or an array?", revealOrder);
              }
            }
          }
        }
      }

      function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
          renderState.lastEffect = lastEffectBeforeRendering;
        }
      }

      function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress.flags |= DidCapture;
        } else {
          var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
          }

          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }

        pushSuspenseContext(workInProgress, suspenseContext);

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          workInProgress.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards":
              {
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;

                if (lastContentRow === null) {
                  tail = workInProgress.child;
                  workInProgress.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }

                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
              }

            case "backwards":
              {
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;

                while (row !== null) {
                  var currentRow = row.alternate;

                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress.child = row;
                    break;
                  }

                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }

                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
              }

            case "together":
              {
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
              }

            default:
              {
                workInProgress.memoizedState = null;
              }
          }
        }

        return workInProgress.child;
      }

      function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;

        if (current === null) {
          workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }

        return workInProgress.child;
      }

      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

      function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }

          var providerPropTypes = workInProgress.type.propTypes;

          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress, newValue);

        if (oldProps !== null) {
          var oldValue = oldProps.value;
          var changedBits = calculateChangedBits(context, newValue, oldValue);

          if (changedBits === 0) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
          } else {
            propagateContextChange(workInProgress, context, changedBits, renderLanes);
          }
        }

        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
      }

      var hasWarnedAboutUsingContextAsConsumer = false;

      function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type;
        {
          if (context._context === undefined) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        {
          if (typeof render !== "function") {
            error("A context consumer was rendered with multiple children, or a child " + "that isn't a function. A context consumer expects a single child " + "that is a function. If you did pass a function, make sure there " + "is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress, renderLanes);

        var newValue = _readContext(context, newProps.unstable_observedBits);

        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          newChildren = render(newValue);
          setIsRendering(false);
        }
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
      }

      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }

      function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        if (current !== null) {
          workInProgress.dependencies = current.dependencies;
        }

        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress.lanes);

        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
          return null;
        } else {
          cloneChildFibers(current, workInProgress);
          return workInProgress.child;
        }
      }

      function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;

          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }

          current.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;

          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;

            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }

            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;

              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }

            prevSibling.sibling = newWorkInProgress;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = current;
            returnFiber.lastEffect = current;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = current;
          }

          current.nextEffect = null;
          current.flags = Deletion;
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }

      function beginWork(current, workInProgress, renderLanes) {
        var updateLanes = workInProgress.lanes;
        {
          if (workInProgress._debugNeedsRemount && current !== null) {
            return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
          }
        }

        if (current !== null) {
          var oldProps = current.memoizedProps;
          var newProps = workInProgress.pendingProps;

          if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) {
            didReceiveUpdate = true;
          } else if (!includesSomeLane(renderLanes, updateLanes)) {
            didReceiveUpdate = false;

            switch (workInProgress.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress);
                break;

              case HostComponent:
                pushHostContext(workInProgress);
                break;

              case ClassComponent:
                {
                  var Component = workInProgress.type;

                  if (isContextProvider(Component)) {
                    pushContextProvider(workInProgress);
                  }

                  break;
                }

              case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;

              case ContextProvider:
                {
                  var newValue = workInProgress.memoizedProps.value;
                  pushProvider(workInProgress, newValue);
                  break;
                }

              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                  if (hasChildWork) {
                    workInProgress.flags |= Update;
                  }

                  var stateNode = workInProgress.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
                break;

              case SuspenseComponent:
                {
                  var state = workInProgress.memoizedState;

                  if (state !== null) {
                    var primaryChildFragment = workInProgress.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;

                    if (includesSomeLane(renderLanes, primaryChildLanes)) {
                      return updateSuspenseComponent(current, workInProgress, renderLanes);
                    } else {
                      pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }

                  break;
                }

              case SuspenseListComponent:
                {
                  var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

                  var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current, workInProgress, renderLanes);
                    }

                    workInProgress.flags |= DidCapture;
                  }

                  var renderState = workInProgress.memoizedState;

                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                  }

                  pushSuspenseContext(workInProgress, suspenseStackCursor.current);

                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }

              case OffscreenComponent:
              case LegacyHiddenComponent:
                {
                  workInProgress.lanes = NoLanes;
                  return updateOffscreenComponent(current, workInProgress, renderLanes);
                }
            }

            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          } else {
            if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
        }

        workInProgress.lanes = NoLanes;

        switch (workInProgress.tag) {
          case IndeterminateComponent:
            {
              return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            }

          case LazyComponent:
            {
              var elementType = workInProgress.elementType;
              return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
            }

          case FunctionComponent:
            {
              var _Component = workInProgress.type;
              var unresolvedProps = workInProgress.pendingProps;
              var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
            }

          case ClassComponent:
            {
              var _Component2 = workInProgress.type;
              var _unresolvedProps = workInProgress.pendingProps;

              var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

              return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
            }

          case HostRoot:
            return updateHostRoot(current, workInProgress, renderLanes);

          case HostComponent:
            return updateHostComponent(current, workInProgress, renderLanes);

          case HostText:
            return updateHostText();

          case SuspenseComponent:
            return updateSuspenseComponent(current, workInProgress, renderLanes);

          case HostPortal:
            return updatePortalComponent(current, workInProgress, renderLanes);

          case ForwardRef:
            {
              var type = workInProgress.type;
              var _unresolvedProps2 = workInProgress.pendingProps;

              var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

              return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            }

          case Fragment:
            return updateFragment(current, workInProgress, renderLanes);

          case Mode:
            return updateMode(current, workInProgress, renderLanes);

          case Profiler:
            return updateProfiler(current, workInProgress, renderLanes);

          case ContextProvider:
            return updateContextProvider(current, workInProgress, renderLanes);

          case ContextConsumer:
            return updateContextConsumer(current, workInProgress, renderLanes);

          case MemoComponent:
            {
              var _type2 = workInProgress.type;
              var _unresolvedProps3 = workInProgress.pendingProps;

              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

              {
                if (workInProgress.type !== workInProgress.elementType) {
                  var outerPropTypes = _type2.propTypes;

                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
            }

          case SimpleMemoComponent:
            {
              return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
            }

          case IncompleteClassComponent:
            {
              var _Component3 = workInProgress.type;
              var _unresolvedProps4 = workInProgress.pendingProps;

              var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

              return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
            }

          case SuspenseListComponent:
            {
              return updateSuspenseListComponent(current, workInProgress, renderLanes);
            }

          case FundamentalComponent:
            {
              break;
            }

          case ScopeComponent:
            {
              break;
            }

          case Block:
            {
              break;
            }

          case OffscreenComponent:
            {
              return updateOffscreenComponent(current, workInProgress, renderLanes);
            }

          case LegacyHiddenComponent:
            {
              return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
            }
        }

        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function markUpdate(workInProgress) {
        workInProgress.flags |= Update;
      }

      function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
      }

      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
          var node = workInProgress.child;

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal) ;else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        };

        updateHostContainer = function updateHostContainer(workInProgress) {};

        updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance) {
          var oldProps = current.memoizedProps;

          if (oldProps === newProps) {
            return;
          }

          var instance = workInProgress.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate();
          workInProgress.updateQueue = updatePayload;

          if (updatePayload) {
            markUpdate(workInProgress);
          }
        };

        updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress);
          }
        };
      }

      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        switch (renderState.tailMode) {
          case "hidden":
            {
              var tailNode = renderState.tail;
              var lastTailNode = null;

              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }

                tailNode = tailNode.sibling;
              }

              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }

              break;
            }

          case "collapsed":
            {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;

              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }

                _tailNode = _tailNode.sibling;
              }

              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }

              break;
            }
        }
      }

      function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps;

        switch (workInProgress.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            return null;

          case ClassComponent:
            {
              var Component = workInProgress.type;

              if (isContextProvider(Component)) {
                popContext(workInProgress);
              }

              return null;
            }

          case HostRoot:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject(workInProgress);
              resetWorkInProgressVersions();
              var fiberRoot = workInProgress.stateNode;

              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }

              if (current === null || current.child === null) {
                var wasHydrated = popHydrationState();

                if (wasHydrated) {
                  markUpdate(workInProgress);
                } else if (!fiberRoot.hydrate) {
                  workInProgress.flags |= Snapshot;
                }
              }

              updateHostContainer(workInProgress);
              return null;
            }

          case HostComponent:
            {
              popHostContext(workInProgress);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress.type;

              if (current !== null && workInProgress.stateNode != null) {
                updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

                if (current.ref !== workInProgress.ref) {
                  markRef$1(workInProgress);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress.stateNode !== null)) {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }

                  return null;
                }

                var currentHostContext = getHostContext();

                var _wasHydrated = popHydrationState();

                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance()) {
                    markUpdate(workInProgress);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                  appendAllChildren(instance, workInProgress, false, false);
                  workInProgress.stateNode = instance;

                  if (finalizeInitialChildren(instance)) {
                    markUpdate(workInProgress);
                  }
                }

                if (workInProgress.ref !== null) {
                  markRef$1(workInProgress);
                }
              }

              return null;
            }

          case HostText:
            {
              var newText = newProps;

              if (current && workInProgress.stateNode != null) {
                var oldText = current.memoizedProps;
                updateHostText$1(current, workInProgress, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress.stateNode !== null)) {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }

                var _rootContainerInstance = getRootHostContainer();

                var _currentHostContext = getHostContext();

                var _wasHydrated2 = popHydrationState();

                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance()) {
                    markUpdate(workInProgress);
                  }
                } else {
                  workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
              }

              return null;
            }

          case SuspenseComponent:
            {
              popSuspenseContext(workInProgress);
              var nextState = workInProgress.memoizedState;

              if ((workInProgress.flags & DidCapture) !== NoFlags) {
                workInProgress.lanes = renderLanes;

                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress);
                }

                return workInProgress;
              }

              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;

              if (current === null) {
                if (workInProgress.memoizedProps.fallback !== undefined) ;
              } else {
                var prevState = current.memoizedState;
                prevDidTimeout = prevState !== null;
              }

              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }

              {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress.flags |= Update;
                }
              }
              return null;
            }

          case HostPortal:
            popHostContainer(workInProgress);
            updateHostContainer(workInProgress);

            if (current === null) {
              preparePortalMount(workInProgress.stateNode.containerInfo);
            }

            return null;

          case ContextProvider:
            popProvider(workInProgress);
            return null;

          case IncompleteClassComponent:
            {
              var _Component = workInProgress.type;

              if (isContextProvider(_Component)) {
                popContext(workInProgress);
              }

              return null;
            }

          case SuspenseListComponent:
            {
              popSuspenseContext(workInProgress);
              var renderState = workInProgress.memoizedState;

              if (renderState === null) {
                return null;
              }

              var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;

              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

                  if (!cannotBeSuspended) {
                    var row = workInProgress.child;

                    while (row !== null) {
                      var suspended = findFirstSuspended(row);

                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;

                        if (newThennables !== null) {
                          workInProgress.updateQueue = newThennables;
                          workInProgress.flags |= Update;
                        }

                        if (renderState.lastEffect === null) {
                          workInProgress.firstEffect = null;
                        }

                        workInProgress.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress, renderLanes);
                        pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress.child;
                      }

                      row = row.sibling;
                    }
                  }

                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);

                  if (_suspended !== null) {
                    workInProgress.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;

                    if (_newThennables !== null) {
                      workInProgress.updateQueue = _newThennables;
                      workInProgress.flags |= Update;
                    }

                    cutOffTailIfNeeded(renderState, true);

                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress.lastEffect = renderState.lastEffect;

                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }

                        return null;
                      }
                  } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                    workInProgress.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                }

                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress.child;
                  workInProgress.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;

                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress.child = renderedTail;
                  }

                  renderState.last = renderedTail;
                }
              }

              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress.lastEffect;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;

                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }

                pushSuspenseContext(workInProgress, suspenseContext);
                return next;
              }

              return null;
            }

          case FundamentalComponent:
            {
              break;
            }

          case ScopeComponent:
            {
              break;
            }

          case Block:
            break;

          case OffscreenComponent:
          case LegacyHiddenComponent:
            {
              popRenderLanes(workInProgress);

              if (current !== null) {
                var _nextState = workInProgress.memoizedState;
                var _prevState = current.memoizedState;
                var prevIsHidden = _prevState !== null;
                var nextIsHidden = _nextState !== null;

                if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                  workInProgress.flags |= Update;
                }
              }

              return null;
            }
        }

        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function unwindWork(workInProgress, renderLanes) {
        switch (workInProgress.tag) {
          case ClassComponent:
            {
              var Component = workInProgress.type;

              if (isContextProvider(Component)) {
                popContext(workInProgress);
              }

              var flags = workInProgress.flags;

              if (flags & ShouldCapture) {
                workInProgress.flags = flags & ~ShouldCapture | DidCapture;

                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress);
                }

                return workInProgress;
              }

              return null;
            }

          case HostRoot:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject(workInProgress);
              resetWorkInProgressVersions();
              var _flags = workInProgress.flags;

              if (!((_flags & DidCapture) === NoFlags)) {
                throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
              }

              workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

          case HostComponent:
            {
              popHostContext(workInProgress);
              return null;
            }

          case SuspenseComponent:
            {
              popSuspenseContext(workInProgress);
              var _flags2 = workInProgress.flags;

              if (_flags2 & ShouldCapture) {
                workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture;

                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress);
                }

                return workInProgress;
              }

              return null;
            }

          case SuspenseListComponent:
            {
              popSuspenseContext(workInProgress);
              return null;
            }

          case HostPortal:
            popHostContainer(workInProgress);
            return null;

          case ContextProvider:
            popProvider(workInProgress);
            return null;

          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress);
            return null;

          default:
            return null;
        }
      }

      function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
          case ClassComponent:
            {
              var childContextTypes = interruptedWork.type.childContextTypes;

              if (childContextTypes !== null && childContextTypes !== undefined) {
                popContext(interruptedWork);
              }

              break;
            }

          case HostRoot:
            {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }

          case HostComponent:
            {
              popHostContext(interruptedWork);
              break;
            }

          case HostPortal:
            popHostContainer(interruptedWork);
            break;

          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;

          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;

          case ContextProvider:
            popProvider(interruptedWork);
            break;

          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }

      function createCapturedValue(value, source) {
        return {
          value: value,
          source: source,
          stack: getStackByFiberInDevAndProd(source)
        };
      }

      if (!(typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog === "function")) {
        throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
      }

      function showErrorDialog(boundary, errorInfo) {
        var capturedError = {
          componentStack: errorInfo.stack !== null ? errorInfo.stack : "",
          error: errorInfo.value,
          errorBoundary: boundary !== null && boundary.tag === ClassComponent ? boundary.stateNode : null
        };
        return ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError);
      }

      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);

          if (logError === false) {
            return;
          }

          var error = errorInfo.value;

          if (true) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";

            if (error != null && error._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }

              console["error"](error);
            }

            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);

            if (errorBoundaryName) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n" + "Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            }

            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          } else {
            console["error"](error);
          }
        } catch (e) {
          setTimeout(function () {
            throw e;
          });
        }
      }

      var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;

      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error = errorInfo.value;

        update.callback = function () {
          onUncaughtError(error);
          logCapturedError(fiber, errorInfo);
        };

        return update;
      }

      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;

          update.payload = function () {
            logCapturedError(fiber, errorInfo);
            return getDerivedStateFromError(error$1);
          };
        }

        var inst = fiber.stateNode;

        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }

            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
              logCapturedError(fiber, errorInfo);
            }

            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). " + "In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                }
              }
            }
          };
        } else {
          update.callback = function () {
            markFailedErrorBoundaryForHotReloading(fiber);
          };
        }

        return update;
      }

      function attachPingListener(root, wakeable, lanes) {
        var pingCache = root.pingCache;
        var threadIDs;

        if (pingCache === null) {
          pingCache = root.pingCache = new PossiblyWeakMap$1();
          threadIDs = new Set();
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);

          if (threadIDs === undefined) {
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          }
        }

        if (!threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
          wakeable.then(ping, ping);
        }
      }

      function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;

        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;

          if ((sourceFiber.mode & BlockingMode) === NoMode) {
            var currentSource = sourceFiber.alternate;

            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }

          var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
          var _workInProgress = returnFiber;

          do {
            if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
              var wakeables = _workInProgress.updateQueue;

              if (wakeables === null) {
                var updateQueue = new Set();
                updateQueue.add(wakeable);
                _workInProgress.updateQueue = updateQueue;
              } else {
                wakeables.add(wakeable);
              }

              if ((_workInProgress.mode & BlockingMode) === NoMode) {
                _workInProgress.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;

                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update);
                  }
                }

                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                return;
              }

              attachPingListener(root, wakeable, rootRenderLanes);
              _workInProgress.flags |= ShouldCapture;
              _workInProgress.lanes = rootRenderLanes;
              return;
            }

            _workInProgress = _workInProgress.return;
          } while (_workInProgress !== null);

          value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n" + "\n" + "Add a <Suspense fallback=...> component higher in the tree to " + "provide a loading indicator or placeholder to display.");
        }

        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;

        do {
          switch (workInProgress.tag) {
            case HostRoot:
              {
                var _errorInfo = value;
                workInProgress.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);

                var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);

                enqueueCapturedUpdate(workInProgress, _update);
                return;
              }

            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress.type;
              var instance = workInProgress.stateNode;

              if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress.flags |= ShouldCapture;

                var _lane = pickArbitraryLane(rootRenderLanes);

                workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane);

                var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);

                enqueueCapturedUpdate(workInProgress, _update2);
                return;
              }

              break;
          }

          workInProgress = workInProgress.return;
        } while (workInProgress !== null);
      }

      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
      }
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;

      var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        {
          instance.componentWillUnmount();
        }
      };

      function safelyCallComponentWillUnmount(current, instance) {
        {
          invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

          if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current, unmountError);
          }
        }
      }

      function safelyDetachRef(current) {
        var ref = current.ref;

        if (ref !== null) {
          if (typeof ref === "function") {
            {
              {
                invokeGuardedCallback(null, ref, null, null);
              }

              if (hasCaughtError()) {
                var refError = clearCaughtError();
                captureCommitPhaseError(current, refError);
              }
            }
          } else {
            ref.current = null;
          }
        }
      }

      function safelyCallDestroy(current, destroy) {
        {
          invokeGuardedCallback(null, destroy, null);

          if (hasCaughtError()) {
            var error = clearCaughtError();
            captureCommitPhaseError(current, error);
          }
        }
      }

      function commitBeforeMutationLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block:
            {
              return;
            }

          case ClassComponent:
            {
              if (finishedWork.flags & Snapshot) {
                if (current !== null) {
                  var prevProps = current.memoizedProps;
                  var prevState = current.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                    if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) " + "must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
              }

              return;
            }

          case HostRoot:
            {
              {
                if (finishedWork.flags & Snapshot) {
                  var root = finishedWork.stateNode;
                  clearContainer(root.containerInfo);
                }
              }
              return;
            }

          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            return;
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;

          do {
            if ((effect.tag & tag) === tag) {
              var destroy = effect.destroy;
              effect.destroy = undefined;

              if (destroy !== undefined) {
                destroy();
              }
            }

            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }

      function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;

          do {
            if ((effect.tag & tag) === tag) {
              var create = effect.create;
              effect.destroy = create();
              {
                var destroy = effect.destroy;

                if (destroy !== undefined && typeof destroy !== "function") {
                  var addendum = void 0;

                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean " + "up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. " + "Instead, write the async function inside your effect " + "and call it immediately:\n\n" + "useEffect(() => {\n" + "  async function fetchData() {\n" + "    // You can await here\n" + "    const response = await MyAPI.getData(someId);\n" + "    // ...\n" + "  }\n" + "  fetchData();\n" + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + "Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }

                  error("An effect function must not return anything besides a function, " + "which is used for clean-up.%s", addendum);
                }
              }
            }

            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }

      function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;

          do {
            var _effect = effect,
                next = _effect.next,
                tag = _effect.tag;

            if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
              enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
              enqueuePendingPassiveHookEffectMount(finishedWork, effect);
            }

            effect = next;
          } while (effect !== firstEffect);
        }
      }

      function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block:
            {
              {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
              schedulePassiveEffects(finishedWork);
              return;
            }

          case ClassComponent:
            {
              var instance = finishedWork.stateNode;

              if (finishedWork.flags & Update) {
                if (current === null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidMount();
                  }
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                  var prevState = current.memoizedState;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              }

              var updateQueue = finishedWork.updateQueue;

              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }

              return;
            }

          case HostRoot:
            {
              var _updateQueue = finishedWork.updateQueue;

              if (_updateQueue !== null) {
                var _instance = null;

                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;

                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }

                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }

              return;
            }

          case HostComponent:
            {
              var _instance2 = finishedWork.stateNode;

              if (current === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
              }

              return;
            }

          case HostText:
            {
              return;
            }

          case HostPortal:
            {
              return;
            }

          case Profiler:
            {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps,
                    onCommit = _finishedWork$memoize2.onCommit,
                    onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();

                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }

          case SuspenseComponent:
            {
              return;
            }

          case SuspenseListComponent:
          case IncompleteClassComponent:
          case FundamentalComponent:
          case ScopeComponent:
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return;
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        {
          var node = finishedWork;

          while (true) {
            if (node.tag === HostComponent) {
              var instance = node.stateNode;

              if (isHidden) {
                hideInstance(instance);
              } else {
                unhideInstance(node.stateNode, node.memoizedProps);
              }
            } else if (node.tag === HostText) {
              var _instance3 = node.stateNode;

              if (isHidden) {
                hideTextInstance();
              } else {
                unhideTextInstance(_instance3, node.memoizedProps);
              }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === finishedWork) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }

      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;

        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;

          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;

            default:
              instanceToUse = instance;
          }

          if (typeof ref === "function") {
            {
              ref(instanceToUse);
            }
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. " + "Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }

      function commitDetachRef(current) {
        var currentRef = current.ref;

        if (currentRef !== null) {
          if (typeof currentRef === "function") {
            {
              currentRef(null);
            }
          } else {
            currentRef.current = null;
          }
        }
      }

      function commitUnmount(finishedRoot, current, renderPriorityLevel) {
        onCommitUnmount(current);

        switch (current.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block:
            {
              var updateQueue = current.updateQueue;

              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;

                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;

                  do {
                    var _effect2 = effect,
                        destroy = _effect2.destroy,
                        tag = _effect2.tag;

                    if (destroy !== undefined) {
                      if ((tag & Passive$1) !== NoFlags$1) {
                        enqueuePendingPassiveHookEffectUnmount(current, effect);
                      } else {
                        {
                          safelyCallDestroy(current, destroy);
                        }
                      }
                    }

                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }

              return;
            }

          case ClassComponent:
            {
              safelyDetachRef(current);
              var instance = current.stateNode;

              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current, instance);
              }

              return;
            }

          case HostComponent:
            {
              safelyDetachRef(current);
              return;
            }

          case HostPortal:
            {
              {
                unmountHostComponents(finishedRoot, current);
              }
              return;
            }

          case FundamentalComponent:
            {
              return;
            }

          case DehydratedFragment:
            {
              return;
            }

          case ScopeComponent:
            {
              return;
            }
        }
      }

      function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
        var node = root;

        while (true) {
          commitUnmount(finishedRoot, node);

          if (node.child !== null && node.tag !== HostPortal) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === root) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === root) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      function detachFiberMutation(fiber) {
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        {
          fiber._debugOwner = null;
        }
      }

      function getHostParentFiber(fiber) {
        var parent = fiber.return;

        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }

          parent = parent.return;
        }

        {
          throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }

      function getHostSibling(fiber) {
        var node = fiber;

        siblings: while (true) {
          while (node.sibling === null) {
            if (node.return === null || isHostParent(node.return)) {
              return null;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;

          while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
            if (node.flags & Placement) {
              continue siblings;
            }

            if (node.child === null || node.tag === HostPortal) {
              continue siblings;
            } else {
              node.child.return = node;
              node = node.child;
            }
          }

          if (!(node.flags & Placement)) {
            return node.stateNode;
          }
        }
      }

      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;

        switch (parentFiber.tag) {
          case HostComponent:
            parent = parentStateNode;
            isContainer = false;
            break;

          case HostRoot:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;

          case HostPortal:
            parent = parentStateNode.containerInfo;
            isContainer = true;
            break;

          case FundamentalComponent:
          default:
            {
              throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
        }

        if (parentFiber.flags & ContentReset) {
          parentFiber.flags &= ~ContentReset;
        }

        var before = getHostSibling(finishedWork);

        if (isContainer) {
          insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        } else {
          insertOrAppendPlacementNode(finishedWork, before, parent);
        }
      }

      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;

        if (isHost || enableFundamentalAPI) {
          var stateNode = isHost ? node.stateNode : node.stateNode.instance;

          if (before) {
            insertInContainerBefore(parent);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag === HostPortal) ;else {
          var child = node.child;

          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            var sibling = child.sibling;

            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }

      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;

        if (isHost || enableFundamentalAPI) {
          var stateNode = isHost ? node.stateNode : node.stateNode.instance;

          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag === HostPortal) ;else {
          var child = node.child;

          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            var sibling = child.sibling;

            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }

      function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
        var node = current;
        var currentParentIsValid = false;
        var currentParent;
        var currentParentIsContainer;

        while (true) {
          if (!currentParentIsValid) {
            var parent = node.return;

            findParent: while (true) {
              if (!(parent !== null)) {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }

              var parentStateNode = parent.stateNode;

              switch (parent.tag) {
                case HostComponent:
                  currentParent = parentStateNode;
                  currentParentIsContainer = false;
                  break findParent;

                case HostRoot:
                  currentParent = parentStateNode.containerInfo;
                  currentParentIsContainer = true;
                  break findParent;

                case HostPortal:
                  currentParent = parentStateNode.containerInfo;
                  currentParentIsContainer = true;
                  break findParent;
              }

              parent = parent.return;
            }

            currentParentIsValid = true;
          }

          if (node.tag === HostComponent || node.tag === HostText) {
            commitNestedUnmounts(finishedRoot, node);

            if (currentParentIsContainer) {
              removeChildFromContainer(currentParent, node.stateNode);
            } else {
              removeChild(currentParent, node.stateNode);
            }
          } else if (node.tag === HostPortal) {
            if (node.child !== null) {
              currentParent = node.stateNode.containerInfo;
              currentParentIsContainer = true;
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else {
            commitUnmount(finishedRoot, node);

            if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
          }

          if (node === current) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === current) {
              return;
            }

            node = node.return;

            if (node.tag === HostPortal) {
              currentParentIsValid = false;
            }
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      function commitDeletion(finishedRoot, current, renderPriorityLevel) {
        {
          unmountHostComponents(finishedRoot, current);
        }
        var alternate = current.alternate;
        detachFiberMutation(current);

        if (alternate !== null) {
          detachFiberMutation(alternate);
        }
      }

      function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block:
            {
              {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              }
              return;
            }

          case ClassComponent:
            {
              return;
            }

          case HostComponent:
            {
              var instance = finishedWork.stateNode;

              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current !== null ? current.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;

                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }

              return;
            }

          case HostText:
            {
              if (!(finishedWork.stateNode !== null)) {
                throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              }

              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current !== null ? current.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }

          case HostRoot:
            {
              return;
            }

          case Profiler:
            {
              return;
            }

          case SuspenseComponent:
            {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }

          case SuspenseListComponent:
            {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }

          case IncompleteClassComponent:
            {
              return;
            }

          case FundamentalComponent:
            {
              break;
            }

          case ScopeComponent:
            {
              break;
            }

          case OffscreenComponent:
          case LegacyHiddenComponent:
            {
              var newState = finishedWork.memoizedState;
              var isHidden = newState !== null;
              hideOrUnhideAllChildren(finishedWork, isHidden);
              return;
            }
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;

        if (newState !== null) {
          markCommitTimeOfFallback();
          {
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
          }
        }
      }

      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;

        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;

          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
          }

          wakeables.forEach(function (wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

            if (!retryCache.has(wakeable)) {
              {
                if (wakeable.__reactDoNotTraceInteractions !== true) {
                  retry = tracing.unstable_wrap(retry);
                }
              }
              retryCache.add(wakeable);
              wakeable.then(retry, retry);
            }
          });
        }
      }

      function isSuspenseBoundaryBeingHidden(current, finishedWork) {
        if (current !== null) {
          var oldState = current.memoizedState;

          if (oldState === null || oldState.dehydrated !== null) {
            var newState = finishedWork.memoizedState;
            return newState !== null && newState.dehydrated === null;
          }
        }

        return false;
      }

      function commitResetTextContent(current) {
        resetTextContent(current.stateNode);
      }

      var COMPONENT_TYPE = 0;
      var HAS_PSEUDO_CLASS_TYPE = 1;
      var ROLE_TYPE = 2;
      var TEST_NAME_TYPE = 3;
      var TEXT_TYPE = 4;

      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1("selector.component");
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
        ROLE_TYPE = symbolFor$1("selector.role");
        TEST_NAME_TYPE = symbolFor$1("selector.test_id");
        TEXT_TYPE = symbolFor$1("selector.text");
      }

      var ceil = Math.ceil;
      var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
          ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
          IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
      var NoContext = 0;
      var BatchedContext = 1;
      var DiscreteEventContext = 4;
      var LegacyUnbatchedContext = 8;
      var RenderContext = 16;
      var CommitContext = 32;
      var RetryAfterError = 64;
      var RootIncomplete = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var subtreeRenderLanes = NoLanes;
      var subtreeRenderLanesCursor = createCursor(NoLanes);
      var workInProgressRootExitStatus = RootIncomplete;
      var workInProgressRootFatalError = null;
      var workInProgressRootIncludedLanes = NoLanes;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var mostRecentlyUpdatedRoot = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;

      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }

      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }

      var nextEffect = null;
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsRenderPriority = NoPriority$1;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveHookEffectsMount = [];
      var pendingPassiveHookEffectsUnmount = [];
      var rootsWithPendingDiscreteUpdates = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var spawnedWorkDuringRender = null;
      var currentEventTime = NoTimestamp;
      var currentEventWipLanes = NoLanes;
      var currentEventPendingLanes = NoLanes;
      var isFlushingPassiveEffects = false;
      var focusedInstanceHandle = null;
      var shouldFireAfterActiveInstanceBlur = false;

      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }

      function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return now();
        }

        if (currentEventTime !== NoTimestamp) {
          return currentEventTime;
        }

        currentEventTime = now();
        return currentEventTime;
      }

      function requestUpdateLane(fiber) {
        var mode = fiber.mode;

        if ((mode & BlockingMode) === NoMode) {
          return SyncLane;
        } else if ((mode & ConcurrentMode) === NoMode) {
          return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
        }

        if (currentEventWipLanes === NoLanes) {
          currentEventWipLanes = workInProgressRootIncludedLanes;
        }

        var isTransition = requestCurrentTransition() !== NoTransition;

        if (isTransition) {
          if (currentEventPendingLanes !== NoLanes) {
            currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
          }

          return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        }

        var schedulerPriority = getCurrentPriorityLevel();
        var lane;

        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$1) {
          lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        } else {
          var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
          lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }

        return lane;
      }

      function requestRetryLane(fiber) {
        var mode = fiber.mode;

        if ((mode & BlockingMode) === NoMode) {
          return SyncLane;
        } else if ((mode & ConcurrentMode) === NoMode) {
          return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
        }

        if (currentEventWipLanes === NoLanes) {
          currentEventWipLanes = workInProgressRootIncludedLanes;
        }

        return findRetryLane(currentEventWipLanes);
      }

      function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root = markUpdateLaneFromFiberToRoot(fiber, lane);

        if (root === null) {
          warnAboutUpdateOnUnmountedFiberInDEV(fiber);
          return null;
        }

        markRootUpdated(root, lane, eventTime);

        if (root === workInProgressRoot) {
          {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
          }

          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
            markRootSuspended$1(root, workInProgressRootRenderLanes);
          }
        }

        var priorityLevel = getCurrentPriorityLevel();

        if (lane === SyncLane) {
          if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            schedulePendingInteractions(root, lane);
            performSyncWorkOnRoot(root);
          } else {
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, lane);

            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        } else {
          if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority$1)) {
            if (rootsWithPendingDiscreteUpdates === null) {
              rootsWithPendingDiscreteUpdates = new Set([root]);
            } else {
              rootsWithPendingDiscreteUpdates.add(root);
            }
          }

          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, lane);
        }

        mostRecentlyUpdatedRoot = root;
      }

      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;

        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }

        {
          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
        var node = sourceFiber;
        var parent = sourceFiber.return;

        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;

          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
          }

          node = parent;
          parent = parent.return;
        }

        if (node.tag === HostRoot) {
          var root = node.stateNode;
          return root;
        } else {
          return null;
        }
      }

      function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode;
        markStarvedLanesAsExpired(root, currentTime);
        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        var newCallbackPriority = returnNextLanesPriority();

        if (nextLanes === NoLanes) {
          if (existingCallbackNode !== null) {
            cancelCallback(existingCallbackNode);
            root.callbackNode = null;
            root.callbackPriority = NoLanePriority;
          }

          return;
        }

        if (existingCallbackNode !== null) {
          var existingCallbackPriority = root.callbackPriority;

          if (existingCallbackPriority === newCallbackPriority) {
            return;
          }

          cancelCallback(existingCallbackNode);
        }

        var newCallbackNode;

        if (newCallbackPriority === SyncLanePriority) {
          newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
        } else if (newCallbackPriority === SyncBatchedLanePriority) {
          newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
        } else {
          var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
          newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        }

        root.callbackPriority = newCallbackPriority;
        root.callbackNode = newCallbackNode;
      }

      function performConcurrentWorkOnRoot(root) {
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        var originalCallbackNode = root.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();

        if (didFlushPassiveEffects) {
          if (root.callbackNode !== originalCallbackNode) {
            return null;
          }
        }

        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

        if (lanes === NoLanes) {
          return null;
        }

        var exitStatus = renderRootConcurrent(root, lanes);

        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
          prepareFreshStack(root, NoLanes);
        } else if (exitStatus !== RootIncomplete) {
          if (exitStatus === RootErrored) {
            executionContext |= RetryAfterError;

            if (root.hydrate) {
              root.hydrate = false;
              clearContainer(root.containerInfo);
            }

            lanes = getLanesToRetrySynchronouslyOnError(root);

            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root, lanes);
            }
          }

          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
          }

          var finishedWork = root.current.alternate;
          root.finishedWork = finishedWork;
          root.finishedLanes = lanes;
          finishConcurrentRender(root, exitStatus, lanes);
        }

        ensureRootIsScheduled(root, now());

        if (root.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root);
        }

        return null;
      }

      function finishConcurrentRender(root, exitStatus, lanes) {
        switch (exitStatus) {
          case RootIncomplete:
          case RootFatalErrored:
            {
              {
                throw Error("Root did not complete. This is a bug in React.");
              }
            }

          case RootErrored:
            {
              commitRoot(root);
              break;
            }

          case RootSuspended:
            {
              markRootSuspended$1(root, lanes);

              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();

                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root, NoLanes);

                  if (nextLanes !== NoLanes) {
                    break;
                  }

                  var suspendedLanes = root.suspendedLanes;

                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root, suspendedLanes);
                    break;
                  }

                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                  break;
                }
              }

              commitRoot(root);
              break;
            }

          case RootSuspendedWithDelay:
            {
              markRootSuspended$1(root, lanes);

              if (includesOnlyTransitions(lanes)) {
                break;
              }

              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;

                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;

                if (_msUntilTimeout > 10) {
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                  break;
                }
              }

              commitRoot(root);
              break;
            }

          case RootCompleted:
            {
              commitRoot(root);
              break;
            }

          default:
            {
              {
                throw Error("Unknown root exit status.");
              }
            }
        }
      }

      function markRootSuspended$1(root, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root, suspendedLanes);
      }

      function performSyncWorkOnRoot(root) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        flushPassiveEffects();
        var lanes;
        var exitStatus;

        if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
          lanes = workInProgressRootRenderLanes;
          exitStatus = renderRootSync(root, lanes);

          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            lanes = getNextLanes(root, lanes);
            exitStatus = renderRootSync(root, lanes);
          }
        } else {
          lanes = getNextLanes(root, NoLanes);
          exitStatus = renderRootSync(root, lanes);
        }

        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
          executionContext |= RetryAfterError;

          if (root.hydrate) {
            root.hydrate = false;
            clearContainer(root.containerInfo);
          }

          lanes = getLanesToRetrySynchronouslyOnError(root);

          if (lanes !== NoLanes) {
            exitStatus = renderRootSync(root, lanes);
          }
        }

        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root, NoLanes);
          markRootSuspended$1(root, lanes);
          ensureRootIsScheduled(root, now());
          throw fatalError;
        }

        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        commitRoot(root);
        ensureRootIsScheduled(root, now());
        return null;
      }

      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;

        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;

          if (executionContext === NoContext) {
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      }

      function flushSync(fn, a) {
        var prevExecutionContext = executionContext;

        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
          {
            error("flushSync was called from inside a lifecycle method. React cannot " + "flush when React is already rendering. Consider moving this call to " + "a scheduler task or micro task.");
          }
          return fn(a);
        }

        executionContext |= BatchedContext;
        {
          try {
            if (fn) {
              return runWithPriority(ImmediatePriority$1, fn.bind(null, a));
            } else {
              return undefined;
            }
          } finally {
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
          }
        }
      }

      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }

      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
      }

      function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        var timeoutHandle = root.timeoutHandle;

        if (timeoutHandle !== noTimeout) {
          root.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }

        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;

          while (interruptedWork !== null) {
            unwindInterruptedWork(interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }

        workInProgressRoot = root;
        workInProgress = createWorkInProgress(root.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        {
          spawnedWorkDuringRender = null;
        }
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
      }

      function handleError(root, thrownValue) {
        do {
          var erroredWork = workInProgress;

          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();
            ReactCurrentOwner$2.current = null;

            if (erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return;
            }

            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
            }

            throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
            completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;

            if (workInProgress === erroredWork && erroredWork !== null) {
              erroredWork = erroredWork.return;
              workInProgress = erroredWork;
            } else {
              erroredWork = workInProgress;
            }

            continue;
          }

          return;
        } while (true);
      }

      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }

      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }

      function pushInteractions(root) {
        {
          var prevInteractions = tracing.__interactionsRef.current;
          tracing.__interactionsRef.current = root.memoizedInteractions;
          return prevInteractions;
        }
      }

      function popInteractions(prevInteractions) {
        {
          tracing.__interactionsRef.current = prevInteractions;
        }
      }

      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }

      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }

      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }

      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }

        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }

      function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) {
          workInProgressRootExitStatus = RootErrored;
        }
      }

      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootIncomplete;
      }

      function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();

        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
          prepareFreshStack(root, lanes);
          startWorkOnPendingInteractions(root, lanes);
        }

        var prevInteractions = pushInteractions(root);

        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (true);

        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);

        if (workInProgress !== null) {
          {
            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }

      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }

      function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();

        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
          resetRenderTimer();
          prepareFreshStack(root, lanes);
          startWorkOnPendingInteractions(root, lanes);
        }

        var prevInteractions = pushInteractions(root);

        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (true);

        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;

        if (workInProgress !== null) {
          return RootIncomplete;
        } else {
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
      }

      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }

      function performUnitOfWork(unitOfWork) {
        var current = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;

        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
        }

        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;

        if (next === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next;
        }

        ReactCurrentOwner$2.current = null;
      }

      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;

        do {
          var current = completedWork.alternate;
          var returnFiber = completedWork.return;

          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = void 0;

            if ((completedWork.mode & ProfileMode) === NoMode) {
              next = completeWork(current, completedWork, subtreeRenderLanes);
            } else {
              startProfilerTimer(completedWork);
              next = completeWork(current, completedWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }

            resetCurrentFiber();

            if (next !== null) {
              workInProgress = next;
              return;
            }

            resetChildLanes(completedWork);

            if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
              if (returnFiber.firstEffect === null) {
                returnFiber.firstEffect = completedWork.firstEffect;
              }

              if (completedWork.lastEffect !== null) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                }

                returnFiber.lastEffect = completedWork.lastEffect;
              }

              var flags = completedWork.flags;

              if (flags > PerformedWork) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = completedWork;
                } else {
                  returnFiber.firstEffect = completedWork;
                }

                returnFiber.lastEffect = completedWork;
              }
            }
          } else {
            var _next = unwindWork(completedWork);

            if (_next !== null) {
              _next.flags &= HostEffectMask;
              workInProgress = _next;
              return;
            }

            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              var actualDuration = completedWork.actualDuration;
              var child = completedWork.child;

              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }

              completedWork.actualDuration = actualDuration;
            }

            if (returnFiber !== null) {
              returnFiber.firstEffect = returnFiber.lastEffect = null;
              returnFiber.flags |= Incomplete;
            }
          }

          var siblingFiber = completedWork.sibling;

          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }

          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);

        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }

      function resetChildLanes(completedWork) {
        if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
          return;
        }

        var newChildLanes = NoLanes;

        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
          var child = completedWork.child;

          while (child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));

            if (shouldBubbleActualDurations) {
              actualDuration += child.actualDuration;
            }

            treeBaseDuration += child.treeBaseDuration;
            child = child.sibling;
          }

          var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;

          if (isTimedOutSuspense) {
            var primaryChildFragment = completedWork.child;

            if (primaryChildFragment !== null) {
              treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
          }

          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;

          while (_child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
            _child = _child.sibling;
          }
        }

        completedWork.childLanes = newChildLanes;
      }

      function commitRoot(root) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
        return null;
      }

      function commitRootImpl(root, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);

        flushRenderPhaseStrictModeWarningsInDEV();

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        var finishedWork = root.finishedWork;
        var lanes = root.finishedLanes;

        if (finishedWork === null) {
          return null;
        }

        root.finishedWork = null;
        root.finishedLanes = NoLanes;

        if (!(finishedWork !== root.current)) {
          throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }

        root.callbackNode = null;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root, remainingLanes);

        if (rootsWithPendingDiscreteUpdates !== null) {
          if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
            rootsWithPendingDiscreteUpdates.delete(root);
          }
        }

        if (root === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }

        var firstEffect;

        if (finishedWork.flags > PerformedWork) {
          if (finishedWork.lastEffect !== null) {
            finishedWork.lastEffect.nextEffect = finishedWork;
            firstEffect = finishedWork.firstEffect;
          } else {
            firstEffect = finishedWork;
          }
        } else {
          firstEffect = finishedWork.firstEffect;
        }

        if (firstEffect !== null) {
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root);
          ReactCurrentOwner$2.current = null;
          focusedInstanceHandle = prepareForCommit(root.containerInfo);
          shouldFireAfterActiveInstanceBlur = false;
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitBeforeMutationEffects, null);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var error = clearCaughtError();
                captureCommitPhaseError(nextEffect, error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          focusedInstanceHandle = null;
          {
            recordCommitTime();
          }
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var _error = clearCaughtError();

                captureCommitPhaseError(nextEffect, _error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          resetAfterCommit(root.containerInfo);
          root.current = finishedWork;
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var _error2 = clearCaughtError();

                captureCommitPhaseError(nextEffect, _error2);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          nextEffect = null;
          requestPaint();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
        } else {
          root.current = finishedWork;
          {
            recordCommitTime();
          }
        }

        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root;
          pendingPassiveEffectsLanes = lanes;
          pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
          nextEffect = firstEffect;

          while (nextEffect !== null) {
            var nextNextEffect = nextEffect.nextEffect;
            nextEffect.nextEffect = null;

            if (nextEffect.flags & Deletion) {
              detachFiberAfterEffects(nextEffect);
            }

            nextEffect = nextNextEffect;
          }
        }

        remainingLanes = root.pendingLanes;

        if (remainingLanes !== NoLanes) {
          {
            if (spawnedWorkDuringRender !== null) {
              var expirationTimes = spawnedWorkDuringRender;
              spawnedWorkDuringRender = null;

              for (var i = 0; i < expirationTimes.length; i++) {
                scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
              }
            }

            schedulePendingInteractions(root, remainingLanes);
          }
        } else {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }

        {
          if (!rootDidHavePassiveEffects) {
            finishPendingInteractions(root, lanes);
          }
        }

        if (remainingLanes === SyncLane) {
          if (root === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root;
          }
        } else {
          nestedUpdateCount = 0;
        }

        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        ensureRootIsScheduled(root, now());

        if (hasUncaughtError) {
          hasUncaughtError = false;
          var _error3 = firstUncaughtError;
          firstUncaughtError = null;
          throw _error3;
        }

        if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
          return null;
        }

        flushSyncCallbackQueue();
        return null;
      }

      function commitBeforeMutationEffects() {
        while (nextEffect !== null) {
          var current = nextEffect.alternate;

          if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
            if ((nextEffect.flags & Deletion) !== NoFlags) {
              if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                shouldFireAfterActiveInstanceBlur = true;
              }
            } else {
              if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                shouldFireAfterActiveInstanceBlur = true;
              }
            }
          }

          var flags = nextEffect.flags;

          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(nextEffect);
            commitBeforeMutationLifeCycles(current, nextEffect);
            resetCurrentFiber();
          }

          if ((flags & Passive) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function () {
                flushPassiveEffects();
                return null;
              });
            }
          }

          nextEffect = nextEffect.nextEffect;
        }
      }

      function commitMutationEffects(root, renderPriorityLevel) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var flags = nextEffect.flags;

          if (flags & ContentReset) {
            commitResetTextContent(nextEffect);
          }

          if (flags & Ref) {
            var current = nextEffect.alternate;

            if (current !== null) {
              commitDetachRef(current);
            }
          }

          var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);

          switch (primaryFlags) {
            case Placement:
              {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement;
                break;
              }

            case PlacementAndUpdate:
              {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }

            case Hydrating:
              {
                nextEffect.flags &= ~Hydrating;
                break;
              }

            case HydratingAndUpdate:
              {
                nextEffect.flags &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }

            case Update:
              {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }

            case Deletion:
              {
                commitDeletion(root, nextEffect);
                break;
              }
          }

          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }

      function commitLayoutEffects(root, committedLanes) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var flags = nextEffect.flags;

          if (flags & (Update | Callback)) {
            var current = nextEffect.alternate;
            commitLifeCycles(root, current, nextEffect);
          }

          {
            if (flags & Ref) {
              commitAttachRef(nextEffect);
            }
          }
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }

      function flushPassiveEffects() {
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
          var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
          pendingPassiveEffectsRenderPriority = NoPriority$1;
          {
            return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
          }
        }

        return false;
      }

      function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);

        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback(NormalPriority$1, function () {
            flushPassiveEffects();
            return null;
          });
        }
      }

      function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        {
          fiber.flags |= PassiveUnmountPendingDev;
          var alternate = fiber.alternate;

          if (alternate !== null) {
            alternate.flags |= PassiveUnmountPendingDev;
          }
        }

        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback(NormalPriority$1, function () {
            flushPassiveEffects();
            return null;
          });
        }
      }

      function invokePassiveEffectCreate(effect) {
        var create = effect.create;
        effect.destroy = create();
      }

      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }

        var root = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Cannot flush passive effects while already rendering.");
        }

        {
          isFlushingPassiveEffects = true;
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root);
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];

        for (var i = 0; i < unmountEffects.length; i += 2) {
          var _effect = unmountEffects[i];
          var fiber = unmountEffects[i + 1];
          var destroy = _effect.destroy;
          _effect.destroy = undefined;
          {
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;

            if (alternate !== null) {
              alternate.flags &= ~PassiveUnmountPendingDev;
            }
          }

          if (typeof destroy === "function") {
            {
              setCurrentFiber(fiber);
              {
                invokeGuardedCallback(null, destroy, null);
              }

              if (hasCaughtError()) {
                if (!(fiber !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var error = clearCaughtError();
                captureCommitPhaseError(fiber, error);
              }

              resetCurrentFiber();
            }
          }
        }

        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];

        for (var _i = 0; _i < mountEffects.length; _i += 2) {
          var _effect2 = mountEffects[_i];
          var _fiber = mountEffects[_i + 1];
          {
            setCurrentFiber(_fiber);
            {
              invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            }

            if (hasCaughtError()) {
              if (!(_fiber !== null)) {
                throw Error("Should be working on an effect.");
              }

              var _error4 = clearCaughtError();

              captureCommitPhaseError(_fiber, _error4);
            }

            resetCurrentFiber();
          }
        }

        var effect = root.current.firstEffect;

        while (effect !== null) {
          var nextNextEffect = effect.nextEffect;
          effect.nextEffect = null;

          if (effect.flags & Deletion) {
            detachFiberAfterEffects(effect);
          }

          effect = nextNextEffect;
        }

        {
          popInteractions(prevInteractions);
          finishPendingInteractions(root, lanes);
        }
        {
          isFlushingPassiveEffects = false;
        }
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue();
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
      }

      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }

      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }

      function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error;
        }
      }

      var onUncaughtError = prepareToThrowUncaughtError;

      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);

        if (root !== null) {
          markRootUpdated(root, SyncLane, eventTime);
          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, SyncLane);
        }
      }

      function captureCommitPhaseError(sourceFiber, error) {
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
          return;
        }

        var fiber = sourceFiber.return;

        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;

            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(error, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              enqueueUpdate(fiber, update);
              var eventTime = requestEventTime();
              var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);

              if (root !== null) {
                markRootUpdated(root, SyncLane, eventTime);
                ensureRootIsScheduled(root, eventTime);
                schedulePendingInteractions(root, SyncLane);
              } else {
                if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  try {
                    instance.componentDidCatch(error, errorInfo);
                  } catch (errorToIgnore) {}
                }
              }

              return;
            }
          }

          fiber = fiber.return;
        }
      }

      function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;

        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }

        var eventTime = requestEventTime();
        markRootPinged(root, pingedLanes);

        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root, NoLanes);
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }

        ensureRootIsScheduled(root, eventTime);
        schedulePendingInteractions(root, pingedLanes);
      }

      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }

        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);

        if (root !== null) {
          markRootUpdated(root, retryLane, eventTime);
          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, retryLane);
        }
      }

      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        {
          retryCache = boundaryFiber.stateNode;
        }

        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }

        retryTimedOutBoundary(boundaryFiber, retryLane);
      }

      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }

      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          {
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
        }

        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component " + "calls setState inside useEffect, but useEffect either doesn't " + "have a dependency array, or one of the dependencies changes on " + "every render.");
          }
        }
      }

      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }

      var didWarnStateUpdateForNotYetMountedComponent = null;

      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }

          if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
            return;
          }

          var tag = fiber.tag;

          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
            return;
          }

          var componentName = getComponentName(fiber.type) || "ReactComponent";

          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }

            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
          }

          var previousFiber = current;

          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. " + "This indicates that you have a side-effect in your render function that " + "asynchronously later calls tries to update the component. Move this work to " + "useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }

      var didWarnStateUpdateForUnmountedComponent = null;

      function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        {
          var tag = fiber.tag;

          if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
            return;
          }

          if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
            return;
          }

          var componentName = getComponentName(fiber.type) || "ReactComponent";

          if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
              return;
            }

            didWarnStateUpdateForUnmountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
          }

          if (isFlushingPassiveEffects) ;else {
            var previousFiber = current;

            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on an unmounted component. This " + "is a no-op, but it indicates a memory leak in your application. To " + "fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }

      var beginWork$1;
      {
        var dummyFiber = null;

        beginWork$1 = function beginWork$1(current, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

          try {
            return beginWork(current, unitOfWork, lanes);
          } catch (originalError) {
            if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }

            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }

            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              throw replayError;
            } else {
              throw originalError;
            }
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = new Set();
      }

      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;

                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a " + "different component (`%s`). To locate the bad setState() call inside `%s`, " + "follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }

                  break;
                }

              case ClassComponent:
                {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as " + "within `render`). Render methods should be a pure " + "function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }

                  break;
                }
            }
          }
        }
      }

      var IsThisRendererActing = {
        current: false
      };

      function warnIfNotScopedWithMatchingAct(fiber) {
        {
          if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current;

            try {
              setCurrentFiber(fiber);
              error("It looks like you're using the wrong act() around your test interactions.\n" + "Be sure to use the matching version of act() corresponding to your renderer:\n\n" + "// for react-dom:\n" + "import {act} fr" + "om 'react-dom/test-utils';\n" + "// ...\n" + "act(() => ...);\n\n" + "// for react-test-renderer:\n" + "import TestRenderer fr" + "om react-test-renderer';\n" + "const {act} = TestRenderer;\n" + "// ...\n" + "act(() => ...);");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }

      function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        {
          if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            error("An update to %s ran an effect, but was not wrapped in act(...).\n\n" + "When testing, code that causes React state updates should be " + "wrapped into act(...):\n\n" + "act(() => {\n" + "  /* fire events that update state */\n" + "});\n" + "/* assert on the output */\n\n" + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
          }
        }
      }

      function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        {
          if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current;

            try {
              setCurrentFiber(fiber);
              error("An update to %s inside a test was not wrapped in act(...).\n\n" + "When testing, code that causes React state updates should be " + "wrapped into act(...):\n\n" + "act(() => {\n" + "  /* fire events that update state */\n" + "});\n" + "/* assert on the output */\n\n" + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }

      var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
      var didWarnAboutUnmockedScheduler = false;

      function warnIfUnmockedScheduler(fiber) {
        {
          if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
              didWarnAboutUnmockedScheduler = true;
              error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + "to guarantee consistent behaviour across tests and browsers. " + "For example, with jest: \n" + "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + "For more info, visit https://reactjs.org/link/mock-scheduler");
            }
          }
        }
      }

      function computeThreadID(root, lane) {
        return lane * 1000 + root.interactionThreadID;
      }

      function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) {
          spawnedWorkDuringRender = [lane];
        } else {
          spawnedWorkDuringRender.push(lane);
        }
      }

      function scheduleInteractions(root, lane, interactions) {
        if (interactions.size > 0) {
          var pendingInteractionMap = root.pendingInteractionMap;
          var pendingInteractions = pendingInteractionMap.get(lane);

          if (pendingInteractions != null) {
            interactions.forEach(function (interaction) {
              if (!pendingInteractions.has(interaction)) {
                interaction.__count++;
              }

              pendingInteractions.add(interaction);
            });
          } else {
            pendingInteractionMap.set(lane, new Set(interactions));
            interactions.forEach(function (interaction) {
              interaction.__count++;
            });
          }

          var subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null) {
            var threadID = computeThreadID(root, lane);
            subscriber.onWorkScheduled(interactions, threadID);
          }
        }
      }

      function schedulePendingInteractions(root, lane) {
        scheduleInteractions(root, lane, tracing.__interactionsRef.current);
      }

      function startWorkOnPendingInteractions(root, lanes) {
        var interactions = new Set();
        root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
          if (includesSomeLane(lanes, scheduledLane)) {
            scheduledInteractions.forEach(function (interaction) {
              return interactions.add(interaction);
            });
          }
        });
        root.memoizedInteractions = interactions;

        if (interactions.size > 0) {
          var subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null) {
            var threadID = computeThreadID(root, lanes);

            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              scheduleCallback(ImmediatePriority$1, function () {
                throw error;
              });
            }
          }
        }
      }

      function finishPendingInteractions(root, committedLanes) {
        var remainingLanesAfterCommit = root.pendingLanes;
        var subscriber;

        try {
          subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(root, committedLanes);
            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
          }
        } catch (error) {
          scheduleCallback(ImmediatePriority$1, function () {
            throw error;
          });
        } finally {
          var pendingInteractionMap = root.pendingInteractionMap;
          pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
            if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
              pendingInteractionMap.delete(lane);
              scheduledInteractions.forEach(function (interaction) {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error) {
                    scheduleCallback(ImmediatePriority$1, function () {
                      throw error;
                    });
                  }
                }
              });
            }
          });
        }
      }

      function shouldForceFlushFallbacksInDEV() {
        return actingUpdatesScopeDepth > 0;
      }

      var actingUpdatesScopeDepth = 0;

      function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
      }

      var resolveFamily = null;
      var failedBoundaries = null;

      var setRefreshHandler = function setRefreshHandler(handler) {
        {
          resolveFamily = handler;
        }
      };

      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }

          var family = resolveFamily(type);

          if (family === undefined) {
            return type;
          }

          return family.current;
        }
      }

      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }

      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }

          var family = resolveFamily(type);

          if (family === undefined) {
            if (type !== null && type !== undefined && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);

              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };

                if (type.displayName !== undefined) {
                  syntheticType.displayName = type.displayName;
                }

                return syntheticType;
              }
            }

            return type;
          }

          return family.current;
        }
      }

      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }

          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;

          switch (fiber.tag) {
            case ClassComponent:
              {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }

                break;
              }

            case FunctionComponent:
              {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            case ForwardRef:
              {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            case MemoComponent:
            case SimpleMemoComponent:
              {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            default:
              return false;
          }

          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);

            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }

          return false;
        }
      }

      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }

          if (typeof WeakSet !== "function") {
            return;
          }

          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet();
          }

          failedBoundaries.add(fiber);
        }
      }

      var scheduleRefresh = function scheduleRefresh(root, update) {
        {
          if (resolveFamily === null) {
            return;
          }

          var staleFamilies = update.staleFamilies,
              updatedFamilies = update.updatedFamilies;
          flushPassiveEffects();
          flushSync(function () {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
          });
        }
      };

      var scheduleRoot = function scheduleRoot(root, element) {
        {
          if (root.context !== emptyContextObject) {
            return;
          }

          flushPassiveEffects();
          flushSync(function () {
            updateContainer(element, root, null, null);
          });
        }
      };

      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate,
              child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
          var candidateType = null;

          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;

            case ForwardRef:
              candidateType = type.render;
              break;
          }

          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }

          var needsRender = false;
          var needsRemount = false;

          if (candidateType !== null) {
            var family = resolveFamily(candidateType);

            if (family !== undefined) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }

          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }

          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }

          if (needsRemount || needsRender) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }

          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }

          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }

      var findHostInstancesForRefresh = function findHostInstancesForRefresh(root, families) {
        {
          var hostInstances = new Set();
          var types = new Set(families.map(function (family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
          return hostInstances;
        }
      };

      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
          var candidateType = null;

          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;

            case ForwardRef:
              candidateType = type.render;
              break;
          }

          var didMatch = false;

          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }

          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }

          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }

      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

          if (foundHostInstances) {
            return;
          }

          var node = fiber;

          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;

              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;

              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }

            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }

            node = node.return;
          }
        }
      }

      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;

          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === fiber) {
              return foundHostInstances;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }

      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;

        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      var debugCounter = 1;

      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugID = debugCounter++;
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;

          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }

      var createFiber = function createFiber(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };

      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }

      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === undefined;
      }

      function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") {
          return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
        } else if (Component !== undefined && Component !== null) {
          var $$typeof = Component.$$typeof;

          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }

          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }

        return IndeterminateComponent;
      }

      function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;

        if (workInProgress === null) {
          workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
          workInProgress.elementType = current.elementType;
          workInProgress.type = current.type;
          workInProgress.stateNode = current.stateNode;
          {
            workInProgress._debugID = current._debugID;
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
          }
          workInProgress.alternate = current;
          current.alternate = workInProgress;
        } else {
          workInProgress.pendingProps = pendingProps;
          workInProgress.type = current.type;
          workInProgress.flags = NoFlags;
          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
          {
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
          }
        }

        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        {
          workInProgress.selfBaseDuration = current.selfBaseDuration;
          workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        {
          workInProgress._debugNeedsRemount = current._debugNeedsRemount;

          switch (workInProgress.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress.type = resolveFunctionForHotReloading(current.type);
              break;

            case ClassComponent:
              workInProgress.type = resolveClassForHotReloading(current.type);
              break;

            case ForwardRef:
              workInProgress.type = resolveForwardRefForHotReloading(current.type);
              break;
          }
        }
        return workInProgress;
      }

      function resetWorkInProgress(workInProgress, renderLanes) {
        workInProgress.flags &= Placement;
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
        var current = workInProgress.alternate;

        if (current === null) {
          workInProgress.childLanes = NoLanes;
          workInProgress.lanes = renderLanes;
          workInProgress.child = null;
          workInProgress.memoizedProps = null;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          workInProgress.dependencies = null;
          workInProgress.stateNode = null;
          {
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
          }
        } else {
          workInProgress.childLanes = current.childLanes;
          workInProgress.lanes = current.lanes;
          workInProgress.child = current.child;
          workInProgress.memoizedProps = current.memoizedProps;
          workInProgress.memoizedState = current.memoizedState;
          workInProgress.updateQueue = current.updateQueue;
          workInProgress.type = current.type;
          var currentDependencies = current.dependencies;
          workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
          }
        }

        return workInProgress;
      }

      function createHostRootFiber(tag) {
        var mode;

        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode | BlockingMode | StrictMode;
        } else if (tag === BlockingRoot) {
          mode = BlockingMode | StrictMode;
        } else {
          mode = NoMode;
        }

        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }

        return createFiber(HostRoot, null, null, mode);
      }

      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;

        if (typeof type === "function") {
          if (shouldConstruct(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag: switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, lanes, key);

            case REACT_DEBUG_TRACING_MODE_TYPE:
              fiberTag = Mode;
              mode |= DebugTracingMode;
              break;

            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictMode;
              break;

            case REACT_PROFILER_TYPE:
              return createFiberFromProfiler(pendingProps, mode, lanes, key);

            case REACT_SUSPENSE_TYPE:
              return createFiberFromSuspense(pendingProps, mode, lanes, key);

            case REACT_SUSPENSE_LIST_TYPE:
              return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

            case REACT_OFFSCREEN_TYPE:
              return createFiberFromOffscreen(pendingProps, mode, lanes, key);

            case REACT_LEGACY_HIDDEN_TYPE:
              return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);

            case REACT_SCOPE_TYPE:
            default:
              {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;

                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;

                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;

                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;

                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;

                    case REACT_BLOCK_TYPE:
                      fiberTag = Block;
                      break getTag;
                  }
                }

                var info = "";
                {
                  if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and " + "named imports.";
                  }

                  var ownerName = owner ? getComponentName(owner.type) : null;

                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                {
                  throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                }
              }
          }
        }

        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }

      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }

      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" as a prop');
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }

      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        {
          fiber.type = REACT_SUSPENSE_LIST_TYPE;
        }
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        {
          fiber.type = REACT_OFFSCREEN_TYPE;
        }
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
        {
          fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        }
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }

      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }

        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }

      function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        {
          this.interactionThreadID = tracing.unstable_getThreadID();
          this.memoizedInteractions = new Set();
          this.pendingInteractionMap = new Map();
        }
        {
          switch (tag) {
            case BlockingRoot:
              this._debugRootType = "createBlockingRoot()";
              break;

            case ConcurrentRoot:
              this._debugRootType = "createRoot()";
              break;

            case LegacyRoot:
              this._debugRootType = "createLegacyRoot()";
              break;
          }
        }
      }

      function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate);
        var uninitializedFiber = createHostRootFiber(tag);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        initializeUpdateQueue(uninitializedFiber);
        return root;
      }

      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children: children,
          containerInfo: containerInfo,
          implementation: implementation
        };
      }

      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }

      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }

        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);

        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;

          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext);
          }
        }

        return parentContext;
      }

      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);

          if (fiber === undefined) {
            if (typeof component.render === "function") {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            } else {
              {
                throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
              }
            }
          }

          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || "Component";

            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;

              try {
                setCurrentFiber(hostFiber);

                if (fiber.mode & StrictMode) {
                  error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which is inside StrictMode. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which renders StrictMode children. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }

          return hostFiber.stateNode;
        }
      }

      function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
      }

      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var eventTime = requestEventTime();
        {
          if ("undefined" !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
          }
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);

        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }

        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(current.type) || "Unknown");
          }
        }
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element: element
        };
        callback = callback === undefined ? null : callback;

        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }

        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
      }

      function getPublicRootInstance(container) {
        var containerFiber = container.current;

        if (!containerFiber.child) {
          return null;
        }

        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);

          default:
            return containerFiber.child.stateNode;
        }
      }

      var shouldSuspendImpl = function shouldSuspendImpl(fiber) {
        return false;
      };

      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }

      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function copyWithDeleteImpl(obj, path, index) {
          var key = path[index];
          var updated = Array.isArray(obj) ? obj.slice() : _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, obj);

          if (index + 1 === path.length) {
            if (Array.isArray(updated)) {
              updated.splice(key, 1);
            } else {
              delete updated[key];
            }

            return updated;
          }

          updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
          return updated;
        };

        var copyWithDelete = function copyWithDelete(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        };

        var copyWithRenameImpl = function copyWithRenameImpl(obj, oldPath, newPath, index) {
          var oldKey = oldPath[index];
          var updated = Array.isArray(obj) ? obj.slice() : _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, obj);

          if (index + 1 === oldPath.length) {
            var newKey = newPath[index];
            updated[newKey] = updated[oldKey];

            if (Array.isArray(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
          }

          return updated;
        };

        var copyWithRename = function copyWithRename(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i = 0; i < newPath.length - 1; i++) {
              if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }

          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };

        var copyWithSetImpl = function copyWithSetImpl(obj, path, index, value) {
          if (index >= path.length) {
            return value;
          }

          var key = path[index];
          var updated = Array.isArray(obj) ? obj.slice() : _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
          return updated;
        };

        var copyWithSet = function copyWithSet(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };

        var findHook = function findHook(fiber, id) {
          var currentHook = fiber.memoizedState;

          while (currentHook !== null && id > 0) {
            currentHook = currentHook.next;
            id--;
          }

          return currentHook;
        };

        overrideHookState = function overrideHookState(fiber, id, path, value) {
          var hook = findHook(fiber, id);

          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };

        overrideHookStateDeletePath = function overrideHookStateDeletePath(fiber, id, path) {
          var hook = findHook(fiber, id);

          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };

        overrideHookStateRenamePath = function overrideHookStateRenamePath(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);

          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };

        overrideProps = function overrideProps(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }

          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };

        overridePropsDeletePath = function overridePropsDeletePath(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }

          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };

        overridePropsRenamePath = function overridePropsRenamePath(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }

          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };

        scheduleUpdate = function scheduleUpdate(fiber) {
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };

        setSuspenseHandler = function setSuspenseHandler(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }

      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);

        if (hostFiber === null) {
          return null;
        }

        return hostFiber.stateNode;
      }

      function emptyFindFiberByHostInstance(instance) {
        return null;
      }

      function getCurrentFiberForDevTools() {
        return current;
      }

      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState: overrideHookState,
          overrideHookStateDeletePath: overrideHookStateDeletePath,
          overrideHookStateRenamePath: overrideHookStateRenamePath,
          overrideProps: overrideProps,
          overridePropsDeletePath: overridePropsDeletePath,
          overridePropsRenamePath: overridePropsRenamePath,
          setSuspenseHandler: setSuspenseHandler,
          scheduleUpdate: scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher,
          findHostInstanceByFiber: findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh: findHostInstancesForRefresh,
          scheduleRefresh: scheduleRefresh,
          scheduleRoot: scheduleRoot,
          setRefreshHandler: setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools
        });
      }

      var emptyObject$1 = {};
      {
        Object.freeze(emptyObject$1);
      }
      var getInspectorDataForViewTag;
      var getInspectorDataForViewAtPoint;
      {
        var traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
          if (instance) {
            hierarchy.unshift(instance);
            traverseOwnerTreeUp(hierarchy, instance._debugOwner);
          }
        };

        var getOwnerHierarchy = function getOwnerHierarchy(instance) {
          var hierarchy = [];
          traverseOwnerTreeUp(hierarchy, instance);
          return hierarchy;
        };

        var lastNonHostInstance = function lastNonHostInstance(hierarchy) {
          for (var i = hierarchy.length - 1; i > 1; i--) {
            var instance = hierarchy[i];

            if (instance.tag !== HostComponent) {
              return instance;
            }
          }

          return hierarchy[0];
        };

        var getHostProps = function getHostProps(fiber) {
          var host = findCurrentHostFiber(fiber);

          if (host) {
            return host.memoizedProps || emptyObject$1;
          }

          return emptyObject$1;
        };

        var getHostNode = function getHostNode(fiber, findNodeHandle) {
          var hostNode;

          while (fiber) {
            if (fiber.stateNode !== null && fiber.tag === HostComponent) {
              hostNode = findNodeHandle(fiber.stateNode);
            }

            if (hostNode) {
              return hostNode;
            }

            fiber = fiber.child;
          }

          return null;
        };

        var createHierarchy = function createHierarchy(fiberHierarchy) {
          return fiberHierarchy.map(function (fiber) {
            return {
              name: getComponentName(fiber.type),
              getInspectorData: function getInspectorData(findNodeHandle) {
                return {
                  props: getHostProps(fiber),
                  source: fiber._debugSource,
                  measure: function measure(callback) {
                    var hostFiber = findCurrentHostFiber(fiber);
                    var shadowNode = hostFiber != null && hostFiber.stateNode !== null && hostFiber.stateNode.node;

                    if (shadowNode) {
                      nativeFabricUIManager.measure(shadowNode, callback);
                    } else {
                      return ReactNativePrivateInterface.UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                    }
                  }
                };
              }
            };
          });
        };

        var getInspectorDataForInstance = function getInspectorDataForInstance(closestInstance) {
          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject$1,
              selectedIndex: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selectedIndex = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selectedIndex: selectedIndex,
            source: source
          };
        };

        getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
          var closestInstance = getInstanceFromTag(viewTag);

          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject$1,
              selectedIndex: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selectedIndex = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selectedIndex: selectedIndex,
            source: source
          };
        };

        getInspectorDataForViewAtPoint = function getInspectorDataForViewAtPoint(findNodeHandle, inspectedView, locationX, locationY, callback) {
          var closestInstance = null;

          if (inspectedView._internalInstanceHandle != null) {
            nativeFabricUIManager.findNodeAtPoint(inspectedView._internalInstanceHandle.stateNode.node, locationX, locationY, function (internalInstanceHandle) {
              if (internalInstanceHandle == null) {
                callback(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({
                  pointerY: locationY,
                  frame: {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                  }
                }, getInspectorDataForInstance(closestInstance)));
              }

              closestInstance = internalInstanceHandle.stateNode.canonical._internalInstanceHandle;
              nativeFabricUIManager.measure(internalInstanceHandle.stateNode.node, function (x, y, width, height, pageX, pageY) {
                callback(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({
                  pointerY: locationY,
                  frame: {
                    left: pageX,
                    top: pageY,
                    width: width,
                    height: height
                  }
                }, getInspectorDataForInstance(closestInstance)));
              });
            });
          } else if (inspectedView._internalFiberInstanceHandleDEV != null) {
            ReactNativePrivateInterface.UIManager.findSubviewIn(findNodeHandle(inspectedView), [locationX, locationY], function (nativeViewTag, left, top, width, height) {
              var inspectorData = getInspectorDataForInstance(getInstanceFromTag(nativeViewTag));
              callback(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, inspectorData, {
                pointerY: locationY,
                frame: {
                  left: left,
                  top: top,
                  width: width,
                  height: height
                },
                touchedViewTag: nativeViewTag
              }));
            });
          } else {
            error("getInspectorDataForViewAtPoint expects to receive a host component");
            return;
          }
        };
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

      function findHostInstance_DEPRECATED(componentOrHandle) {
        {
          var owner = ReactCurrentOwner$3.current;

          if (owner !== null && owner.stateNode !== null) {
            if (!owner.stateNode._warnedAboutRefsInRender) {
              error("%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner.type) || "A component");
            }

            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (componentOrHandle._nativeTag) {
          return componentOrHandle;
        }

        if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {
          return componentOrHandle.canonical;
        }

        var hostInstance;
        {
          hostInstance = findHostInstanceWithWarning(componentOrHandle, "findHostInstance_DEPRECATED");
        }

        if (hostInstance == null) {
          return hostInstance;
        }

        if (hostInstance.canonical) {
          return hostInstance.canonical;
        }

        return hostInstance;
      }

      function findNodeHandle(componentOrHandle) {
        {
          var owner = ReactCurrentOwner$3.current;

          if (owner !== null && owner.stateNode !== null) {
            if (!owner.stateNode._warnedAboutRefsInRender) {
              error("%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner.type) || "A component");
            }

            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (typeof componentOrHandle === "number") {
          return componentOrHandle;
        }

        if (componentOrHandle._nativeTag) {
          return componentOrHandle._nativeTag;
        }

        if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {
          return componentOrHandle.canonical._nativeTag;
        }

        var hostInstance;
        {
          hostInstance = findHostInstanceWithWarning(componentOrHandle, "findNodeHandle");
        }

        if (hostInstance == null) {
          return hostInstance;
        }

        if (hostInstance.canonical) {
          return hostInstance.canonical._nativeTag;
        }

        return hostInstance._nativeTag;
      }

      function dispatchCommand(handle, command, args) {
        if (handle._nativeTag == null) {
          {
            error("dispatchCommand was called with a ref that isn't a " + "native component. Use React.forwardRef to get access to the underlying native component");
          }
          return;
        }

        if (handle._internalInstanceHandle) {
          nativeFabricUIManager.dispatchCommand(handle._internalInstanceHandle.stateNode.node, command, args);
        } else {
          ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args);
        }
      }

      function render(element, containerTag, callback) {
        var root = roots.get(containerTag);

        if (!root) {
          root = createContainer(containerTag, LegacyRoot, false);
          roots.set(containerTag, root);
        }

        updateContainer(element, root, null, callback);
        return getPublicRootInstance(root);
      }

      function unmountComponentAtNode(containerTag) {
        var root = roots.get(containerTag);

        if (root) {
          updateContainer(null, root, null, function () {
            roots.delete(containerTag);
          });
        }
      }

      function unmountComponentAtNodeAndRemoveContainer(containerTag) {
        unmountComponentAtNode(containerTag);
        ReactNativePrivateInterface.UIManager.removeRootView(containerTag);
      }

      function createPortal$1(children, containerTag) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        return createPortal(children, containerTag, null, key);
      }

      setBatchingImplementation(batchedUpdates$1);

      function computeComponentStackForErrorReporting(reactTag) {
        var fiber = getInstanceFromTag(reactTag);

        if (!fiber) {
          return "";
        }

        return getStackByFiberInDevAndProd(fiber);
      }

      var roots = new Map();
      var Internals = {
        computeComponentStackForErrorReporting: computeComponentStackForErrorReporting
      };
      injectIntoDevTools({
        findFiberByHostInstance: getInstanceFromTag,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-native-renderer",
        rendererConfig: {
          getInspectorDataForViewTag: getInspectorDataForViewTag,
          getInspectorDataForViewAtPoint: getInspectorDataForViewAtPoint.bind(null, findNodeHandle)
        }
      });
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      exports.createPortal = createPortal$1;
      exports.dispatchCommand = dispatchCommand;
      exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
      exports.findNodeHandle = findNodeHandle;
      exports.render = render;
      exports.unmountComponentAtNode = unmountComponentAtNode;
      exports.unmountComponentAtNodeAndRemoveContainer = unmountComponentAtNodeAndRemoveContainer;
      exports.unstable_batchedUpdates = batchedUpdates;
    })();
  }
},396,[1,72,55,135,437,4],"node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var rejectionTrackingOptions = {
    allRejections: true,
    onUnhandled: function onUnhandled(id) {
      var _message;

      var rejection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var message;
      var stack;
      var stringValue = Object.prototype.toString.call(rejection);

      if (stringValue === '[object Error]') {
        message = Error.prototype.toString.call(rejection);
        var error = rejection;
        stack = error.stack;
      } else {
        try {
          message = _$$_REQUIRE(_dependencyMap[0], "pretty-format")(rejection);
        } catch (_unused) {
          message = typeof rejection === 'string' ? rejection : JSON.stringify(rejection);
        }
      }

      var warning = "Possible Unhandled Promise Rejection (id: " + id + "):\n" + (((_message = message) != null ? _message : '') + "\n") + (stack == null ? '' : stack);
      console.warn(warning);
    },
    onHandled: function onHandled(id) {
      var warning = "Promise Rejection Handled (id: " + id + ")\n" + 'This means you can ignore any previous messages of the form ' + ("\"Possible Unhandled Promise Rejection (id: " + id + "):\"");
      console.warn(warning);
    }
  };
  var _default = rejectionTrackingOptions;
  exports.default = _default;
},397,[398],"node_modules/react-native/Libraries/promiseRejectionTrackingOptions.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var _ansiStyles = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], "ansi-styles"));

  var _AsymmetricMatcher = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], "./plugins/AsymmetricMatcher"));

  var _ConvertAnsi = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], "./plugins/ConvertAnsi"));

  var _DOMCollection = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], "./plugins/DOMCollection"));

  var _DOMElement = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], "./plugins/DOMElement"));

  var _Immutable = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], "./plugins/Immutable"));

  var _ReactElement = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], "./plugins/ReactElement"));

  var _ReactTestComponent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], "./plugins/ReactTestComponent"));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var toString = Object.prototype.toString;
  var toISOString = Date.prototype.toISOString;
  var errorToString = Error.prototype.toString;
  var regExpToString = RegExp.prototype.toString;

  var getConstructorName = function getConstructorName(val) {
    return typeof val.constructor === 'function' && val.constructor.name || 'Object';
  };

  var isWindow = function isWindow(val) {
    return typeof window !== 'undefined' && val === window;
  };

  var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
  var NEWLINE_REGEXP = /\n/gi;

  var PrettyFormatPluginError = function (_Error) {
    _$$_REQUIRE(_dependencyMap[10], "@babel/runtime/helpers/inherits")(PrettyFormatPluginError, _Error);

    var _super = _createSuper(PrettyFormatPluginError);

    function PrettyFormatPluginError(message, stack) {
      var _this;

      _$$_REQUIRE(_dependencyMap[11], "@babel/runtime/helpers/classCallCheck")(this, PrettyFormatPluginError);

      _this = _super.call(this, message);
      _this.stack = stack;
      _this.name = _this.constructor.name;
      return _this;
    }

    return PrettyFormatPluginError;
  }(_$$_REQUIRE(_dependencyMap[12], "@babel/runtime/helpers/wrapNativeSuper")(Error));

  function isToStringedArrayType(toStringed) {
    return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
  }

  function printNumber(val) {
    return Object.is(val, -0) ? '-0' : String(val);
  }

  function printBigInt(val) {
    return String(val + "n");
  }

  function printFunction(val, printFunctionName) {
    if (!printFunctionName) {
      return '[Function]';
    }

    return '[Function ' + (val.name || 'anonymous') + ']';
  }

  function printSymbol(val) {
    return String(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
  }

  function printError(val) {
    return '[' + errorToString.call(val) + ']';
  }

  function printBasicValue(val, printFunctionName, escapeRegex, escapeString) {
    if (val === true || val === false) {
      return '' + val;
    }

    if (val === undefined) {
      return 'undefined';
    }

    if (val === null) {
      return 'null';
    }

    var typeOf = typeof val;

    if (typeOf === 'number') {
      return printNumber(val);
    }

    if (typeOf === 'bigint') {
      return printBigInt(val);
    }

    if (typeOf === 'string') {
      if (escapeString) {
        return '"' + val.replace(/"|\\/g, '\\$&') + '"';
      }

      return '"' + val + '"';
    }

    if (typeOf === 'function') {
      return printFunction(val, printFunctionName);
    }

    if (typeOf === 'symbol') {
      return printSymbol(val);
    }

    var toStringed = toString.call(val);

    if (toStringed === '[object WeakMap]') {
      return 'WeakMap {}';
    }

    if (toStringed === '[object WeakSet]') {
      return 'WeakSet {}';
    }

    if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') {
      return printFunction(val, printFunctionName);
    }

    if (toStringed === '[object Symbol]') {
      return printSymbol(val);
    }

    if (toStringed === '[object Date]') {
      return isNaN(+val) ? 'Date { NaN }' : toISOString.call(val);
    }

    if (toStringed === '[object Error]') {
      return printError(val);
    }

    if (toStringed === '[object RegExp]') {
      if (escapeRegex) {
        return regExpToString.call(val).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
      }

      return regExpToString.call(val);
    }

    if (val instanceof Error) {
      return printError(val);
    }

    return null;
  }

  function printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON) {
    if (refs.indexOf(val) !== -1) {
      return '[Circular]';
    }

    refs = refs.slice();
    refs.push(val);
    var hitMaxDepth = ++depth > config.maxDepth;
    var min = config.min;

    if (config.callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function' && !hasCalledToJSON) {
      return printer(val.toJSON(), config, indentation, depth, refs, true);
    }

    var toStringed = toString.call(val);

    if (toStringed === '[object Arguments]') {
      return hitMaxDepth ? '[Arguments]' : (min ? '' : 'Arguments ') + '[' + (0, _$$_REQUIRE(_dependencyMap[13], "./collections").printListItems)(val, config, indentation, depth, refs, printer) + ']';
    }

    if (isToStringedArrayType(toStringed)) {
      return hitMaxDepth ? '[' + val.constructor.name + ']' : (min ? '' : val.constructor.name + ' ') + '[' + (0, _$$_REQUIRE(_dependencyMap[13], "./collections").printListItems)(val, config, indentation, depth, refs, printer) + ']';
    }

    if (toStringed === '[object Map]') {
      return hitMaxDepth ? '[Map]' : 'Map {' + (0, _$$_REQUIRE(_dependencyMap[13], "./collections").printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer, ' => ') + '}';
    }

    if (toStringed === '[object Set]') {
      return hitMaxDepth ? '[Set]' : 'Set {' + (0, _$$_REQUIRE(_dependencyMap[13], "./collections").printIteratorValues)(val.values(), config, indentation, depth, refs, printer) + '}';
    }

    return hitMaxDepth || isWindow(val) ? '[' + getConstructorName(val) + ']' : (min ? '' : getConstructorName(val) + ' ') + '{' + (0, _$$_REQUIRE(_dependencyMap[13], "./collections").printObjectProperties)(val, config, indentation, depth, refs, printer) + '}';
  }

  function isNewPlugin(plugin) {
    return plugin.serialize != null;
  }

  function printPlugin(plugin, val, config, indentation, depth, refs) {
    var printed;

    try {
      printed = isNewPlugin(plugin) ? plugin.serialize(val, config, indentation, depth, refs, printer) : plugin.print(val, function (valChild) {
        return printer(valChild, config, indentation, depth, refs);
      }, function (str) {
        var indentationNext = indentation + config.indent;
        return indentationNext + str.replace(NEWLINE_REGEXP, '\n' + indentationNext);
      }, {
        edgeSpacing: config.spacingOuter,
        min: config.min,
        spacing: config.spacingInner
      }, config.colors);
    } catch (error) {
      throw new PrettyFormatPluginError(error.message, error.stack);
    }

    if (typeof printed !== 'string') {
      throw new Error("pretty-format: Plugin must return type \"string\" but instead returned \"" + typeof printed + "\".");
    }

    return printed;
  }

  function findPlugin(plugins, val) {
    for (var p = 0; p < plugins.length; p++) {
      try {
        if (plugins[p].test(val)) {
          return plugins[p];
        }
      } catch (error) {
        throw new PrettyFormatPluginError(error.message, error.stack);
      }
    }

    return null;
  }

  function printer(val, config, indentation, depth, refs, hasCalledToJSON) {
    var plugin = findPlugin(config.plugins, val);

    if (plugin !== null) {
      return printPlugin(plugin, val, config, indentation, depth, refs);
    }

    var basicResult = printBasicValue(val, config.printFunctionName, config.escapeRegex, config.escapeString);

    if (basicResult !== null) {
      return basicResult;
    }

    return printComplexValue(val, config, indentation, depth, refs, hasCalledToJSON);
  }

  var DEFAULT_THEME = {
    comment: 'gray',
    content: 'reset',
    prop: 'yellow',
    tag: 'cyan',
    value: 'green'
  };
  var DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);
  var DEFAULT_OPTIONS = {
    callToJSON: true,
    escapeRegex: false,
    escapeString: true,
    highlight: false,
    indent: 2,
    maxDepth: Infinity,
    min: false,
    plugins: [],
    printFunctionName: true,
    theme: DEFAULT_THEME
  };

  function validateOptions(options) {
    Object.keys(options).forEach(function (key) {
      if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
        throw new Error("pretty-format: Unknown option \"" + key + "\".");
      }
    });

    if (options.min && options.indent !== undefined && options.indent !== 0) {
      throw new Error('pretty-format: Options "min" and "indent" cannot be used together.');
    }

    if (options.theme !== undefined) {
      if (options.theme === null) {
        throw new Error("pretty-format: Option \"theme\" must not be null.");
      }

      if (typeof options.theme !== 'object') {
        throw new Error("pretty-format: Option \"theme\" must be of type \"object\" but instead received \"" + typeof options.theme + "\".");
      }
    }
  }

  var getColorsHighlight = function getColorsHighlight(options) {
    return DEFAULT_THEME_KEYS.reduce(function (colors, key) {
      var value = options.theme && options.theme[key] !== undefined ? options.theme[key] : DEFAULT_THEME[key];
      var color = value && _ansiStyles.default[value];

      if (color && typeof color.close === 'string' && typeof color.open === 'string') {
        colors[key] = color;
      } else {
        throw new Error("pretty-format: Option \"theme\" has a key \"" + key + "\" whose value \"" + value + "\" is undefined in ansi-styles.");
      }

      return colors;
    }, Object.create(null));
  };

  var getColorsEmpty = function getColorsEmpty() {
    return DEFAULT_THEME_KEYS.reduce(function (colors, key) {
      colors[key] = {
        close: '',
        open: ''
      };
      return colors;
    }, Object.create(null));
  };

  var getPrintFunctionName = function getPrintFunctionName(options) {
    return options && options.printFunctionName !== undefined ? options.printFunctionName : DEFAULT_OPTIONS.printFunctionName;
  };

  var getEscapeRegex = function getEscapeRegex(options) {
    return options && options.escapeRegex !== undefined ? options.escapeRegex : DEFAULT_OPTIONS.escapeRegex;
  };

  var getEscapeString = function getEscapeString(options) {
    return options && options.escapeString !== undefined ? options.escapeString : DEFAULT_OPTIONS.escapeString;
  };

  var getConfig = function getConfig(options) {
    return {
      callToJSON: options && options.callToJSON !== undefined ? options.callToJSON : DEFAULT_OPTIONS.callToJSON,
      colors: options && options.highlight ? getColorsHighlight(options) : getColorsEmpty(),
      escapeRegex: getEscapeRegex(options),
      escapeString: getEscapeString(options),
      indent: options && options.min ? '' : createIndent(options && options.indent !== undefined ? options.indent : DEFAULT_OPTIONS.indent),
      maxDepth: options && options.maxDepth !== undefined ? options.maxDepth : DEFAULT_OPTIONS.maxDepth,
      min: options && options.min !== undefined ? options.min : DEFAULT_OPTIONS.min,
      plugins: options && options.plugins !== undefined ? options.plugins : DEFAULT_OPTIONS.plugins,
      printFunctionName: getPrintFunctionName(options),
      spacingInner: options && options.min ? ' ' : '\n',
      spacingOuter: options && options.min ? '' : '\n'
    };
  };

  function createIndent(indent) {
    return new Array(indent + 1).join(' ');
  }

  function prettyFormat(val, options) {
    if (options) {
      validateOptions(options);

      if (options.plugins) {
        var plugin = findPlugin(options.plugins, val);

        if (plugin !== null) {
          return printPlugin(plugin, val, getConfig(options), '', 0, []);
        }
      }
    }

    var basicResult = printBasicValue(val, getPrintFunctionName(options), getEscapeRegex(options), getEscapeString(options));

    if (basicResult !== null) {
      return basicResult;
    }

    return printComplexValue(val, getConfig(options), '', 0, []);
  }

  prettyFormat.plugins = {
    AsymmetricMatcher: _AsymmetricMatcher.default,
    ConvertAnsi: _ConvertAnsi.default,
    DOMCollection: _DOMCollection.default,
    DOMElement: _DOMElement.default,
    Immutable: _Immutable.default,
    ReactElement: _ReactElement.default,
    ReactTestComponent: _ReactTestComponent.default
  };
  module.exports = prettyFormat;
},398,[13,16,399,404,406,408,409,412,413,417,14,9,57,405],"node_modules/pretty-format/build/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var wrapAnsi16 = function wrapAnsi16(fn, offset) {
    return function () {
      var code = fn.apply(void 0, arguments);
      return "\x1B[" + (code + offset) + "m";
    };
  };

  var wrapAnsi256 = function wrapAnsi256(fn, offset) {
    return function () {
      var code = fn.apply(void 0, arguments);
      return "\x1B[" + (38 + offset) + ";5;" + code + "m";
    };
  };

  var wrapAnsi16m = function wrapAnsi16m(fn, offset) {
    return function () {
      var rgb = fn.apply(void 0, arguments);
      return "\x1B[" + (38 + offset) + ";2;" + rgb[0] + ";" + rgb[1] + ";" + rgb[2] + "m";
    };
  };

  var ansi2ansi = function ansi2ansi(n) {
    return n;
  };

  var rgb2rgb = function rgb2rgb(r, g, b) {
    return [r, g, b];
  };

  var setLazyProperty = function setLazyProperty(object, property, _get) {
    Object.defineProperty(object, property, {
      get: function get() {
        var value = _get();

        Object.defineProperty(object, property, {
          value: value,
          enumerable: true,
          configurable: true
        });
        return value;
      },
      enumerable: true,
      configurable: true
    });
  };

  var colorConvert;

  var makeDynamicStyles = function makeDynamicStyles(wrap, targetSpace, identity, isBackground) {
    if (colorConvert === undefined) {
      colorConvert = _$$_REQUIRE(_dependencyMap[0], "color-convert");
    }

    var offset = isBackground ? 10 : 0;
    var styles = {};

    for (var _i = 0, _Object$entries = Object.entries(colorConvert); _i < _Object$entries.length; _i++) {
      var _ref = _Object$entries[_i];

      var _ref2 = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray")(_ref, 2);

      var sourceSpace = _ref2[0];
      var suite = _ref2[1];
      var name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;

      if (sourceSpace === targetSpace) {
        styles[name] = wrap(identity, offset);
      } else if (typeof suite === 'object') {
        styles[name] = wrap(suite[targetSpace], offset);
      }
    }

    return styles;
  };

  function assembleStyles() {
    var codes = new Map();
    var styles = {
      modifier: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        blackBright: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles.color.gray = styles.color.blackBright;
    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
    styles.color.grey = styles.color.blackBright;
    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;

    for (var _i2 = 0, _Object$entries2 = Object.entries(styles); _i2 < _Object$entries2.length; _i2++) {
      var _ref3 = _Object$entries2[_i2];

      var _ref4 = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray")(_ref3, 2);

      var groupName = _ref4[0];
      var group = _ref4[1];

      for (var _i3 = 0, _Object$entries3 = Object.entries(group); _i3 < _Object$entries3.length; _i3++) {
        var _ref5 = _Object$entries3[_i3];

        var _ref6 = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray")(_ref5, 2);

        var styleName = _ref6[0];
        var style = _ref6[1];
        styles[styleName] = {
          open: "\x1B[" + style[0] + "m",
          close: "\x1B[" + style[1] + "m"
        };
        group[styleName] = styles[styleName];
        codes.set(style[0], style[1]);
      }

      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
    }

    Object.defineProperty(styles, 'codes', {
      value: codes,
      enumerable: false
    });
    styles.color.close = "\x1B[39m";
    styles.bgColor.close = "\x1B[49m";
    setLazyProperty(styles.color, 'ansi', function () {
      return makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false);
    });
    setLazyProperty(styles.color, 'ansi256', function () {
      return makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false);
    });
    setLazyProperty(styles.color, 'ansi16m', function () {
      return makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false);
    });
    setLazyProperty(styles.bgColor, 'ansi', function () {
      return makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true);
    });
    setLazyProperty(styles.bgColor, 'ansi256', function () {
      return makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true);
    });
    setLazyProperty(styles.bgColor, 'ansi16m', function () {
      return makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true);
    });
    return styles;
  }

  Object.defineProperty(module, 'exports', {
    enumerable: true,
    get: assembleStyles
  });
},399,[400,31],"node_modules/ansi-styles/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var convert = {};
  var models = Object.keys(_$$_REQUIRE(_dependencyMap[0], "./conversions"));

  function wrapRaw(fn) {
    var wrappedFn = function wrappedFn() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var arg0 = args[0];

      if (arg0 === undefined || arg0 === null) {
        return arg0;
      }

      if (arg0.length > 1) {
        args = arg0;
      }

      return fn(args);
    };

    if ('conversion' in fn) {
      wrappedFn.conversion = fn.conversion;
    }

    return wrappedFn;
  }

  function wrapRounded(fn) {
    var wrappedFn = function wrappedFn() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var arg0 = args[0];

      if (arg0 === undefined || arg0 === null) {
        return arg0;
      }

      if (arg0.length > 1) {
        args = arg0;
      }

      var result = fn(args);

      if (typeof result === 'object') {
        for (var len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }

      return result;
    };

    if ('conversion' in fn) {
      wrappedFn.conversion = fn.conversion;
    }

    return wrappedFn;
  }

  models.forEach(function (fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], 'channels', {
      value: _$$_REQUIRE(_dependencyMap[0], "./conversions")[fromModel].channels
    });
    Object.defineProperty(convert[fromModel], 'labels', {
      value: _$$_REQUIRE(_dependencyMap[0], "./conversions")[fromModel].labels
    });

    var routes = _$$_REQUIRE(_dependencyMap[1], "./route")(fromModel);

    var routeModels = Object.keys(routes);
    routeModels.forEach(function (toModel) {
      var fn = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  module.exports = convert;
},400,[401,403],"node_modules/color-convert/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  var reverseKeywords = {};

  for (var _i = 0, _Object$keys = Object.keys(_$$_REQUIRE(_dependencyMap[0], "color-name")); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    reverseKeywords[_$$_REQUIRE(_dependencyMap[0], "color-name")[key]] = key;
  }

  var convert = {
    rgb: {
      channels: 3,
      labels: 'rgb'
    },
    hsl: {
      channels: 3,
      labels: 'hsl'
    },
    hsv: {
      channels: 3,
      labels: 'hsv'
    },
    hwb: {
      channels: 3,
      labels: 'hwb'
    },
    cmyk: {
      channels: 4,
      labels: 'cmyk'
    },
    xyz: {
      channels: 3,
      labels: 'xyz'
    },
    lab: {
      channels: 3,
      labels: 'lab'
    },
    lch: {
      channels: 3,
      labels: 'lch'
    },
    hex: {
      channels: 1,
      labels: ['hex']
    },
    keyword: {
      channels: 1,
      labels: ['keyword']
    },
    ansi16: {
      channels: 1,
      labels: ['ansi16']
    },
    ansi256: {
      channels: 1,
      labels: ['ansi256']
    },
    hcg: {
      channels: 3,
      labels: ['h', 'c', 'g']
    },
    apple: {
      channels: 3,
      labels: ['r16', 'g16', 'b16']
    },
    gray: {
      channels: 1,
      labels: ['gray']
    }
  };
  module.exports = convert;

  for (var _i2 = 0, _Object$keys2 = Object.keys(convert); _i2 < _Object$keys2.length; _i2++) {
    var model = _Object$keys2[_i2];

    if (!('channels' in convert[model])) {
      throw new Error('missing channels property: ' + model);
    }

    if (!('labels' in convert[model])) {
      throw new Error('missing channel labels property: ' + model);
    }

    if (convert[model].labels.length !== convert[model].channels) {
      throw new Error('channel and label counts mismatch: ' + model);
    }

    var _convert$model = convert[model],
        channels = _convert$model.channels,
        labels = _convert$model.labels;
    delete convert[model].channels;
    delete convert[model].labels;
    Object.defineProperty(convert[model], 'channels', {
      value: channels
    });
    Object.defineProperty(convert[model], 'labels', {
      value: labels
    });
  }

  convert.rgb.hsl = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;

    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }

    h = Math.min(h * 60, 360);

    if (h < 0) {
      h += 360;
    }

    var l = (min + max) / 2;

    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }

    return [h, s * 100, l * 100];
  };

  convert.rgb.hsv = function (rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);

    var diffc = function diffc(c) {
      return (v - c) / 6 / diff + 1 / 2;
    };

    if (diff === 0) {
      h = 0;
      s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);

      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }

      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }

    return [h * 360, s * 100, v * 100];
  };

  convert.rgb.hwb = function (rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };

  convert.rgb.cmyk = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var k = Math.min(1 - r, 1 - g, 1 - b);
    var c = (1 - r - k) / (1 - k) || 0;
    var m = (1 - g - k) / (1 - k) || 0;
    var y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };

  function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
  }

  convert.rgb.keyword = function (rgb) {
    var reversed = reverseKeywords[rgb];

    if (reversed) {
      return reversed;
    }

    var currentClosestDistance = Infinity;
    var currentClosestKeyword;

    for (var _i3 = 0, _Object$keys3 = Object.keys(_$$_REQUIRE(_dependencyMap[0], "color-name")); _i3 < _Object$keys3.length; _i3++) {
      var keyword = _Object$keys3[_i3];

      var value = _$$_REQUIRE(_dependencyMap[0], "color-name")[keyword];

      var distance = comparativeDistance(rgb, value);

      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword;
      }
    }

    return currentClosestKeyword;
  };

  convert.keyword.rgb = function (keyword) {
    return _$$_REQUIRE(_dependencyMap[0], "color-name")[keyword];
  };

  convert.rgb.xyz = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };

  convert.rgb.lab = function (rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    var l = 116 * y - 16;
    var a = 500 * (x - y);
    var b = 200 * (y - z);
    return [l, a, b];
  };

  convert.hsl.rgb = function (hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t2;
    var t3;
    var val;

    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }

    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }

    var t1 = 2 * l - t2;
    var rgb = [0, 0, 0];

    for (var i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);

      if (t3 < 0) {
        t3++;
      }

      if (t3 > 1) {
        t3--;
      }

      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }

      rgb[i] = val * 255;
    }

    return rgb;
  };

  convert.hsl.hsv = function (hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    var v = (l + s) / 2;
    var sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };

  convert.hsv.rgb = function (hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;

    switch (hi) {
      case 0:
        return [v, t, p];

      case 1:
        return [q, v, p];

      case 2:
        return [p, v, t];

      case 3:
        return [p, q, v];

      case 4:
        return [t, p, v];

      case 5:
        return [v, p, q];
    }
  };

  convert.hsv.hsl = function (hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var sl;
    var l;
    l = (2 - s) * v;
    var lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };

  convert.hwb.rgb = function (hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var f;

    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }

    var i = Math.floor(6 * h);
    var v = 1 - bl;
    f = 6 * h - i;

    if ((i & 0x01) !== 0) {
      f = 1 - f;
    }

    var n = wh + f * (v - wh);
    var r;
    var g;
    var b;

    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;

      case 1:
        r = n;
        g = v;
        b = wh;
        break;

      case 2:
        r = wh;
        g = v;
        b = n;
        break;

      case 3:
        r = wh;
        g = n;
        b = v;
        break;

      case 4:
        r = n;
        g = wh;
        b = v;
        break;

      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }

    return [r * 255, g * 255, b * 255];
  };

  convert.cmyk.rgb = function (cmyk) {
    var c = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r = 1 - Math.min(1, c * (1 - k) + k);
    var g = 1 - Math.min(1, m * (1 - k) + k);
    var b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };

  convert.xyz.rgb = function (xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.2040 + z * 1.0570;
    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };

  convert.xyz.lab = function (xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    var l = 116 * y - 16;
    var a = 500 * (x - y);
    var b = 200 * (y - z);
    return [l, a, b];
  };

  convert.lab.xyz = function (lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };

  convert.lab.lch = function (lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var h;
    var hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;

    if (h < 0) {
      h += 360;
    }

    var c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };

  convert.lch.lab = function (lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var hr = h / 360 * 2 * Math.PI;
    var a = c * Math.cos(hr);
    var b = c * Math.sin(hr);
    return [l, a, b];
  };

  convert.rgb.ansi16 = function (args) {
    var saturation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var _args = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray")(args, 3),
        r = _args[0],
        g = _args[1],
        b = _args[2];

    var value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
    value = Math.round(value / 50);

    if (value === 0) {
      return 30;
    }

    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

    if (value === 2) {
      ansi += 60;
    }

    return ansi;
  };

  convert.hsv.ansi16 = function (args) {
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };

  convert.rgb.ansi256 = function (args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];

    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }

      if (r > 248) {
        return 231;
      }

      return Math.round((r - 8) / 247 * 24) + 232;
    }

    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };

  convert.ansi16.rgb = function (args) {
    var color = args % 10;

    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }

      color = color / 10.5 * 255;
      return [color, color, color];
    }

    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };

  convert.ansi256.rgb = function (args) {
    if (args >= 232) {
      var c = (args - 232) * 10 + 8;
      return [c, c, c];
    }

    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [r, g, b];
  };

  convert.rgb.hex = function (args) {
    var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
  };

  convert.hex.rgb = function (args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

    if (!match) {
      return [0, 0, 0];
    }

    var colorString = match[0];

    if (match[0].length === 3) {
      colorString = colorString.split('').map(function (char) {
        return char + char;
      }).join('');
    }

    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 0xFF;
    var g = integer >> 8 & 0xFF;
    var b = integer & 0xFF;
    return [r, g, b];
  };

  convert.rgb.hcg = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;

    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }

    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma;
    }

    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };

  convert.hsl.hcg = function (hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = l < 0.5 ? 2.0 * s * l : 2.0 * s * (1.0 - l);
    var f = 0;

    if (c < 1.0) {
      f = (l - 0.5 * c) / (1.0 - c);
    }

    return [hsl[0], c * 100, f * 100];
  };

  convert.hsv.hcg = function (hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;

    if (c < 1.0) {
      f = (v - c) / (1 - c);
    }

    return [hsv[0], c * 100, f * 100];
  };

  convert.hcg.rgb = function (hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;

    if (c === 0.0) {
      return [g * 255, g * 255, g * 255];
    }

    var pure = [0, 0, 0];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;

    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;

      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;

      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;

      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;

      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;

      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }

    mg = (1.0 - c) * g;
    return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
  };

  convert.hcg.hsv = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    var f = 0;

    if (v > 0.0) {
      f = c / v;
    }

    return [hcg[0], f * 100, v * 100];
  };

  convert.hcg.hsl = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1.0 - c) + 0.5 * c;
    var s = 0;

    if (l > 0.0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1.0) {
      s = c / (2 * (1 - l));
    }

    return [hcg[0], s * 100, l * 100];
  };

  convert.hcg.hwb = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };

  convert.hwb.hcg = function (hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w;
    var g = 0;

    if (c < 1) {
      g = (v - c) / (1 - c);
    }

    return [hwb[0], c * 100, g * 100];
  };

  convert.apple.rgb = function (apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };

  convert.rgb.apple = function (rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };

  convert.gray.rgb = function (args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };

  convert.gray.hsl = function (args) {
    return [0, 0, args[0]];
  };

  convert.gray.hsv = convert.gray.hsl;

  convert.gray.hwb = function (gray) {
    return [0, 100, gray[0]];
  };

  convert.gray.cmyk = function (gray) {
    return [0, 0, 0, gray[0]];
  };

  convert.gray.lab = function (gray) {
    return [gray[0], 0, 0];
  };

  convert.gray.hex = function (gray) {
    var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    var integer = (val << 16) + (val << 8) + val;
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
  };

  convert.rgb.gray = function (rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
},401,[402,31],"node_modules/color-convert/conversions.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
},402,[],"node_modules/color-name/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  function buildGraph() {
    var graph = {};
    var models = Object.keys(_$$_REQUIRE(_dependencyMap[0], "./conversions"));

    for (var len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        distance: -1,
        parent: null
      };
    }

    return graph;
  }

  function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [fromModel];
    graph[fromModel].distance = 0;

    while (queue.length) {
      var current = queue.pop();
      var adjacents = Object.keys(_$$_REQUIRE(_dependencyMap[0], "./conversions")[current]);

      for (var len = adjacents.length, i = 0; i < len; i++) {
        var adjacent = adjacents[i];
        var node = graph[adjacent];

        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }

    return graph;
  }

  function link(from, to) {
    return function (args) {
      return to(from(args));
    };
  }

  function wrapConversion(toModel, graph) {
    var path = [graph[toModel].parent, toModel];

    var fn = _$$_REQUIRE(_dependencyMap[0], "./conversions")[graph[toModel].parent][toModel];

    var cur = graph[toModel].parent;

    while (graph[cur].parent) {
      path.unshift(graph[cur].parent);
      fn = link(_$$_REQUIRE(_dependencyMap[0], "./conversions")[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }

    fn.conversion = path;
    return fn;
  }

  module.exports = function (fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph);

    for (var len = models.length, i = 0; i < len; i++) {
      var toModel = models[i];
      var node = graph[toModel];

      if (node.parent === null) {
        continue;
      }

      conversion[toModel] = wrapConversion(toModel, graph);
    }

    return conversion;
  };
},403,[401],"node_modules/color-convert/route.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.default = exports.test = exports.serialize = void 0;
  var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
  var asymmetricMatcher = typeof Symbol === 'function' && Symbol.for ? Symbol.for('jest.asymmetricMatcher') : 0x1357a5;
  var SPACE = ' ';

  var serialize = function serialize(val, config, indentation, depth, refs, printer) {
    var stringedValue = val.toString();

    if (stringedValue === 'ArrayContaining' || stringedValue === 'ArrayNotContaining') {
      if (++depth > config.maxDepth) {
        return '[' + stringedValue + ']';
      }

      return stringedValue + SPACE + '[' + (0, _$$_REQUIRE(_dependencyMap[0], "../collections").printListItems)(val.sample, config, indentation, depth, refs, printer) + ']';
    }

    if (stringedValue === 'ObjectContaining' || stringedValue === 'ObjectNotContaining') {
      if (++depth > config.maxDepth) {
        return '[' + stringedValue + ']';
      }

      return stringedValue + SPACE + '{' + (0, _$$_REQUIRE(_dependencyMap[0], "../collections").printObjectProperties)(val.sample, config, indentation, depth, refs, printer) + '}';
    }

    if (stringedValue === 'StringMatching' || stringedValue === 'StringNotMatching') {
      return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
    }

    if (stringedValue === 'StringContaining' || stringedValue === 'StringNotContaining') {
      return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
    }

    return val.toAsymmetricMatcher();
  };

  exports.serialize = serialize;

  var test = function test(val) {
    return val && val.$$typeof === asymmetricMatcher;
  };

  exports.test = test;
  var plugin = {
    serialize: serialize,
    test: test
  };
  var _default = plugin;
  exports.default = _default;
},404,[405],"node_modules/pretty-format/build/plugins/AsymmetricMatcher.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.printIteratorEntries = printIteratorEntries;
  exports.printIteratorValues = printIteratorValues;
  exports.printListItems = printListItems;
  exports.printObjectProperties = printObjectProperties;

  var getKeysOfEnumerableProperties = function getKeysOfEnumerableProperties(object) {
    var keys = Object.keys(object).sort();

    if (Object.getOwnPropertySymbols) {
      Object.getOwnPropertySymbols(object).forEach(function (symbol) {
        if (Object.getOwnPropertyDescriptor(object, symbol).enumerable) {
          keys.push(symbol);
        }
      });
    }

    return keys;
  };

  function printIteratorEntries(iterator, config, indentation, depth, refs, printer) {
    var separator = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ': ';
    var result = '';
    var current = iterator.next();

    if (!current.done) {
      result += config.spacingOuter;
      var indentationNext = indentation + config.indent;

      while (!current.done) {
        var name = printer(current.value[0], config, indentationNext, depth, refs);
        var value = printer(current.value[1], config, indentationNext, depth, refs);
        result += indentationNext + name + separator + value;
        current = iterator.next();

        if (!current.done) {
          result += ',' + config.spacingInner;
        } else if (!config.min) {
          result += ',';
        }
      }

      result += config.spacingOuter + indentation;
    }

    return result;
  }

  function printIteratorValues(iterator, config, indentation, depth, refs, printer) {
    var result = '';
    var current = iterator.next();

    if (!current.done) {
      result += config.spacingOuter;
      var indentationNext = indentation + config.indent;

      while (!current.done) {
        result += indentationNext + printer(current.value, config, indentationNext, depth, refs);
        current = iterator.next();

        if (!current.done) {
          result += ',' + config.spacingInner;
        } else if (!config.min) {
          result += ',';
        }
      }

      result += config.spacingOuter + indentation;
    }

    return result;
  }

  function printListItems(list, config, indentation, depth, refs, printer) {
    var result = '';

    if (list.length) {
      result += config.spacingOuter;
      var indentationNext = indentation + config.indent;

      for (var i = 0; i < list.length; i++) {
        result += indentationNext + printer(list[i], config, indentationNext, depth, refs);

        if (i < list.length - 1) {
          result += ',' + config.spacingInner;
        } else if (!config.min) {
          result += ',';
        }
      }

      result += config.spacingOuter + indentation;
    }

    return result;
  }

  function printObjectProperties(val, config, indentation, depth, refs, printer) {
    var result = '';
    var keys = getKeysOfEnumerableProperties(val);

    if (keys.length) {
      result += config.spacingOuter;
      var indentationNext = indentation + config.indent;

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var name = printer(key, config, indentationNext, depth, refs);
        var value = printer(val[key], config, indentationNext, depth, refs);
        result += indentationNext + name + ': ' + value;

        if (i < keys.length - 1) {
          result += ',' + config.spacingInner;
        } else if (!config.min) {
          result += ',';
        }
      }

      result += config.spacingOuter + indentation;
    }

    return result;
  }
},405,[],"node_modules/pretty-format/build/collections.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.default = exports.serialize = exports.test = void 0;

  var _ansiRegex = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], "ansi-regex"));

  var _ansiStyles = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], "ansi-styles"));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var toHumanReadableAnsi = function toHumanReadableAnsi(text) {
    return text.replace((0, _ansiRegex.default)(), function (match) {
      switch (match) {
        case _ansiStyles.default.red.close:
        case _ansiStyles.default.green.close:
        case _ansiStyles.default.cyan.close:
        case _ansiStyles.default.gray.close:
        case _ansiStyles.default.white.close:
        case _ansiStyles.default.yellow.close:
        case _ansiStyles.default.bgRed.close:
        case _ansiStyles.default.bgGreen.close:
        case _ansiStyles.default.bgYellow.close:
        case _ansiStyles.default.inverse.close:
        case _ansiStyles.default.dim.close:
        case _ansiStyles.default.bold.close:
        case _ansiStyles.default.reset.open:
        case _ansiStyles.default.reset.close:
          return '</>';

        case _ansiStyles.default.red.open:
          return '<red>';

        case _ansiStyles.default.green.open:
          return '<green>';

        case _ansiStyles.default.cyan.open:
          return '<cyan>';

        case _ansiStyles.default.gray.open:
          return '<gray>';

        case _ansiStyles.default.white.open:
          return '<white>';

        case _ansiStyles.default.yellow.open:
          return '<yellow>';

        case _ansiStyles.default.bgRed.open:
          return '<bgRed>';

        case _ansiStyles.default.bgGreen.open:
          return '<bgGreen>';

        case _ansiStyles.default.bgYellow.open:
          return '<bgYellow>';

        case _ansiStyles.default.inverse.open:
          return '<inverse>';

        case _ansiStyles.default.dim.open:
          return '<dim>';

        case _ansiStyles.default.bold.open:
          return '<bold>';

        default:
          return '';
      }
    });
  };

  var test = function test(val) {
    return typeof val === 'string' && !!val.match((0, _ansiRegex.default)());
  };

  exports.test = test;

  var serialize = function serialize(val, config, indentation, depth, refs, printer) {
    return printer(toHumanReadableAnsi(val), config, indentation, depth, refs);
  };

  exports.serialize = serialize;
  var plugin = {
    serialize: serialize,
    test: test
  };
  var _default = plugin;
  exports.default = _default;
},406,[407,399],"node_modules/pretty-format/build/plugins/ConvertAnsi.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function () {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$onlyFirst = _ref.onlyFirst,
        onlyFirst = _ref$onlyFirst === void 0 ? false : _ref$onlyFirst;

    var pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'].join('|');
    return new RegExp(pattern, onlyFirst ? undefined : 'g');
  };
},407,[],"node_modules/ansi-regex/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.default = exports.serialize = exports.test = void 0;
  var SPACE = ' ';
  var OBJECT_NAMES = ['DOMStringMap', 'NamedNodeMap'];
  var ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;

  var testName = function testName(name) {
    return OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
  };

  var test = function test(val) {
    return val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
  };

  exports.test = test;

  var isNamedNodeMap = function isNamedNodeMap(collection) {
    return collection.constructor.name === 'NamedNodeMap';
  };

  var serialize = function serialize(collection, config, indentation, depth, refs, printer) {
    var name = collection.constructor.name;

    if (++depth > config.maxDepth) {
      return '[' + name + ']';
    }

    return (config.min ? '' : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? '{' + (0, _$$_REQUIRE(_dependencyMap[0], "../collections").printObjectProperties)(isNamedNodeMap(collection) ? Array.from(collection).reduce(function (props, attribute) {
      props[attribute.name] = attribute.value;
      return props;
    }, {}) : _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends")({}, collection), config, indentation, depth, refs, printer) + '}' : '[' + (0, _$$_REQUIRE(_dependencyMap[0], "../collections").printListItems)(Array.from(collection), config, indentation, depth, refs, printer) + ']');
  };

  exports.serialize = serialize;
  var plugin = {
    serialize: serialize,
    test: test
  };
  var _default = plugin;
  exports.default = _default;
},408,[405,4],"node_modules/pretty-format/build/plugins/DOMCollection.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.default = exports.serialize = exports.test = void 0;
  var ELEMENT_NODE = 1;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  var FRAGMENT_NODE = 11;
  var ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/;

  var testNode = function testNode(val) {
    var _val$hasAttribute;

    var constructorName = val.constructor.name;
    var nodeType = val.nodeType,
        tagName = val.tagName;
    var isCustomElement = typeof tagName === 'string' && tagName.includes('-') || ((_val$hasAttribute = val.hasAttribute) === null || _val$hasAttribute === void 0 ? void 0 : _val$hasAttribute.call(val, 'is'));
    return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === 'Text' || nodeType === COMMENT_NODE && constructorName === 'Comment' || nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment';
  };

  var test = function test(val) {
    var _val$constructor;

    return (val === null || val === void 0 ? void 0 : (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) && testNode(val);
  };

  exports.test = test;

  function nodeIsText(node) {
    return node.nodeType === TEXT_NODE;
  }

  function nodeIsComment(node) {
    return node.nodeType === COMMENT_NODE;
  }

  function nodeIsFragment(node) {
    return node.nodeType === FRAGMENT_NODE;
  }

  var serialize = function serialize(node, config, indentation, depth, refs, printer) {
    if (nodeIsText(node)) {
      return (0, _$$_REQUIRE(_dependencyMap[0], "./lib/markup").printText)(node.data, config);
    }

    if (nodeIsComment(node)) {
      return (0, _$$_REQUIRE(_dependencyMap[0], "./lib/markup").printComment)(node.data, config);
    }

    var type = nodeIsFragment(node) ? "DocumentFragment" : node.tagName.toLowerCase();

    if (++depth > config.maxDepth) {
      return (0, _$$_REQUIRE(_dependencyMap[0], "./lib/markup").printElementAsLeaf)(type, config);
    }

    return (0, _$$_REQUIRE(_dependencyMap[0], "./lib/markup").printElement)(type, (0, _$$_REQUIRE(_dependencyMap[0], "./lib/markup").printProps)(nodeIsFragment(node) ? [] : Array.from(node.attributes).map(function (attr) {
      return attr.name;
    }).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce(function (props, attribute) {
      props[attribute.name] = attribute.value;
      return props;
    }, {}), config, indentation + config.indent, depth, refs, printer), (0, _$$_REQUIRE(_dependencyMap[0], "./lib/markup").printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer), config, indentation);
  };

  exports.serialize = serialize;
  var plugin = {
    serialize: serialize,
    test: test
  };
  var _default = plugin;
  exports.default = _default;
},409,[410],"node_modules/pretty-format/build/plugins/DOMElement.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.printElementAsLeaf = exports.printElement = exports.printComment = exports.printText = exports.printChildren = exports.printProps = void 0;

  var _escapeHTML = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], "./escapeHTML"));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var printProps = function printProps(keys, props, config, indentation, depth, refs, printer) {
    var indentationNext = indentation + config.indent;
    var colors = config.colors;
    return keys.map(function (key) {
      var value = props[key];
      var printed = printer(value, config, indentationNext, depth, refs);

      if (typeof value !== 'string') {
        if (printed.indexOf('\n') !== -1) {
          printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;
        }

        printed = '{' + printed + '}';
      }

      return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + '=' + colors.value.open + printed + colors.value.close;
    }).join('');
  };

  exports.printProps = printProps;

  var printChildren = function printChildren(children, config, indentation, depth, refs, printer) {
    return children.map(function (child) {
      return config.spacingOuter + indentation + (typeof child === 'string' ? printText(child, config) : printer(child, config, indentation, depth, refs));
    }).join('');
  };

  exports.printChildren = printChildren;

  var printText = function printText(text, config) {
    var contentColor = config.colors.content;
    return contentColor.open + (0, _escapeHTML.default)(text) + contentColor.close;
  };

  exports.printText = printText;

  var printComment = function printComment(comment, config) {
    var commentColor = config.colors.comment;
    return commentColor.open + '<!--' + (0, _escapeHTML.default)(comment) + '-->' + commentColor.close;
  };

  exports.printComment = printComment;

  var printElement = function printElement(type, printedProps, printedChildren, config, indentation) {
    var tagColor = config.colors.tag;
    return tagColor.open + '<' + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? '>' + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + '</' + type : (printedProps && !config.min ? '' : ' ') + '/') + '>' + tagColor.close;
  };

  exports.printElement = printElement;

  var printElementAsLeaf = function printElementAsLeaf(type, config) {
    var tagColor = config.colors.tag;
    return tagColor.open + '<' + type + tagColor.close + ' …' + tagColor.open + ' />' + tagColor.close;
  };

  exports.printElementAsLeaf = printElementAsLeaf;
},410,[411],"node_modules/pretty-format/build/plugins/lib/markup.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.default = escapeHTML;

  function escapeHTML(str) {
    return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
},411,[],"node_modules/pretty-format/build/plugins/lib/escapeHTML.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.default = exports.test = exports.serialize = void 0;
  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';
  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';
  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
  var IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@';
  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';
  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';
  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

  var getImmutableName = function getImmutableName(name) {
    return 'Immutable.' + name;
  };

  var printAsLeaf = function printAsLeaf(name) {
    return '[' + name + ']';
  };

  var SPACE = ' ';
  var LAZY = '…';

  var printImmutableEntries = function printImmutableEntries(val, config, indentation, depth, refs, printer, type) {
    return ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '{' + (0, _$$_REQUIRE(_dependencyMap[0], "../collections").printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) + '}';
  };

  function getRecordEntries(val) {
    var i = 0;
    return {
      next: function next() {
        if (i < val._keys.length) {
          var key = val._keys[i++];
          return {
            done: false,
            value: [key, val.get(key)]
          };
        }

        return {
          done: true,
          value: undefined
        };
      }
    };
  }

  var printImmutableRecord = function printImmutableRecord(val, config, indentation, depth, refs, printer) {
    var name = getImmutableName(val._name || 'Record');
    return ++depth > config.maxDepth ? printAsLeaf(name) : name + SPACE + '{' + (0, _$$_REQUIRE(_dependencyMap[0], "../collections").printIteratorEntries)(getRecordEntries(val), config, indentation, depth, refs, printer) + '}';
  };

  var printImmutableSeq = function printImmutableSeq(val, config, indentation, depth, refs, printer) {
    var name = getImmutableName('Seq');

    if (++depth > config.maxDepth) {
      return printAsLeaf(name);
    }

    if (val[IS_KEYED_SENTINEL]) {
      return name + SPACE + '{' + (val._iter || val._object ? (0, _$$_REQUIRE(_dependencyMap[0], "../collections").printIteratorEntries)(val.entries(), config, indentation, depth, refs, printer) : LAZY) + '}';
    }

    return name + SPACE + '[' + (val._iter || val._array || val._collection || val._iterable ? (0, _$$_REQUIRE(_dependencyMap[0], "../collections").printIteratorValues)(val.values(), config, indentation, depth, refs, printer) : LAZY) + ']';
  };

  var printImmutableValues = function printImmutableValues(val, config, indentation, depth, refs, printer, type) {
    return ++depth > config.maxDepth ? printAsLeaf(getImmutableName(type)) : getImmutableName(type) + SPACE + '[' + (0, _$$_REQUIRE(_dependencyMap[0], "../collections").printIteratorValues)(val.values(), config, indentation, depth, refs, printer) + ']';
  };

  var serialize = function serialize(val, config, indentation, depth, refs, printer) {
    if (val[IS_MAP_SENTINEL]) {
      return printImmutableEntries(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map');
    }

    if (val[IS_LIST_SENTINEL]) {
      return printImmutableValues(val, config, indentation, depth, refs, printer, 'List');
    }

    if (val[IS_SET_SENTINEL]) {
      return printImmutableValues(val, config, indentation, depth, refs, printer, val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set');
    }

    if (val[IS_STACK_SENTINEL]) {
      return printImmutableValues(val, config, indentation, depth, refs, printer, 'Stack');
    }

    if (val[IS_SEQ_SENTINEL]) {
      return printImmutableSeq(val, config, indentation, depth, refs, printer);
    }

    return printImmutableRecord(val, config, indentation, depth, refs, printer);
  };

  exports.serialize = serialize;

  var test = function test(val) {
    return val && (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);
  };

  exports.test = test;
  var plugin = {
    serialize: serialize,
    test: test
  };
  var _default = plugin;
  exports.default = _default;
},412,[405],"node_modules/pretty-format/build/plugins/Immutable.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.default = exports.test = exports.serialize = void 0;

  var ReactIs = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react-is"));

  function _getRequireWildcardCache() {
    if (typeof WeakMap !== 'function') return null;
    var cache = new WeakMap();

    _getRequireWildcardCache = function _getRequireWildcardCache() {
      return cache;
    };

    return cache;
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }

    if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {
      return {
        default: obj
      };
    }

    var cache = _getRequireWildcardCache();

    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }

    newObj.default = obj;

    if (cache) {
      cache.set(obj, newObj);
    }

    return newObj;
  }

  var getChildren = function getChildren(arg) {
    var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    if (Array.isArray(arg)) {
      arg.forEach(function (item) {
        getChildren(item, children);
      });
    } else if (arg != null && arg !== false) {
      children.push(arg);
    }

    return children;
  };

  var getType = function getType(element) {
    var type = element.type;

    if (typeof type === 'string') {
      return type;
    }

    if (typeof type === 'function') {
      return type.displayName || type.name || 'Unknown';
    }

    if (ReactIs.isFragment(element)) {
      return 'React.Fragment';
    }

    if (ReactIs.isSuspense(element)) {
      return 'React.Suspense';
    }

    if (typeof type === 'object' && type !== null) {
      if (ReactIs.isContextProvider(element)) {
        return 'Context.Provider';
      }

      if (ReactIs.isContextConsumer(element)) {
        return 'Context.Consumer';
      }

      if (ReactIs.isForwardRef(element)) {
        if (type.displayName) {
          return type.displayName;
        }

        var functionName = type.render.displayName || type.render.name || '';
        return functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
      }

      if (ReactIs.isMemo(element)) {
        var _functionName = type.displayName || type.type.displayName || type.type.name || '';

        return _functionName !== '' ? 'Memo(' + _functionName + ')' : 'Memo';
      }
    }

    return 'UNDEFINED';
  };

  var getPropKeys = function getPropKeys(element) {
    var props = element.props;
    return Object.keys(props).filter(function (key) {
      return key !== 'children' && props[key] !== undefined;
    }).sort();
  };

  var serialize = function serialize(element, config, indentation, depth, refs, printer) {
    return ++depth > config.maxDepth ? (0, _$$_REQUIRE(_dependencyMap[1], "./lib/markup").printElementAsLeaf)(getType(element), config) : (0, _$$_REQUIRE(_dependencyMap[1], "./lib/markup").printElement)(getType(element), (0, _$$_REQUIRE(_dependencyMap[1], "./lib/markup").printProps)(getPropKeys(element), element.props, config, indentation + config.indent, depth, refs, printer), (0, _$$_REQUIRE(_dependencyMap[1], "./lib/markup").printChildren)(getChildren(element.props.children), config, indentation + config.indent, depth, refs, printer), config, indentation);
  };

  exports.serialize = serialize;

  var test = function test(val) {
    return val && ReactIs.isElement(val);
  };

  exports.test = test;
  var plugin = {
    serialize: serialize,
    test: test
  };
  var _default = plugin;
  exports.default = _default;
},413,[414,410],"node_modules/pretty-format/build/plugins/ReactElement.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _$$_REQUIRE(_dependencyMap[0], "./cjs/react-is.production.min.js");
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1], "./cjs/react-is.development.js");
  }
},414,[415,416],"node_modules/react-is/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v17.0.2
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var b = 60103,
      c = 60106,
      d = 60107,
      e = 60108,
      f = 60114,
      g = 60109,
      h = 60110,
      k = 60112,
      l = 60113,
      m = 60120,
      n = 60115,
      p = 60116,
      q = 60121,
      r = 60122,
      u = 60117,
      v = 60129,
      w = 60131;

  if ("function" === typeof Symbol && Symbol.for) {
    var x = Symbol.for;
    b = x("react.element");
    c = x("react.portal");
    d = x("react.fragment");
    e = x("react.strict_mode");
    f = x("react.profiler");
    g = x("react.provider");
    h = x("react.context");
    k = x("react.forward_ref");
    l = x("react.suspense");
    m = x("react.suspense_list");
    n = x("react.memo");
    p = x("react.lazy");
    q = x("react.block");
    r = x("react.server.block");
    u = x("react.fundamental");
    v = x("react.debug_trace_mode");
    w = x("react.legacy_hidden");
  }

  function y(a) {
    if ("object" === typeof a && null !== a) {
      var t = a.$$typeof;

      switch (t) {
        case b:
          switch (a = a.type, a) {
            case d:
            case f:
            case e:
            case l:
            case m:
              return a;

            default:
              switch (a = a && a.$$typeof, a) {
                case h:
                case k:
                case p:
                case n:
                case g:
                  return a;

                default:
                  return t;
              }

          }

        case c:
          return t;
      }
    }
  }

  var z = g,
      A = b,
      B = k,
      C = d,
      D = p,
      E = n,
      F = c,
      G = f,
      H = e,
      I = l;
  exports.ContextConsumer = h;
  exports.ContextProvider = z;
  exports.Element = A;
  exports.ForwardRef = B;
  exports.Fragment = C;
  exports.Lazy = D;
  exports.Memo = E;
  exports.Portal = F;
  exports.Profiler = G;
  exports.StrictMode = H;
  exports.Suspense = I;

  exports.isAsyncMode = function () {
    return !1;
  };

  exports.isConcurrentMode = function () {
    return !1;
  };

  exports.isContextConsumer = function (a) {
    return y(a) === h;
  };

  exports.isContextProvider = function (a) {
    return y(a) === g;
  };

  exports.isElement = function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === b;
  };

  exports.isForwardRef = function (a) {
    return y(a) === k;
  };

  exports.isFragment = function (a) {
    return y(a) === d;
  };

  exports.isLazy = function (a) {
    return y(a) === p;
  };

  exports.isMemo = function (a) {
    return y(a) === n;
  };

  exports.isPortal = function (a) {
    return y(a) === c;
  };

  exports.isProfiler = function (a) {
    return y(a) === f;
  };

  exports.isStrictMode = function (a) {
    return y(a) === e;
  };

  exports.isSuspense = function (a) {
    return y(a) === l;
  };

  exports.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === d || a === f || a === v || a === e || a === l || a === m || a === w || "object" === typeof a && null !== a && (a.$$typeof === p || a.$$typeof === n || a.$$typeof === g || a.$$typeof === h || a.$$typeof === k || a.$$typeof === u || a.$$typeof === q || a[0] === r) ? !0 : !1;
  };

  exports.typeOf = y;
},415,[],"node_modules/react-is/cjs/react-is.production.min.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v17.0.2
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var REACT_ELEMENT_TYPE = 0xeac7;
      var REACT_PORTAL_TYPE = 0xeaca;
      var REACT_FRAGMENT_TYPE = 0xeacb;
      var REACT_STRICT_MODE_TYPE = 0xeacc;
      var REACT_PROFILER_TYPE = 0xead2;
      var REACT_PROVIDER_TYPE = 0xeacd;
      var REACT_CONTEXT_TYPE = 0xeace;
      var REACT_FORWARD_REF_TYPE = 0xead0;
      var REACT_SUSPENSE_TYPE = 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = 0xead8;
      var REACT_MEMO_TYPE = 0xead3;
      var REACT_LAZY_TYPE = 0xead4;
      var REACT_BLOCK_TYPE = 0xead9;
      var REACT_SERVER_BLOCK_TYPE = 0xeada;
      var REACT_FUNDAMENTAL_TYPE = 0xead5;
      var REACT_SCOPE_TYPE = 0xead7;
      var REACT_OPAQUE_ID_TYPE = 0xeae0;
      var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
      var REACT_OFFSCREEN_TYPE = 0xeae2;
      var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

      if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
      }

      var enableScopeAPI = false;

      function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') {
          return true;
        }

        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
          return true;
        }

        if (typeof type === 'object' && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
            return true;
          }
        }

        return false;
      }

      function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
          var $$typeof = object.$$typeof;

          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;

              switch (type) {
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                case REACT_SUSPENSE_LIST_TYPE:
                  return type;

                default:
                  var $$typeofType = type && type.$$typeof;

                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;

                    default:
                      return $$typeof;
                  }

              }

            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }

        return undefined;
      }

      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      var hasWarnedAboutDeprecatedIsConcurrentMode = false;

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
          }
        }
        return false;
      }

      function isConcurrentMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
            hasWarnedAboutDeprecatedIsConcurrentMode = true;
            console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
          }
        }
        return false;
      }

      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }

      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }

      function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }

      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }

      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }

      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }

      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }

      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }

      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }

      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }

      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
      exports.isValidElementType = isValidElementType;
      exports.typeOf = typeOf;
    })();
  }
},416,[],"node_modules/react-is/cjs/react-is.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  exports.default = exports.test = exports.serialize = void 0;
  var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
  var testSymbol = typeof Symbol === 'function' && Symbol.for ? Symbol.for('react.test.json') : 0xea71357;

  var getPropKeys = function getPropKeys(object) {
    var props = object.props;
    return props ? Object.keys(props).filter(function (key) {
      return props[key] !== undefined;
    }).sort() : [];
  };

  var serialize = function serialize(object, config, indentation, depth, refs, printer) {
    return ++depth > config.maxDepth ? (0, _$$_REQUIRE(_dependencyMap[0], "./lib/markup").printElementAsLeaf)(object.type, config) : (0, _$$_REQUIRE(_dependencyMap[0], "./lib/markup").printElement)(object.type, object.props ? (0, _$$_REQUIRE(_dependencyMap[0], "./lib/markup").printProps)(getPropKeys(object), object.props, config, indentation + config.indent, depth, refs, printer) : '', object.children ? (0, _$$_REQUIRE(_dependencyMap[0], "./lib/markup").printChildren)(object.children, config, indentation + config.indent, depth, refs, printer) : '', config, indentation);
  };

  exports.serialize = serialize;

  var test = function test(val) {
    return val && val.$$typeof === testSymbol;
  };

  exports.test = test;
  var plugin = {
    serialize: serialize,
    test: test
  };
  var _default = plugin;
  exports.default = _default;
},417,[410],"node_modules/pretty-format/build/plugins/ReactTestComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];
  var enabled = false;
  exports.disable = disable;

  function disable() {
    enabled = false;
    _$$_REQUIRE(_dependencyMap[0], "./core")._Y = null;
    _$$_REQUIRE(_dependencyMap[0], "./core")._Z = null;
  }

  exports.enable = enable;

  function enable(options) {
    options = options || {};
    if (enabled) disable();
    enabled = true;
    var id = 0;
    var displayId = 0;
    var rejections = {};

    _$$_REQUIRE(_dependencyMap[0], "./core")._Y = function (promise) {
      if (promise._V === 2 && rejections[promise._1]) {
        if (rejections[promise._1].logged) {
          onHandled(promise._1);
        } else {
          clearTimeout(rejections[promise._1].timeout);
        }

        delete rejections[promise._1];
      }
    };

    _$$_REQUIRE(_dependencyMap[0], "./core")._Z = function (promise, err) {
      if (promise._U === 0) {
        promise._1 = id++;
        rejections[promise._1] = {
          displayId: null,
          error: err,
          timeout: setTimeout(onUnhandled.bind(null, promise._1), matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
          logged: false
        };
      }
    };

    function onUnhandled(id) {
      if (options.allRejections || matchWhitelist(rejections[id].error, options.whitelist || DEFAULT_WHITELIST)) {
        rejections[id].displayId = displayId++;

        if (options.onUnhandled) {
          rejections[id].logged = true;
          options.onUnhandled(rejections[id].displayId, rejections[id].error);
        } else {
          rejections[id].logged = true;
          logError(rejections[id].displayId, rejections[id].error);
        }
      }
    }

    function onHandled(id) {
      if (rejections[id].logged) {
        if (options.onHandled) {
          options.onHandled(rejections[id].displayId, rejections[id].error);
        } else if (!rejections[id].onUnhandled) {
          console.warn('Promise Rejection Handled (id: ' + rejections[id].displayId + '):');
          console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id].displayId + '.');
        }
      }
    }
  }

  function logError(id, error) {
    console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
    var errStr = (error && (error.stack || error)) + '';
    errStr.split('\n').forEach(function (line) {
      console.warn('  ' + line);
    });
  }

  function matchWhitelist(error, list) {
    return list.some(function (cls) {
      return error instanceof cls;
    });
  }
},418,[82],"node_modules/promise/setimmediate/rejection-tracking.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var _getDevServer2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../Core/Devtools/getDevServer"));

  var _NativeRedBox = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../NativeModules/specs/NativeRedBox"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], "../LogBox/Data/LogBoxData"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var pendingEntryPoints = [];
  var hmrClient = null;
  var hmrUnavailableReason = null;
  var currentCompileErrorMessage = null;
  var didConnect = false;
  var pendingLogs = [];
  var HMRClient = {
    enable: function enable() {
      if (hmrUnavailableReason !== null) {
        throw new Error(hmrUnavailableReason);
      }

      _$$_REQUIRE(_dependencyMap[5], "invariant")(hmrClient, 'Expected HMRClient.setup() call at startup.');

      var LoadingView = _$$_REQUIRE(_dependencyMap[6], "./LoadingView");

      hmrClient.send(JSON.stringify({
        type: 'log-opt-in'
      }));
      var hasUpdates = hmrClient.hasPendingUpdates();

      if (hasUpdates) {
        LoadingView.showMessage('Refreshing...', 'refresh');
      }

      try {
        hmrClient.enable();
      } finally {
        if (hasUpdates) {
          LoadingView.hide();
        }
      }

      showCompileError();
    },
    disable: function disable() {
      _$$_REQUIRE(_dependencyMap[5], "invariant")(hmrClient, 'Expected HMRClient.setup() call at startup.');

      hmrClient.disable();
    },
    registerBundle: function registerBundle(requestUrl) {
      _$$_REQUIRE(_dependencyMap[5], "invariant")(hmrClient, 'Expected HMRClient.setup() call at startup.');

      pendingEntryPoints.push(requestUrl);
      registerBundleEntryPoints(hmrClient);
    },
    log: function log(level, data) {
      if (!hmrClient) {
        pendingLogs.push([level, data]);

        if (pendingLogs.length > 100) {
          pendingLogs.shift();
        }

        return;
      }

      try {
        hmrClient.send(JSON.stringify({
          type: 'log',
          level: level,
          data: data.map(function (item) {
            return typeof item === 'string' ? item : _$$_REQUIRE(_dependencyMap[7], "pretty-format")(item, {
              escapeString: true,
              highlight: true,
              maxDepth: 3,
              min: true,
              plugins: [_$$_REQUIRE(_dependencyMap[7], "pretty-format").plugins.ReactElement]
            });
          })
        }));
      } catch (error) {}
    },
    setup: function setup(platform, bundleEntry, host, port, isEnabled) {
      _$$_REQUIRE(_dependencyMap[5], "invariant")(platform, 'Missing required parameter `platform`');

      _$$_REQUIRE(_dependencyMap[5], "invariant")(bundleEntry, 'Missing required parameter `bundleEntry`');

      _$$_REQUIRE(_dependencyMap[5], "invariant")(host, 'Missing required parameter `host`');

      _$$_REQUIRE(_dependencyMap[5], "invariant")(!hmrClient, 'Cannot initialize hmrClient twice');

      var LoadingView = _$$_REQUIRE(_dependencyMap[6], "./LoadingView");

      var wsHost = port !== null && port !== '' ? host + ":" + port : host;
      var client = new (_$$_REQUIRE(_dependencyMap[8], "metro-runtime/src/modules/HMRClient"))("ws://" + wsHost + "/hot");
      hmrClient = client;

      var _getDevServer = (0, _getDevServer2.default)(),
          fullBundleUrl = _getDevServer.fullBundleUrl;

      pendingEntryPoints.push(fullBundleUrl != null ? fullBundleUrl : "ws://" + wsHost + "/hot?bundleEntry=" + bundleEntry + "&platform=" + platform);
      client.on('connection-error', function (e) {
        var error = "Cannot connect to Metro.\n\nTry the following to fix the issue:\n- Ensure that Metro is running and available on the same network";

        if ("android" === 'ios') {
          error += "\n- Ensure that the Metro URL is correctly set in AppDelegate";
        } else {
          error += "\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081";
        }

        error += "\n\nURL: " + host + ":" + port + "\n\nError: " + e.message;
        setHMRUnavailableReason(error);
      });
      client.on('update-start', function (_ref) {
        var isInitialUpdate = _ref.isInitialUpdate;
        currentCompileErrorMessage = null;
        didConnect = true;

        if (client.isEnabled() && !isInitialUpdate) {
          LoadingView.showMessage('Refreshing...', 'refresh');
        }
      });
      client.on('update', function (_ref2) {
        var isInitialUpdate = _ref2.isInitialUpdate;

        if (client.isEnabled() && !isInitialUpdate) {
          dismissRedbox();
          LogBoxData.clear();
        }
      });
      client.on('update-done', function () {
        LoadingView.hide();
      });
      client.on('error', function (data) {
        LoadingView.hide();

        if (data.type === 'GraphNotFoundError') {
          client.close();
          setHMRUnavailableReason('Metro has restarted since the last edit. Reload to reconnect.');
        } else if (data.type === 'RevisionNotFoundError') {
          client.close();
          setHMRUnavailableReason('Metro and the client are out of sync. Reload to reconnect.');
        } else {
          currentCompileErrorMessage = data.type + " " + data.message;

          if (client.isEnabled()) {
            showCompileError();
          }
        }
      });
      client.on('close', function (data) {
        LoadingView.hide();
        setHMRUnavailableReason('Disconnected from Metro.');
      });

      if (isEnabled) {
        HMRClient.enable();
      } else {
        HMRClient.disable();
      }

      registerBundleEntryPoints(hmrClient);
      flushEarlyLogs(hmrClient);
    }
  };

  function setHMRUnavailableReason(reason) {
    _$$_REQUIRE(_dependencyMap[5], "invariant")(hmrClient, 'Expected HMRClient.setup() call at startup.');

    if (hmrUnavailableReason !== null) {
      return;
    }

    hmrUnavailableReason = reason;

    if (hmrClient.isEnabled() && didConnect) {
      console.warn(reason);
    }
  }

  function registerBundleEntryPoints(client) {
    if (hmrUnavailableReason != null) {
      _$$_REQUIRE(_dependencyMap[9], "./DevSettings").reload('Bundle Splitting – Metro disconnected');

      return;
    }

    if (pendingEntryPoints.length > 0) {
      client.send(JSON.stringify({
        type: 'register-entrypoints',
        entryPoints: pendingEntryPoints
      }));
      pendingEntryPoints.length = 0;
    }
  }

  function flushEarlyLogs(client) {
    try {
      pendingLogs.forEach(function (_ref3) {
        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
            level = _ref4[0],
            data = _ref4[1];

        HMRClient.log(level, data);
      });
    } finally {
      pendingLogs.length = 0;
    }
  }

  function dismissRedbox() {
    if ("android" === 'ios' && _NativeRedBox.default != null && _NativeRedBox.default.dismiss != null) {
      _NativeRedBox.default.dismiss();
    } else {
      var NativeExceptionsManager = _$$_REQUIRE(_dependencyMap[10], "../Core/NativeExceptionsManager").default;

      NativeExceptionsManager && NativeExceptionsManager.dismissRedbox && NativeExceptionsManager.dismissRedbox();
    }
  }

  function showCompileError() {
    if (currentCompileErrorMessage === null) {
      return;
    }

    dismissRedbox();
    var message = currentCompileErrorMessage;
    currentCompileErrorMessage = null;
    var error = new Error(message);
    error.preventSymbolication = true;
    throw error;
  }

  module.exports = HMRClient;
},419,[7,31,393,341,389,24,420,398,421,356,61],"node_modules/react-native/Libraries/Utilities/HMRClient.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _ToastAndroid = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Components/ToastAndroid/ToastAndroid"));

  var TOAST_SHORT_DELAY = 2000;
  var isVisible = false;
  module.exports = {
    showMessage: function showMessage(message, type) {
      if (!isVisible) {
        _ToastAndroid.default.show(message, _ToastAndroid.default.SHORT);

        isVisible = true;
        setTimeout(function () {
          isVisible = false;
        }, TOAST_SHORT_DELAY);
      }
    },
    hide: function hide() {}
  };
},420,[7,374],"node_modules/react-native/Libraries/Utilities/LoadingView.android.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  var inject = function inject(_ref) {
    var _ref$module = _slicedToArray(_ref.module, 2),
        id = _ref$module[0],
        code = _ref$module[1],
        sourceURL = _ref.sourceURL;

    if (global.globalEvalWithSourceUrl) {
      global.globalEvalWithSourceUrl(code, sourceURL);
    } else {
      eval(code);
    }
  };

  var injectUpdate = function injectUpdate(update) {
    update.added.forEach(inject);
    update.modified.forEach(inject);
  };

  var HMRClient = function (_EventEmitter) {
    _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/inherits")(HMRClient, _EventEmitter);

    var _super = _createSuper(HMRClient);

    function HMRClient(url) {
      var _this;

      _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/classCallCheck")(this, HMRClient);

      _this = _super.call(this);

      _defineProperty(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/assertThisInitialized")(_this), "_isEnabled", false);

      _defineProperty(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/assertThisInitialized")(_this), "_pendingUpdate", null);

      _defineProperty(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/assertThisInitialized")(_this), "_queue", []);

      _defineProperty(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/assertThisInitialized")(_this), "_state", "opening");

      _this._ws = new global.WebSocket(url);

      _this._ws.onopen = function () {
        _this._state = "open";

        _this.emit("open");

        _this._flushQueue();
      };

      _this._ws.onerror = function (error) {
        _this.emit("connection-error", error);
      };

      _this._ws.onclose = function () {
        _this._state = "closed";

        _this.emit("close");
      };

      _this._ws.onmessage = function (message) {
        var data = JSON.parse(message.data);

        switch (data.type) {
          case "bundle-registered":
            _this.emit("bundle-registered");

            break;

          case "update-start":
            _this.emit("update-start", data.body);

            break;

          case "update":
            _this.emit("update", data.body);

            break;

          case "update-done":
            _this.emit("update-done");

            break;

          case "error":
            _this.emit("error", data.body);

            break;

          default:
            _this.emit("error", {
              type: "unknown-message",
              message: data
            });

        }
      };

      _this.on("update", function (update) {
        if (_this._isEnabled) {
          injectUpdate(update);
        } else if (_this._pendingUpdate == null) {
          _this._pendingUpdate = update;
        } else {
          _this._pendingUpdate = mergeUpdates(_this._pendingUpdate, update);
        }
      });

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(HMRClient, [{
      key: "close",
      value: function close() {
        this._ws.close();
      }
    }, {
      key: "send",
      value: function send(message) {
        switch (this._state) {
          case "opening":
            this._queue.push(message);

            break;

          case "open":
            this._ws.send(message);

            break;

          case "closed":
            break;

          default:
            throw new Error("[WebSocketHMRClient] Unknown state: " + this._state);
        }
      }
    }, {
      key: "_flushQueue",
      value: function _flushQueue() {
        var _this2 = this;

        this._queue.forEach(function (message) {
          return _this2.send(message);
        });

        this._queue.length = 0;
      }
    }, {
      key: "enable",
      value: function enable() {
        this._isEnabled = true;
        var update = this._pendingUpdate;
        this._pendingUpdate = null;

        if (update != null) {
          injectUpdate(update);
        }
      }
    }, {
      key: "disable",
      value: function disable() {
        this._isEnabled = false;
      }
    }, {
      key: "isEnabled",
      value: function isEnabled() {
        return this._isEnabled;
      }
    }, {
      key: "hasPendingUpdates",
      value: function hasPendingUpdates() {
        return this._pendingUpdate != null;
      }
    }]);

    return HMRClient;
  }(_$$_REQUIRE(_dependencyMap[6], "./vendor/eventemitter3"));

  function mergeUpdates(base, next) {
    var addedIDs = new Set();
    var deletedIDs = new Set();
    var moduleMap = new Map();
    applyUpdateLocally(base);
    applyUpdateLocally(next);

    function applyUpdateLocally(update) {
      update.deleted.forEach(function (id) {
        if (addedIDs.has(id)) {
          addedIDs.delete(id);
        } else {
          deletedIDs.add(id);
        }

        moduleMap.delete(id);
      });
      update.added.forEach(function (item) {
        var id = item.module[0];

        if (deletedIDs.has(id)) {
          deletedIDs.delete(id);
        } else {
          addedIDs.add(id);
        }

        moduleMap.set(id, item);
      });
      update.modified.forEach(function (item) {
        var id = item.module[0];
        moduleMap.set(id, item);
      });
    }

    var result = {
      isInitialUpdate: next.isInitialUpdate,
      revisionId: next.revisionId,
      added: [],
      modified: [],
      deleted: []
    };
    deletedIDs.forEach(function (id) {
      result.deleted.push(id);
    });
    moduleMap.forEach(function (item, id) {
      if (deletedIDs.has(id)) {
        return;
      }

      if (addedIDs.has(id)) {
        result.added.push(item);
      } else {
        result.modified.push(item);
      }
    });
    return result;
  }

  module.exports = HMRClient;
},421,[13,16,14,9,18,10,422],"node_modules/metro-runtime/src/modules/HMRClient.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var has = Object.prototype.hasOwnProperty,
      prefix = "~";

  function Events() {}

  if (Object.create) {
    Events.prototype = Object.create(null);
    if (!new Events().__proto__) prefix = false;
  }

  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== "function") {
      throw new TypeError("The listener must be a function");
    }

    var listener = new EE(fn, context || emitter, once),
        evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }

  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
  }

  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    var names = [],
        events,
        name;
    if (this._eventsCount === 0) return names;

    for (name in events = this._events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event,
        handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };

  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event,
        listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };

  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;

        case 2:
          return listeners.fn.call(listeners.context, a1), true;

        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;

        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;

        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length,
          j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;

          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;

          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;

          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;

          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };

  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };

  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;

    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events.push(listeners[i]);
        }
      }

      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  EventEmitter.prefixed = prefix;
  EventEmitter.EventEmitter = EventEmitter;

  if ("undefined" !== typeof module) {
    module.exports = EventEmitter;
  }
},422,[],"node_modules/metro-runtime/src/modules/vendor/eventemitter3.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  _$$_REQUIRE(_dependencyMap[0], "./ReactNativeVersionCheck").checkVersions();
},423,[424],"node_modules/react-native/Libraries/Core/checkNativeVersion.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Utilities/Platform"));

  exports.checkVersions = function checkVersions() {
    var nativeVersion = _Platform.default.constants.reactNativeVersion;

    if (_$$_REQUIRE(_dependencyMap[2], "./ReactNativeVersion").version.major !== nativeVersion.major || _$$_REQUIRE(_dependencyMap[2], "./ReactNativeVersion").version.minor !== nativeVersion.minor) {
      console.error("React Native version mismatch.\n\nJavaScript version: " + _formatVersion(_$$_REQUIRE(_dependencyMap[2], "./ReactNativeVersion").version) + "\n" + ("Native version: " + _formatVersion(nativeVersion) + "\n\n") + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');
    }
  };

  function _formatVersion(version) {
    return version.major + "." + version.minor + "." + version.patch + (version.prerelease != undefined ? "-" + version.prerelease : '');
  }
},424,[7,65,425],"node_modules/react-native/Libraries/Core/ReactNativeVersionCheck.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  exports.version = {
    major: 0,
    minor: 64,
    patch: 2,
    prerelease: null
  };
},425,[],"node_modules/react-native/Libraries/Core/ReactNativeVersion.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../Utilities/Platform"));

  if (__DEV__) {
    if (!global.RN$Bridgeless) {
      if (!global.__RCTProfileIsProfiling) {
        _$$_REQUIRE(_dependencyMap[2], "./setUpReactDevTools");

        var JSInspector = _$$_REQUIRE(_dependencyMap[3], "../JSInspector/JSInspector");

        JSInspector.registerAgent(_$$_REQUIRE(_dependencyMap[4], "../JSInspector/NetworkAgent"));
      }

      var isLikelyARealBrowser = global.navigator != null && global.navigator.appName === 'Netscape';

      if (!_Platform.default.isTesting) {
        var HMRClient = _$$_REQUIRE(_dependencyMap[5], "../Utilities/HMRClient");

        if (console._isPolyfilled) {
          ['trace', 'info', 'warn', 'error', 'log', 'group', 'groupCollapsed', 'groupEnd', 'debug'].forEach(function (level) {
            var originalFunction = console[level];

            console[level] = function () {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              HMRClient.log(level, args);
              originalFunction.apply(console, args);
            };
          });
        } else {
          HMRClient.log('log', ["JavaScript logs will appear in your " + (isLikelyARealBrowser ? 'browser' : 'environment') + " console"]);
        }
      }

      _$$_REQUIRE(_dependencyMap[6], "./setUpReactRefresh");
    }
  }
},426,[7,65,427,429,430,419,432],"node_modules/react-native/Libraries/Core/setUpDeveloperTools.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (__DEV__) {
    var reactDevTools = _$$_REQUIRE(_dependencyMap[0], "react-devtools-core");

    var connectToDevTools = function connectToDevTools() {
      if (!window.document) {
        var AppState = _$$_REQUIRE(_dependencyMap[1], "../AppState/AppState");

        var getDevServer = _$$_REQUIRE(_dependencyMap[2], "./Devtools/getDevServer");

        var isAppActive = function isAppActive() {
          return AppState.currentState !== 'background';
        };

        var devServer = getDevServer();
        var host = devServer.bundleLoadedFromServer ? devServer.url.replace(/https?:\/\//, '').split(':')[0] : 'localhost';
        var port = window.__REACT_DEVTOOLS_PORT__ != null ? window.__REACT_DEVTOOLS_PORT__ : 8097;

        var WebSocket = _$$_REQUIRE(_dependencyMap[3], "../WebSocket/WebSocket");

        var ws = new WebSocket('ws://' + host + ':' + port);

        var viewConfig = _$$_REQUIRE(_dependencyMap[4], "../Components/View/ReactNativeViewViewConfig");

        reactDevTools.connectToDevTools({
          isAppActive: isAppActive,
          resolveRNStyle: _$$_REQUIRE(_dependencyMap[5], "../StyleSheet/flattenStyle"),
          nativeStyleEditorValidAttributes: Object.keys(viewConfig.validAttributes.style),
          websocket: ws
        });
      }
    };

    var RCTNativeAppEventEmitter = _$$_REQUIRE(_dependencyMap[6], "../EventEmitter/RCTNativeAppEventEmitter");

    RCTNativeAppEventEmitter.addListener('RCTDevMenuShown', connectToDevTools);
    connectToDevTools();
  }
},427,[428,345,393,108,140,153,129],"node_modules/react-native/Libraries/Core/setUpReactDevTools.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  (function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports["ReactDevToolsBackend"] = factory();else root["ReactDevToolsBackend"] = factory();
  })(window, function () {
    return function (modules) {
      var installedModules = {};

      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }

        var module = installedModules[moduleId] = {
          i: moduleId,
          l: false,
          exports: {}
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.l = true;
        return module.exports;
      }

      __webpack_require__.m = modules;
      __webpack_require__.c = installedModules;

      __webpack_require__.d = function (exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, {
            enumerable: true,
            get: getter
          });
        }
      };

      __webpack_require__.r = function (exports) {
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, {
            value: 'Module'
          });
        }

        Object.defineProperty(exports, '__esModule', {
          value: true
        });
      };

      __webpack_require__.t = function (value, mode) {
        if (mode & 1) value = __webpack_require__(value);
        if (mode & 8) return value;
        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
        var ns = Object.create(null);

        __webpack_require__.r(ns);

        Object.defineProperty(ns, 'default', {
          enumerable: true,
          value: value
        });
        if (mode & 2 && typeof value != 'string') for (var key in value) {
          __webpack_require__.d(ns, key, function (key) {
            return value[key];
          }.bind(null, key));
        }
        return ns;
      };

      __webpack_require__.n = function (module) {
        var getter = module && module.__esModule ? function getDefault() {
          return module['default'];
        } : function getModuleExports() {
          return module;
        };

        __webpack_require__.d(getter, 'a', getter);

        return getter;
      };

      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };

      __webpack_require__.p = "";
      return __webpack_require__(__webpack_require__.s = 20);
    }([function (module, exports, __webpack_require__) {
      "use strict";

      if (true) {
        module.exports = __webpack_require__(12);
      } else {}
    }, function (module, exports, __webpack_require__) {
      "use strict";
      /*
      object-assign
      (c) Sindre Sorhus
      @license MIT
      */

      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;

      function toObject(val) {
        if (val === null || val === undefined) {
          throw new TypeError('Object.assign cannot be called with null or undefined');
        }

        return Object(val);
      }

      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }

          var test1 = new String('abc');
          test1[5] = 'de';

          if (Object.getOwnPropertyNames(test1)[0] === '5') {
            return false;
          }

          var test2 = {};

          for (var i = 0; i < 10; i++) {
            test2['_' + String.fromCharCode(i)] = i;
          }

          var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
            return test2[n];
          });

          if (order2.join('') !== '0123456789') {
            return false;
          }

          var test3 = {};
          'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
            test3[letter] = letter;
          });

          if (Object.keys(_$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/extends")({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
            return false;
          }

          return true;
        } catch (err) {
          return false;
        }
      }

      module.exports = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;

        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);

          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }

          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);

            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }

        return to;
      };
    }, function (module, exports, __webpack_require__) {
      (function (process) {
        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        exports = module.exports = SemVer;
        var debug;

        if ((typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
          debug = function debug() {
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift('SEMVER');
            console.log.apply(console, args);
          };
        } else {
          debug = function debug() {};
        }

        exports.SEMVER_SPEC_VERSION = '2.0.0';
        var MAX_LENGTH = 256;
        var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
        var MAX_SAFE_COMPONENT_LENGTH = 16;
        var re = exports.re = [];
        var src = exports.src = [];
        var t = exports.tokens = {};
        var R = 0;

        function tok(n) {
          t[n] = R++;
        }

        tok('NUMERICIDENTIFIER');
        src[t.NUMERICIDENTIFIER] = '0|[1-9]\\d*';
        tok('NUMERICIDENTIFIERLOOSE');
        src[t.NUMERICIDENTIFIERLOOSE] = '[0-9]+';
        tok('NONNUMERICIDENTIFIER');
        src[t.NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';
        tok('MAINVERSION');
        src[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')\\.' + '(' + src[t.NUMERICIDENTIFIER] + ')';
        tok('MAINVERSIONLOOSE');
        src[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')';
        tok('PRERELEASEIDENTIFIER');
        src[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] + '|' + src[t.NONNUMERICIDENTIFIER] + ')';
        tok('PRERELEASEIDENTIFIERLOOSE');
        src[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] + '|' + src[t.NONNUMERICIDENTIFIER] + ')';
        tok('PRERELEASE');
        src[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] + '(?:\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))';
        tok('PRERELEASELOOSE');
        src[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] + '(?:\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))';
        tok('BUILDIDENTIFIER');
        src[t.BUILDIDENTIFIER] = '[0-9A-Za-z-]+';
        tok('BUILD');
        src[t.BUILD] = '(?:\\+(' + src[t.BUILDIDENTIFIER] + '(?:\\.' + src[t.BUILDIDENTIFIER] + ')*))';
        tok('FULL');
        tok('FULLPLAIN');
        src[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] + src[t.PRERELEASE] + '?' + src[t.BUILD] + '?';
        src[t.FULL] = '^' + src[t.FULLPLAIN] + '$';
        tok('LOOSEPLAIN');
        src[t.LOOSEPLAIN] = '[v=\\s]*' + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + '?' + src[t.BUILD] + '?';
        tok('LOOSE');
        src[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$';
        tok('GTLT');
        src[t.GTLT] = '((?:<|>)?=?)';
        tok('XRANGEIDENTIFIERLOOSE');
        src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
        tok('XRANGEIDENTIFIER');
        src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\*';
        tok('XRANGEPLAIN');
        src[t.XRANGEPLAIN] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' + '(?:' + src[t.PRERELEASE] + ')?' + src[t.BUILD] + '?' + ')?)?';
        tok('XRANGEPLAINLOOSE');
        src[t.XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[t.PRERELEASELOOSE] + ')?' + src[t.BUILD] + '?' + ')?)?';
        tok('XRANGE');
        src[t.XRANGE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAIN] + '$';
        tok('XRANGELOOSE');
        src[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAINLOOSE] + '$';
        tok('COERCE');
        src[t.COERCE] = '(^|[^\\d])' + '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:$|[^\\d])';
        tok('COERCERTL');
        re[t.COERCERTL] = new RegExp(src[t.COERCE], 'g');
        tok('LONETILDE');
        src[t.LONETILDE] = '(?:~>?)';
        tok('TILDETRIM');
        src[t.TILDETRIM] = '(\\s*)' + src[t.LONETILDE] + '\\s+';
        re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g');
        var tildeTrimReplace = '$1~';
        tok('TILDE');
        src[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$';
        tok('TILDELOOSE');
        src[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$';
        tok('LONECARET');
        src[t.LONECARET] = '(?:\\^)';
        tok('CARETTRIM');
        src[t.CARETTRIM] = '(\\s*)' + src[t.LONECARET] + '\\s+';
        re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g');
        var caretTrimReplace = '$1^';
        tok('CARET');
        src[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$';
        tok('CARETLOOSE');
        src[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$';
        tok('COMPARATORLOOSE');
        src[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + ')$|^$';
        tok('COMPARATOR');
        src[t.COMPARATOR] = '^' + src[t.GTLT] + '\\s*(' + src[t.FULLPLAIN] + ')$|^$';
        tok('COMPARATORTRIM');
        src[t.COMPARATORTRIM] = '(\\s*)' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')';
        re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g');
        var comparatorTrimReplace = '$1$2$3';
        tok('HYPHENRANGE');
        src[t.HYPHENRANGE] = '^\\s*(' + src[t.XRANGEPLAIN] + ')' + '\\s+-\\s+' + '(' + src[t.XRANGEPLAIN] + ')' + '\\s*$';
        tok('HYPHENRANGELOOSE');
        src[t.HYPHENRANGELOOSE] = '^\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\s+-\\s+' + '(' + src[t.XRANGEPLAINLOOSE] + ')' + '\\s*$';
        tok('STAR');
        src[t.STAR] = '(<|>)?=?\\s*\\*';

        for (var i = 0; i < R; i++) {
          debug(i, src[i]);

          if (!re[i]) {
            re[i] = new RegExp(src[i]);
          }
        }

        exports.parse = parse;

        function parse(version, options) {
          if (!options || _typeof(options) !== 'object') {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }

          if (version instanceof SemVer) {
            return version;
          }

          if (typeof version !== 'string') {
            return null;
          }

          if (version.length > MAX_LENGTH) {
            return null;
          }

          var r = options.loose ? re[t.LOOSE] : re[t.FULL];

          if (!r.test(version)) {
            return null;
          }

          try {
            return new SemVer(version, options);
          } catch (er) {
            return null;
          }
        }

        exports.valid = valid;

        function valid(version, options) {
          var v = parse(version, options);
          return v ? v.version : null;
        }

        exports.clean = clean;

        function clean(version, options) {
          var s = parse(version.trim().replace(/^[=v]+/, ''), options);
          return s ? s.version : null;
        }

        exports.SemVer = SemVer;

        function SemVer(version, options) {
          if (!options || _typeof(options) !== 'object') {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }

          if (version instanceof SemVer) {
            if (version.loose === options.loose) {
              return version;
            } else {
              version = version.version;
            }
          } else if (typeof version !== 'string') {
            throw new TypeError('Invalid Version: ' + version);
          }

          if (version.length > MAX_LENGTH) {
            throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');
          }

          if (!(this instanceof SemVer)) {
            return new SemVer(version, options);
          }

          debug('SemVer', version, options);
          this.options = options;
          this.loose = !!options.loose;
          var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);

          if (!m) {
            throw new TypeError('Invalid Version: ' + version);
          }

          this.raw = version;
          this.major = +m[1];
          this.minor = +m[2];
          this.patch = +m[3];

          if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
            throw new TypeError('Invalid major version');
          }

          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
            throw new TypeError('Invalid minor version');
          }

          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
            throw new TypeError('Invalid patch version');
          }

          if (!m[4]) {
            this.prerelease = [];
          } else {
            this.prerelease = m[4].split('.').map(function (id) {
              if (/^[0-9]+$/.test(id)) {
                var num = +id;

                if (num >= 0 && num < MAX_SAFE_INTEGER) {
                  return num;
                }
              }

              return id;
            });
          }

          this.build = m[5] ? m[5].split('.') : [];
          this.format();
        }

        SemVer.prototype.format = function () {
          this.version = this.major + '.' + this.minor + '.' + this.patch;

          if (this.prerelease.length) {
            this.version += '-' + this.prerelease.join('.');
          }

          return this.version;
        };

        SemVer.prototype.toString = function () {
          return this.version;
        };

        SemVer.prototype.compare = function (other) {
          debug('SemVer.compare', this.version, this.options, other);

          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }

          return this.compareMain(other) || this.comparePre(other);
        };

        SemVer.prototype.compareMain = function (other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }

          return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        };

        SemVer.prototype.comparePre = function (other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }

          if (this.prerelease.length && !other.prerelease.length) {
            return -1;
          } else if (!this.prerelease.length && other.prerelease.length) {
            return 1;
          } else if (!this.prerelease.length && !other.prerelease.length) {
            return 0;
          }

          var i = 0;

          do {
            var a = this.prerelease[i];
            var b = other.prerelease[i];
            debug('prerelease compare', i, a, b);

            if (a === undefined && b === undefined) {
              return 0;
            } else if (b === undefined) {
              return 1;
            } else if (a === undefined) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        };

        SemVer.prototype.compareBuild = function (other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }

          var i = 0;

          do {
            var a = this.build[i];
            var b = other.build[i];
            debug('prerelease compare', i, a, b);

            if (a === undefined && b === undefined) {
              return 0;
            } else if (b === undefined) {
              return 1;
            } else if (a === undefined) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        };

        SemVer.prototype.inc = function (release, identifier) {
          switch (release) {
            case 'premajor':
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor = 0;
              this.major++;
              this.inc('pre', identifier);
              break;

            case 'preminor':
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor++;
              this.inc('pre', identifier);
              break;

            case 'prepatch':
              this.prerelease.length = 0;
              this.inc('patch', identifier);
              this.inc('pre', identifier);
              break;

            case 'prerelease':
              if (this.prerelease.length === 0) {
                this.inc('patch', identifier);
              }

              this.inc('pre', identifier);
              break;

            case 'major':
              if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                this.major++;
              }

              this.minor = 0;
              this.patch = 0;
              this.prerelease = [];
              break;

            case 'minor':
              if (this.patch !== 0 || this.prerelease.length === 0) {
                this.minor++;
              }

              this.patch = 0;
              this.prerelease = [];
              break;

            case 'patch':
              if (this.prerelease.length === 0) {
                this.patch++;
              }

              this.prerelease = [];
              break;

            case 'pre':
              if (this.prerelease.length === 0) {
                this.prerelease = [0];
              } else {
                var i = this.prerelease.length;

                while (--i >= 0) {
                  if (typeof this.prerelease[i] === 'number') {
                    this.prerelease[i]++;
                    i = -2;
                  }
                }

                if (i === -1) {
                  this.prerelease.push(0);
                }
              }

              if (identifier) {
                if (this.prerelease[0] === identifier) {
                  if (isNaN(this.prerelease[1])) {
                    this.prerelease = [identifier, 0];
                  }
                } else {
                  this.prerelease = [identifier, 0];
                }
              }

              break;

            default:
              throw new Error('invalid increment argument: ' + release);
          }

          this.format();
          this.raw = this.version;
          return this;
        };

        exports.inc = inc;

        function inc(version, release, loose, identifier) {
          if (typeof loose === 'string') {
            identifier = loose;
            loose = undefined;
          }

          try {
            return new SemVer(version, loose).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        }

        exports.diff = diff;

        function diff(version1, version2) {
          if (eq(version1, version2)) {
            return null;
          } else {
            var v1 = parse(version1);
            var v2 = parse(version2);
            var prefix = '';

            if (v1.prerelease.length || v2.prerelease.length) {
              prefix = 'pre';
              var defaultResult = 'prerelease';
            }

            for (var key in v1) {
              if (key === 'major' || key === 'minor' || key === 'patch') {
                if (v1[key] !== v2[key]) {
                  return prefix + key;
                }
              }
            }

            return defaultResult;
          }
        }

        exports.compareIdentifiers = compareIdentifiers;
        var numeric = /^[0-9]+$/;

        function compareIdentifiers(a, b) {
          var anum = numeric.test(a);
          var bnum = numeric.test(b);

          if (anum && bnum) {
            a = +a;
            b = +b;
          }

          return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
        }

        exports.rcompareIdentifiers = rcompareIdentifiers;

        function rcompareIdentifiers(a, b) {
          return compareIdentifiers(b, a);
        }

        exports.major = major;

        function major(a, loose) {
          return new SemVer(a, loose).major;
        }

        exports.minor = minor;

        function minor(a, loose) {
          return new SemVer(a, loose).minor;
        }

        exports.patch = patch;

        function patch(a, loose) {
          return new SemVer(a, loose).patch;
        }

        exports.compare = compare;

        function compare(a, b, loose) {
          return new SemVer(a, loose).compare(new SemVer(b, loose));
        }

        exports.compareLoose = compareLoose;

        function compareLoose(a, b) {
          return compare(a, b, true);
        }

        exports.compareBuild = compareBuild;

        function compareBuild(a, b, loose) {
          var versionA = new SemVer(a, loose);
          var versionB = new SemVer(b, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        }

        exports.rcompare = rcompare;

        function rcompare(a, b, loose) {
          return compare(b, a, loose);
        }

        exports.sort = sort;

        function sort(list, loose) {
          return list.sort(function (a, b) {
            return exports.compareBuild(a, b, loose);
          });
        }

        exports.rsort = rsort;

        function rsort(list, loose) {
          return list.sort(function (a, b) {
            return exports.compareBuild(b, a, loose);
          });
        }

        exports.gt = gt;

        function gt(a, b, loose) {
          return compare(a, b, loose) > 0;
        }

        exports.lt = lt;

        function lt(a, b, loose) {
          return compare(a, b, loose) < 0;
        }

        exports.eq = eq;

        function eq(a, b, loose) {
          return compare(a, b, loose) === 0;
        }

        exports.neq = neq;

        function neq(a, b, loose) {
          return compare(a, b, loose) !== 0;
        }

        exports.gte = gte;

        function gte(a, b, loose) {
          return compare(a, b, loose) >= 0;
        }

        exports.lte = lte;

        function lte(a, b, loose) {
          return compare(a, b, loose) <= 0;
        }

        exports.cmp = cmp;

        function cmp(a, op, b, loose) {
          switch (op) {
            case '===':
              if (_typeof(a) === 'object') a = a.version;
              if (_typeof(b) === 'object') b = b.version;
              return a === b;

            case '!==':
              if (_typeof(a) === 'object') a = a.version;
              if (_typeof(b) === 'object') b = b.version;
              return a !== b;

            case '':
            case '=':
            case '==':
              return eq(a, b, loose);

            case '!=':
              return neq(a, b, loose);

            case '>':
              return gt(a, b, loose);

            case '>=':
              return gte(a, b, loose);

            case '<':
              return lt(a, b, loose);

            case '<=':
              return lte(a, b, loose);

            default:
              throw new TypeError('Invalid operator: ' + op);
          }
        }

        exports.Comparator = Comparator;

        function Comparator(comp, options) {
          if (!options || _typeof(options) !== 'object') {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }

          if (comp instanceof Comparator) {
            if (comp.loose === !!options.loose) {
              return comp;
            } else {
              comp = comp.value;
            }
          }

          if (!(this instanceof Comparator)) {
            return new Comparator(comp, options);
          }

          debug('comparator', comp, options);
          this.options = options;
          this.loose = !!options.loose;
          this.parse(comp);

          if (this.semver === ANY) {
            this.value = '';
          } else {
            this.value = this.operator + this.semver.version;
          }

          debug('comp', this);
        }

        var ANY = {};

        Comparator.prototype.parse = function (comp) {
          var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
          var m = comp.match(r);

          if (!m) {
            throw new TypeError('Invalid comparator: ' + comp);
          }

          this.operator = m[1] !== undefined ? m[1] : '';

          if (this.operator === '=') {
            this.operator = '';
          }

          if (!m[2]) {
            this.semver = ANY;
          } else {
            this.semver = new SemVer(m[2], this.options.loose);
          }
        };

        Comparator.prototype.toString = function () {
          return this.value;
        };

        Comparator.prototype.test = function (version) {
          debug('Comparator.test', version, this.options.loose);

          if (this.semver === ANY || version === ANY) {
            return true;
          }

          if (typeof version === 'string') {
            try {
              version = new SemVer(version, this.options);
            } catch (er) {
              return false;
            }
          }

          return cmp(version, this.operator, this.semver, this.options);
        };

        Comparator.prototype.intersects = function (comp, options) {
          if (!(comp instanceof Comparator)) {
            throw new TypeError('a Comparator is required');
          }

          if (!options || _typeof(options) !== 'object') {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }

          var rangeTmp;

          if (this.operator === '') {
            if (this.value === '') {
              return true;
            }

            rangeTmp = new Range(comp.value, options);
            return satisfies(this.value, rangeTmp, options);
          } else if (comp.operator === '') {
            if (comp.value === '') {
              return true;
            }

            rangeTmp = new Range(this.value, options);
            return satisfies(comp.semver, rangeTmp, options);
          }

          var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');
          var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');
          var sameSemVer = this.semver.version === comp.semver.version;
          var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');
          var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');
          var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');
          return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
        };

        exports.Range = Range;

        function Range(range, options) {
          if (!options || _typeof(options) !== 'object') {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }

          if (range instanceof Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
              return range;
            } else {
              return new Range(range.raw, options);
            }
          }

          if (range instanceof Comparator) {
            return new Range(range.value, options);
          }

          if (!(this instanceof Range)) {
            return new Range(range, options);
          }

          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          this.raw = range;
          this.set = range.split(/\s*\|\|\s*/).map(function (range) {
            return this.parseRange(range.trim());
          }, this).filter(function (c) {
            return c.length;
          });

          if (!this.set.length) {
            throw new TypeError('Invalid SemVer Range: ' + range);
          }

          this.format();
        }

        Range.prototype.format = function () {
          this.range = this.set.map(function (comps) {
            return comps.join(' ').trim();
          }).join('||').trim();
          return this.range;
        };

        Range.prototype.toString = function () {
          return this.range;
        };

        Range.prototype.parseRange = function (range) {
          var loose = this.options.loose;
          range = range.trim();
          var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
          range = range.replace(hr, hyphenReplace);
          debug('hyphen replace', range);
          range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
          debug('comparator trim', range, re[t.COMPARATORTRIM]);
          range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
          range = range.replace(re[t.CARETTRIM], caretTrimReplace);
          range = range.split(/\s+/).join(' ');
          var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
          var set = range.split(' ').map(function (comp) {
            return parseComparator(comp, this.options);
          }, this).join(' ').split(/\s+/);

          if (this.options.loose) {
            set = set.filter(function (comp) {
              return !!comp.match(compRe);
            });
          }

          set = set.map(function (comp) {
            return new Comparator(comp, this.options);
          }, this);
          return set;
        };

        Range.prototype.intersects = function (range, options) {
          if (!(range instanceof Range)) {
            throw new TypeError('a Range is required');
          }

          return this.set.some(function (thisComparators) {
            return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {
              return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {
                return rangeComparators.every(function (rangeComparator) {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        };

        function isSatisfiable(comparators, options) {
          var result = true;
          var remainingComparators = comparators.slice();
          var testComparator = remainingComparators.pop();

          while (result && remainingComparators.length) {
            result = remainingComparators.every(function (otherComparator) {
              return testComparator.intersects(otherComparator, options);
            });
            testComparator = remainingComparators.pop();
          }

          return result;
        }

        exports.toComparators = toComparators;

        function toComparators(range, options) {
          return new Range(range, options).set.map(function (comp) {
            return comp.map(function (c) {
              return c.value;
            }).join(' ').trim().split(' ');
          });
        }

        function parseComparator(comp, options) {
          debug('comp', comp, options);
          comp = replaceCarets(comp, options);
          debug('caret', comp);
          comp = replaceTildes(comp, options);
          debug('tildes', comp);
          comp = replaceXRanges(comp, options);
          debug('xrange', comp);
          comp = replaceStars(comp, options);
          debug('stars', comp);
          return comp;
        }

        function isX(id) {
          return !id || id.toLowerCase() === 'x' || id === '*';
        }

        function replaceTildes(comp, options) {
          return comp.trim().split(/\s+/).map(function (comp) {
            return replaceTilde(comp, options);
          }).join(' ');
        }

        function replaceTilde(comp, options) {
          var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
          return comp.replace(r, function (_, M, m, p, pr) {
            debug('tilde', comp, _, M, m, p, pr);
            var ret;

            if (isX(M)) {
              ret = '';
            } else if (isX(m)) {
              ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
            } else if (isX(p)) {
              ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
            } else if (pr) {
              debug('replaceTilde pr', pr);
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
            } else {
              ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
            }

            debug('tilde return', ret);
            return ret;
          });
        }

        function replaceCarets(comp, options) {
          return comp.trim().split(/\s+/).map(function (comp) {
            return replaceCaret(comp, options);
          }).join(' ');
        }

        function replaceCaret(comp, options) {
          debug('caret', comp, options);
          var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
          return comp.replace(r, function (_, M, m, p, pr) {
            debug('caret', comp, _, M, m, p, pr);
            var ret;

            if (isX(M)) {
              ret = '';
            } else if (isX(m)) {
              ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
            } else if (isX(p)) {
              if (M === '0') {
                ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
              } else {
                ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
              }
            } else if (pr) {
              debug('replaceCaret pr', pr);

              if (M === '0') {
                if (m === '0') {
                  ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + m + '.' + (+p + 1);
                } else {
                  ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
                }
              } else {
                ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + (+M + 1) + '.0.0';
              }
            } else {
              debug('no pr');

              if (M === '0') {
                if (m === '0') {
                  ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);
                } else {
                  ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
                }
              } else {
                ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';
              }
            }

            debug('caret return', ret);
            return ret;
          });
        }

        function replaceXRanges(comp, options) {
          debug('replaceXRanges', comp, options);
          return comp.split(/\s+/).map(function (comp) {
            return replaceXRange(comp, options);
          }).join(' ');
        }

        function replaceXRange(comp, options) {
          comp = comp.trim();
          var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
          return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
            debug('xRange', comp, ret, gtlt, M, m, p, pr);
            var xM = isX(M);
            var xm = xM || isX(m);
            var xp = xm || isX(p);
            var anyX = xp;

            if (gtlt === '=' && anyX) {
              gtlt = '';
            }

            pr = options.includePrerelease ? '-0' : '';

            if (xM) {
              if (gtlt === '>' || gtlt === '<') {
                ret = '<0.0.0-0';
              } else {
                ret = '*';
              }
            } else if (gtlt && anyX) {
              if (xm) {
                m = 0;
              }

              p = 0;

              if (gtlt === '>') {
                gtlt = '>=';

                if (xm) {
                  M = +M + 1;
                  m = 0;
                  p = 0;
                } else {
                  m = +m + 1;
                  p = 0;
                }
              } else if (gtlt === '<=') {
                gtlt = '<';

                if (xm) {
                  M = +M + 1;
                } else {
                  m = +m + 1;
                }
              }

              ret = gtlt + M + '.' + m + '.' + p + pr;
            } else if (xm) {
              ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr;
            } else if (xp) {
              ret = '>=' + M + '.' + m + '.0' + pr + ' <' + M + '.' + (+m + 1) + '.0' + pr;
            }

            debug('xRange return', ret);
            return ret;
          });
        }

        function replaceStars(comp, options) {
          debug('replaceStars', comp, options);
          return comp.trim().replace(re[t.STAR], '');
        }

        function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
          if (isX(fM)) {
            from = '';
          } else if (isX(fm)) {
            from = '>=' + fM + '.0.0';
          } else if (isX(fp)) {
            from = '>=' + fM + '.' + fm + '.0';
          } else {
            from = '>=' + from;
          }

          if (isX(tM)) {
            to = '';
          } else if (isX(tm)) {
            to = '<' + (+tM + 1) + '.0.0';
          } else if (isX(tp)) {
            to = '<' + tM + '.' + (+tm + 1) + '.0';
          } else if (tpr) {
            to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
          } else {
            to = '<=' + to;
          }

          return (from + ' ' + to).trim();
        }

        Range.prototype.test = function (version) {
          if (!version) {
            return false;
          }

          if (typeof version === 'string') {
            try {
              version = new SemVer(version, this.options);
            } catch (er) {
              return false;
            }
          }

          for (var i = 0; i < this.set.length; i++) {
            if (testSet(this.set[i], version, this.options)) {
              return true;
            }
          }

          return false;
        };

        function testSet(set, version, options) {
          for (var i = 0; i < set.length; i++) {
            if (!set[i].test(version)) {
              return false;
            }
          }

          if (version.prerelease.length && !options.includePrerelease) {
            for (i = 0; i < set.length; i++) {
              debug(set[i].semver);

              if (set[i].semver === ANY) {
                continue;
              }

              if (set[i].semver.prerelease.length > 0) {
                var allowed = set[i].semver;

                if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
                  return true;
                }
              }
            }

            return false;
          }

          return true;
        }

        exports.satisfies = satisfies;

        function satisfies(version, range, options) {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }

          return range.test(version);
        }

        exports.maxSatisfying = maxSatisfying;

        function maxSatisfying(versions, range, options) {
          var max = null;
          var maxSV = null;

          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }

          versions.forEach(function (v) {
            if (rangeObj.test(v)) {
              if (!max || maxSV.compare(v) === -1) {
                max = v;
                maxSV = new SemVer(max, options);
              }
            }
          });
          return max;
        }

        exports.minSatisfying = minSatisfying;

        function minSatisfying(versions, range, options) {
          var min = null;
          var minSV = null;

          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }

          versions.forEach(function (v) {
            if (rangeObj.test(v)) {
              if (!min || minSV.compare(v) === 1) {
                min = v;
                minSV = new SemVer(min, options);
              }
            }
          });
          return min;
        }

        exports.minVersion = minVersion;

        function minVersion(range, loose) {
          range = new Range(range, loose);
          var minver = new SemVer('0.0.0');

          if (range.test(minver)) {
            return minver;
          }

          minver = new SemVer('0.0.0-0');

          if (range.test(minver)) {
            return minver;
          }

          minver = null;

          for (var i = 0; i < range.set.length; ++i) {
            var comparators = range.set[i];
            comparators.forEach(function (comparator) {
              var compver = new SemVer(comparator.semver.version);

              switch (comparator.operator) {
                case '>':
                  if (compver.prerelease.length === 0) {
                    compver.patch++;
                  } else {
                    compver.prerelease.push(0);
                  }

                  compver.raw = compver.format();

                case '':
                case '>=':
                  if (!minver || gt(minver, compver)) {
                    minver = compver;
                  }

                  break;

                case '<':
                case '<=':
                  break;

                default:
                  throw new Error('Unexpected operation: ' + comparator.operator);
              }
            });
          }

          if (minver && range.test(minver)) {
            return minver;
          }

          return null;
        }

        exports.validRange = validRange;

        function validRange(range, options) {
          try {
            return new Range(range, options).range || '*';
          } catch (er) {
            return null;
          }
        }

        exports.ltr = ltr;

        function ltr(version, range, options) {
          return outside(version, range, '<', options);
        }

        exports.gtr = gtr;

        function gtr(version, range, options) {
          return outside(version, range, '>', options);
        }

        exports.outside = outside;

        function outside(version, range, hilo, options) {
          version = new SemVer(version, options);
          range = new Range(range, options);
          var gtfn, ltefn, ltfn, comp, ecomp;

          switch (hilo) {
            case '>':
              gtfn = gt;
              ltefn = lte;
              ltfn = lt;
              comp = '>';
              ecomp = '>=';
              break;

            case '<':
              gtfn = lt;
              ltefn = gte;
              ltfn = gt;
              comp = '<';
              ecomp = '<=';
              break;

            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }

          if (satisfies(version, range, options)) {
            return false;
          }

          for (var i = 0; i < range.set.length; ++i) {
            var comparators = range.set[i];
            var high = null;
            var low = null;
            comparators.forEach(function (comparator) {
              if (comparator.semver === ANY) {
                comparator = new Comparator('>=0.0.0');
              }

              high = high || comparator;
              low = low || comparator;

              if (gtfn(comparator.semver, high.semver, options)) {
                high = comparator;
              } else if (ltfn(comparator.semver, low.semver, options)) {
                low = comparator;
              }
            });

            if (high.operator === comp || high.operator === ecomp) {
              return false;
            }

            if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
              return false;
            } else if (low.operator === ecomp && ltfn(version, low.semver)) {
              return false;
            }
          }

          return true;
        }

        exports.prerelease = prerelease;

        function prerelease(version, options) {
          var parsed = parse(version, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        }

        exports.intersects = intersects;

        function intersects(r1, r2, options) {
          r1 = new Range(r1, options);
          r2 = new Range(r2, options);
          return r1.intersects(r2);
        }

        exports.coerce = coerce;

        function coerce(version, options) {
          if (version instanceof SemVer) {
            return version;
          }

          if (typeof version === 'number') {
            version = String(version);
          }

          if (typeof version !== 'string') {
            return null;
          }

          options = options || {};
          var match = null;

          if (!options.rtl) {
            match = version.match(re[t.COERCE]);
          } else {
            var next;

            while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
              if (!match || next.index + next[0].length !== match.index + match[0].length) {
                match = next;
              }

              re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            }

            re[t.COERCERTL].lastIndex = -1;
          }

          if (match === null) {
            return null;
          }

          return parse(match[2] + '.' + (match[3] || '0') + '.' + (match[4] || '0'), options);
        }
      }).call(this, __webpack_require__(5));
    }, function (module, exports, __webpack_require__) {
      (function (global) {
        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        var FUNC_ERROR_TEXT = 'Expected a function';
        var NAN = 0 / 0;
        var symbolTag = '[object Symbol]';
        var reTrim = /^\s+|\s+$/g;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsOctal = /^0o[0-7]+$/i;
        var freeParseInt = parseInt;
        var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;
        var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function('return this')();
        var objectProto = Object.prototype;
        var objectToString = objectProto.toString;
        var nativeMax = Math.max,
            nativeMin = Math.min;

        var now = function now() {
          return root.Date.now();
        };

        function debounce(func, wait, options) {
          var lastArgs,
              lastThis,
              maxWait,
              result,
              timerId,
              lastCallTime,
              lastInvokeTime = 0,
              leading = false,
              maxing = false,
              trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          wait = toNumber(wait) || 0;

          if (isObject(options)) {
            leading = !!options.leading;
            maxing = 'maxWait' in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }

          function invokeFunc(time) {
            var args = lastArgs,
                thisArg = lastThis;
            lastArgs = lastThis = undefined;
            lastInvokeTime = time;
            result = func.apply(thisArg, args);
            return result;
          }

          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout(timerExpired, wait);
            return leading ? invokeFunc(time) : result;
          }

          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime,
                result = wait - timeSinceLastCall;
            return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
          }

          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }

          function timerExpired() {
            var time = now();

            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }

            timerId = setTimeout(timerExpired, remainingWait(time));
          }

          function trailingEdge(time) {
            timerId = undefined;

            if (trailing && lastArgs) {
              return invokeFunc(time);
            }

            lastArgs = lastThis = undefined;
            return result;
          }

          function cancel() {
            if (timerId !== undefined) {
              clearTimeout(timerId);
            }

            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined;
          }

          function flush() {
            return timerId === undefined ? result : trailingEdge(now());
          }

          function debounced() {
            var time = now(),
                isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;

            if (isInvoking) {
              if (timerId === undefined) {
                return leadingEdge(lastCallTime);
              }

              if (maxing) {
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }

            if (timerId === undefined) {
              timerId = setTimeout(timerExpired, wait);
            }

            return result;
          }

          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }

        function throttle(func, wait, options) {
          var leading = true,
              trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          if (isObject(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }

          return debounce(func, wait, {
            'leading': leading,
            'maxWait': wait,
            'trailing': trailing
          });
        }

        function isObject(value) {
          var type = _typeof(value);

          return !!value && (type == 'object' || type == 'function');
        }

        function isObjectLike(value) {
          return !!value && _typeof(value) == 'object';
        }

        function isSymbol(value) {
          return _typeof(value) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
        }

        function toNumber(value) {
          if (typeof value == 'number') {
            return value;
          }

          if (isSymbol(value)) {
            return NAN;
          }

          if (isObject(value)) {
            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject(other) ? other + '' : other;
          }

          if (typeof value != 'string') {
            return value === 0 ? value : +value;
          }

          value = value.replace(reTrim, '');
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }

        module.exports = throttle;
      }).call(this, __webpack_require__(4));
    }, function (module, exports) {
      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var g;

      g = function () {
        return this;
      }();

      try {
        g = g || new Function("return this")();
      } catch (e) {
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
      }

      module.exports = g;
    }, function (module, exports) {
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }

      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }

      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }

        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();

      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }

        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }

        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }

      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }

        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }

        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }

      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }

        draining = false;

        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }

        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }

        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;

        while (len) {
          currentQueue = queue;
          queue = [];

          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }

          queueIndex = -1;
          len = queue.length;
        }

        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);

        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }

        queue.push(new Item(fun, args));

        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };

      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }

      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };

      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = '';
      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) {
        return [];
      };

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () {
        return '/';
      };

      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };

      process.umask = function () {
        return 0;
      };
    }, function (module, exports, __webpack_require__) {
      "use strict";

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var Yallist = __webpack_require__(10);

      var MAX = Symbol('max');
      var LENGTH = Symbol('length');
      var LENGTH_CALCULATOR = Symbol('lengthCalculator');
      var ALLOW_STALE = Symbol('allowStale');
      var MAX_AGE = Symbol('maxAge');
      var DISPOSE = Symbol('dispose');
      var NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
      var LRU_LIST = Symbol('lruList');
      var CACHE = Symbol('cache');
      var UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

      var naiveLength = function naiveLength() {
        return 1;
      };

      var LRUCache = function () {
        function LRUCache(options) {
          _classCallCheck(this, LRUCache);

          if (typeof options === 'number') options = {
            max: options
          };
          if (!options) options = {};
          if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number');
          var max = this[MAX] = options.max || Infinity;
          var lc = options.length || naiveLength;
          this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;
          this[ALLOW_STALE] = options.stale || false;
          if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');
          this[MAX_AGE] = options.maxAge || 0;
          this[DISPOSE] = options.dispose;
          this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
          this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
          this.reset();
        }

        _createClass(LRUCache, [{
          key: "rforEach",
          value: function rforEach(fn, thisp) {
            thisp = thisp || this;

            for (var walker = this[LRU_LIST].tail; walker !== null;) {
              var prev = walker.prev;
              forEachStep(this, fn, walker, thisp);
              walker = prev;
            }
          }
        }, {
          key: "forEach",
          value: function forEach(fn, thisp) {
            thisp = thisp || this;

            for (var walker = this[LRU_LIST].head; walker !== null;) {
              var next = walker.next;
              forEachStep(this, fn, walker, thisp);
              walker = next;
            }
          }
        }, {
          key: "keys",
          value: function keys() {
            return this[LRU_LIST].toArray().map(function (k) {
              return k.key;
            });
          }
        }, {
          key: "values",
          value: function values() {
            return this[LRU_LIST].toArray().map(function (k) {
              return k.value;
            });
          }
        }, {
          key: "reset",
          value: function reset() {
            var _this = this;

            if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
              this[LRU_LIST].forEach(function (hit) {
                return _this[DISPOSE](hit.key, hit.value);
              });
            }

            this[CACHE] = new Map();
            this[LRU_LIST] = new Yallist();
            this[LENGTH] = 0;
          }
        }, {
          key: "dump",
          value: function dump() {
            var _this2 = this;

            return this[LRU_LIST].map(function (hit) {
              return isStale(_this2, hit) ? false : {
                k: hit.key,
                v: hit.value,
                e: hit.now + (hit.maxAge || 0)
              };
            }).toArray().filter(function (h) {
              return h;
            });
          }
        }, {
          key: "dumpLru",
          value: function dumpLru() {
            return this[LRU_LIST];
          }
        }, {
          key: "set",
          value: function set(key, value, maxAge) {
            maxAge = maxAge || this[MAX_AGE];
            if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');
            var now = maxAge ? Date.now() : 0;
            var len = this[LENGTH_CALCULATOR](value, key);

            if (this[CACHE].has(key)) {
              if (len > this[MAX]) {
                _del(this, this[CACHE].get(key));

                return false;
              }

              var node = this[CACHE].get(key);
              var item = node.value;

              if (this[DISPOSE]) {
                if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
              }

              item.now = now;
              item.maxAge = maxAge;
              item.value = value;
              this[LENGTH] += len - item.length;
              item.length = len;
              this.get(key);
              trim(this);
              return true;
            }

            var hit = new Entry(key, value, len, now, maxAge);

            if (hit.length > this[MAX]) {
              if (this[DISPOSE]) this[DISPOSE](key, value);
              return false;
            }

            this[LENGTH] += hit.length;
            this[LRU_LIST].unshift(hit);
            this[CACHE].set(key, this[LRU_LIST].head);
            trim(this);
            return true;
          }
        }, {
          key: "has",
          value: function has(key) {
            if (!this[CACHE].has(key)) return false;
            var hit = this[CACHE].get(key).value;
            return !isStale(this, hit);
          }
        }, {
          key: "get",
          value: function get(key) {
            return _get(this, key, true);
          }
        }, {
          key: "peek",
          value: function peek(key) {
            return _get(this, key, false);
          }
        }, {
          key: "pop",
          value: function pop() {
            var node = this[LRU_LIST].tail;
            if (!node) return null;

            _del(this, node);

            return node.value;
          }
        }, {
          key: "del",
          value: function del(key) {
            _del(this, this[CACHE].get(key));
          }
        }, {
          key: "load",
          value: function load(arr) {
            this.reset();
            var now = Date.now();

            for (var l = arr.length - 1; l >= 0; l--) {
              var hit = arr[l];
              var expiresAt = hit.e || 0;
              if (expiresAt === 0) this.set(hit.k, hit.v);else {
                var maxAge = expiresAt - now;

                if (maxAge > 0) {
                  this.set(hit.k, hit.v, maxAge);
                }
              }
            }
          }
        }, {
          key: "prune",
          value: function prune() {
            var _this3 = this;

            this[CACHE].forEach(function (value, key) {
              return _get(_this3, key, false);
            });
          }
        }, {
          key: "max",
          set: function set(mL) {
            if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');
            this[MAX] = mL || Infinity;
            trim(this);
          },
          get: function get() {
            return this[MAX];
          }
        }, {
          key: "allowStale",
          set: function set(allowStale) {
            this[ALLOW_STALE] = !!allowStale;
          },
          get: function get() {
            return this[ALLOW_STALE];
          }
        }, {
          key: "maxAge",
          set: function set(mA) {
            if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');
            this[MAX_AGE] = mA;
            trim(this);
          },
          get: function get() {
            return this[MAX_AGE];
          }
        }, {
          key: "lengthCalculator",
          set: function set(lC) {
            var _this4 = this;

            if (typeof lC !== 'function') lC = naiveLength;

            if (lC !== this[LENGTH_CALCULATOR]) {
              this[LENGTH_CALCULATOR] = lC;
              this[LENGTH] = 0;
              this[LRU_LIST].forEach(function (hit) {
                hit.length = _this4[LENGTH_CALCULATOR](hit.value, hit.key);
                _this4[LENGTH] += hit.length;
              });
            }

            trim(this);
          },
          get: function get() {
            return this[LENGTH_CALCULATOR];
          }
        }, {
          key: "length",
          get: function get() {
            return this[LENGTH];
          }
        }, {
          key: "itemCount",
          get: function get() {
            return this[LRU_LIST].length;
          }
        }]);

        return LRUCache;
      }();

      var _get = function _get(self, key, doUse) {
        var node = self[CACHE].get(key);

        if (node) {
          var hit = node.value;

          if (isStale(self, hit)) {
            _del(self, node);

            if (!self[ALLOW_STALE]) return undefined;
          } else {
            if (doUse) {
              if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
              self[LRU_LIST].unshiftNode(node);
            }
          }

          return hit.value;
        }
      };

      var isStale = function isStale(self, hit) {
        if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;
        var diff = Date.now() - hit.now;
        return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
      };

      var trim = function trim(self) {
        if (self[LENGTH] > self[MAX]) {
          for (var walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {
            var prev = walker.prev;

            _del(self, walker);

            walker = prev;
          }
        }
      };

      var _del = function _del(self, node) {
        if (node) {
          var hit = node.value;
          if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);
          self[LENGTH] -= hit.length;
          self[CACHE].delete(hit.key);
          self[LRU_LIST].removeNode(node);
        }
      };

      var Entry = function Entry(key, value, length, now, maxAge) {
        _classCallCheck(this, Entry);

        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      };

      var forEachStep = function forEachStep(self, fn, node, thisp) {
        var hit = node.value;

        if (isStale(self, hit)) {
          _del(self, node);

          if (!self[ALLOW_STALE]) hit = undefined;
        }

        if (hit) fn.call(thisp, hit.value, hit.key, self);
      };

      module.exports = LRUCache;
    }, function (module, exports, __webpack_require__) {
      (function (setImmediate) {
        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        (function (name, definition) {
          if (true) {
            module.exports = definition();
          } else {}
        })("clipboard", function () {
          if (typeof document === 'undefined' || !document.addEventListener) {
            return null;
          }

          var clipboard = {};

          clipboard.copy = function () {
            var _intercept = false;
            var _data = null;
            var _bogusSelection = false;

            function cleanup() {
              _intercept = false;
              _data = null;

              if (_bogusSelection) {
                window.getSelection().removeAllRanges();
              }

              _bogusSelection = false;
            }

            document.addEventListener("copy", function (e) {
              if (_intercept) {
                for (var key in _data) {
                  e.clipboardData.setData(key, _data[key]);
                }

                e.preventDefault();
              }
            });

            function bogusSelect() {
              var sel = document.getSelection();

              if (!document.queryCommandEnabled("copy") && sel.isCollapsed) {
                var range = document.createRange();
                range.selectNodeContents(document.body);
                sel.removeAllRanges();
                sel.addRange(range);
                _bogusSelection = true;
              }
            }

            ;
            return function (data) {
              return new Promise(function (resolve, reject) {
                _intercept = true;

                if (typeof data === "string") {
                  _data = {
                    "text/plain": data
                  };
                } else if (data instanceof Node) {
                  _data = {
                    "text/html": new XMLSerializer().serializeToString(data)
                  };
                } else if (data instanceof Object) {
                  _data = data;
                } else {
                  reject("Invalid data type. Must be string, DOM node, or an object mapping MIME types to strings.");
                }

                function triggerCopy(tryBogusSelect) {
                  try {
                    if (document.execCommand("copy")) {
                      cleanup();
                      resolve();
                    } else {
                      if (!tryBogusSelect) {
                        bogusSelect();
                        triggerCopy(true);
                      } else {
                        cleanup();
                        throw new Error("Unable to copy. Perhaps it's not available in your browser?");
                      }
                    }
                  } catch (e) {
                    cleanup();
                    reject(e);
                  }
                }

                triggerCopy(false);
              });
            };
          }();

          clipboard.paste = function () {
            var _intercept = false;

            var _resolve;

            var _dataType;

            document.addEventListener("paste", function (e) {
              if (_intercept) {
                _intercept = false;
                e.preventDefault();
                var resolve = _resolve;
                _resolve = null;
                resolve(e.clipboardData.getData(_dataType));
              }
            });
            return function (dataType) {
              return new Promise(function (resolve, reject) {
                _intercept = true;
                _resolve = resolve;
                _dataType = dataType || "text/plain";

                try {
                  if (!document.execCommand("paste")) {
                    _intercept = false;
                    reject(new Error("Unable to paste. Pasting only works in Internet Explorer at the moment."));
                  }
                } catch (e) {
                  _intercept = false;
                  reject(new Error(e));
                }
              });
            };
          }();

          if (typeof ClipboardEvent === "undefined" && typeof window.clipboardData !== "undefined" && typeof window.clipboardData.setData !== "undefined") {
            (function (a) {
              function b(a, b) {
                return function () {
                  a.apply(b, arguments);
                };
              }

              function c(a) {
                if ("object" != _typeof(this)) throw new TypeError("Promises must be constructed via new");
                if ("function" != typeof a) throw new TypeError("not a function");
                this._state = null, this._value = null, this._deferreds = [], i(a, b(e, this), b(f, this));
              }

              function d(a) {
                var b = this;
                return null === this._state ? void this._deferreds.push(a) : void j(function () {
                  var c = b._state ? a.onFulfilled : a.onRejected;
                  if (null === c) return void (b._state ? a.resolve : a.reject)(b._value);
                  var d;

                  try {
                    d = c(b._value);
                  } catch (e) {
                    return void a.reject(e);
                  }

                  a.resolve(d);
                });
              }

              function e(a) {
                try {
                  if (a === this) throw new TypeError("A promise cannot be resolved with itself.");

                  if (a && ("object" == _typeof(a) || "function" == typeof a)) {
                    var c = a.then;
                    if ("function" == typeof c) return void i(b(c, a), b(e, this), b(f, this));
                  }

                  this._state = !0, this._value = a, g.call(this);
                } catch (d) {
                  f.call(this, d);
                }
              }

              function f(a) {
                this._state = !1, this._value = a, g.call(this);
              }

              function g() {
                for (var a = 0, b = this._deferreds.length; b > a; a++) {
                  d.call(this, this._deferreds[a]);
                }

                this._deferreds = null;
              }

              function h(a, b, c, d) {
                this.onFulfilled = "function" == typeof a ? a : null, this.onRejected = "function" == typeof b ? b : null, this.resolve = c, this.reject = d;
              }

              function i(a, b, c) {
                var d = !1;

                try {
                  a(function (a) {
                    d || (d = !0, b(a));
                  }, function (a) {
                    d || (d = !0, c(a));
                  });
                } catch (e) {
                  if (d) return;
                  d = !0, c(e);
                }
              }

              var j = c.immediateFn || "function" == typeof setImmediate && setImmediate || function (a) {
                setTimeout(a, 1);
              },
                  k = Array.isArray || function (a) {
                return "[object Array]" === Object.prototype.toString.call(a);
              };

              c.prototype["catch"] = function (a) {
                return this.then(null, a);
              }, c.prototype.then = function (a, b) {
                var e = this;
                return new c(function (c, f) {
                  d.call(e, new h(a, b, c, f));
                });
              }, c.all = function () {
                var a = Array.prototype.slice.call(1 === arguments.length && k(arguments[0]) ? arguments[0] : arguments);
                return new c(function (b, c) {
                  function d(f, g) {
                    try {
                      if (g && ("object" == _typeof(g) || "function" == typeof g)) {
                        var h = g.then;
                        if ("function" == typeof h) return void h.call(g, function (a) {
                          d(f, a);
                        }, c);
                      }

                      a[f] = g, 0 === --e && b(a);
                    } catch (i) {
                      c(i);
                    }
                  }

                  if (0 === a.length) return b([]);

                  for (var e = a.length, f = 0; f < a.length; f++) {
                    d(f, a[f]);
                  }
                });
              }, c.resolve = function (a) {
                return a && "object" == _typeof(a) && a.constructor === c ? a : new c(function (b) {
                  b(a);
                });
              }, c.reject = function (a) {
                return new c(function (b, c) {
                  c(a);
                });
              }, c.race = function (a) {
                return new c(function (b, c) {
                  for (var d = 0, e = a.length; e > d; d++) {
                    a[d].then(b, c);
                  }
                });
              }, true && module.exports ? module.exports = c : a.Promise || (a.Promise = c);
            })(this);

            clipboard.copy = function (data) {
              return new Promise(function (resolve, reject) {
                if (typeof data !== "string" && !("text/plain" in data)) {
                  throw new Error("You must provide a text/plain type.");
                }

                var strData = typeof data === "string" ? data : data["text/plain"];
                var copySucceeded = window.clipboardData.setData("Text", strData);

                if (copySucceeded) {
                  resolve();
                } else {
                  reject(new Error("Copying was rejected."));
                }
              });
            };

            clipboard.paste = function () {
              return new Promise(function (resolve, reject) {
                var strData = window.clipboardData.getData("Text");

                if (strData) {
                  resolve(strData);
                } else {
                  reject(new Error("Pasting was rejected."));
                }
              });
            };
          }

          return clipboard;
        });
      }).call(this, __webpack_require__(13).setImmediate);
    }, function (module, exports, __webpack_require__) {
      "use strict";

      if (true) {
        module.exports = __webpack_require__(15);
      } else {}
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);

      __webpack_exports__["default"] = ":root {\n  /**\n   * IMPORTANT: When new theme variables are added below– also add them to SettingsContext updateThemeVariables()\n   */\n\n  /* Light theme */\n  --light-color-attribute-name: #ef6632;\n  --light-color-attribute-name-not-editable: #23272f;\n  --light-color-attribute-name-inverted: rgba(255, 255, 255, 0.7);\n  --light-color-attribute-value: #1a1aa6;\n  --light-color-attribute-value-inverted: #ffffff;\n  --light-color-attribute-editable-value: #1a1aa6;\n  --light-color-background: #ffffff;\n  --light-color-background-hover: rgba(0, 136, 250, 0.1);\n  --light-color-background-inactive: #e5e5e5;\n  --light-color-background-invalid: #fff0f0;\n  --light-color-background-selected: #0088fa;\n  --light-color-button-background: #ffffff;\n  --light-color-button-background-focus: #ededed;\n  --light-color-button: #5f6673;\n  --light-color-button-disabled: #cfd1d5;\n  --light-color-button-active: #0088fa;\n  --light-color-button-focus: #23272f;\n  --light-color-button-hover: #23272f;\n  --light-color-border: #eeeeee;\n  --light-color-commit-did-not-render-fill: #cfd1d5;\n  --light-color-commit-did-not-render-fill-text: #000000;\n  --light-color-commit-did-not-render-pattern: #cfd1d5;\n  --light-color-commit-did-not-render-pattern-text: #333333;\n  --light-color-commit-gradient-0: #37afa9;\n  --light-color-commit-gradient-1: #63b19e;\n  --light-color-commit-gradient-2: #80b393;\n  --light-color-commit-gradient-3: #97b488;\n  --light-color-commit-gradient-4: #abb67d;\n  --light-color-commit-gradient-5: #beb771;\n  --light-color-commit-gradient-6: #cfb965;\n  --light-color-commit-gradient-7: #dfba57;\n  --light-color-commit-gradient-8: #efbb49;\n  --light-color-commit-gradient-9: #febc38;\n  --light-color-commit-gradient-text: #000000;\n  --light-color-component-name: #6a51b2;\n  --light-color-component-name-inverted: #ffffff;\n  --light-color-component-badge-background: rgba(0, 0, 0, 0.1);\n  --light-color-component-badge-background-inverted: rgba(255, 255, 255, 0.25);\n  --light-color-component-badge-count: #777d88;\n  --light-color-component-badge-count-inverted: rgba(255, 255, 255, 0.7);\n  --light-color-console-error-badge-text: #ffffff;\n  --light-color-console-error-background: #fff0f0;\n  --light-color-console-error-border: #ffd6d6;\n  --light-color-console-error-icon: #eb3941;\n  --light-color-console-error-text: #fe2e31;\n  --light-color-console-warning-badge-text: #000000;\n  --light-color-console-warning-background: #fffbe5;\n  --light-color-console-warning-border: #fff5c1;\n  --light-color-console-warning-icon: #f4bd00;\n  --light-color-console-warning-text: #64460c;\n  --light-color-context-background: rgba(0,0,0,.9);\n  --light-color-context-background-hover: rgba(255, 255, 255, 0.1);\n  --light-color-context-background-selected: #178fb9;\n  --light-color-context-border: #3d424a;\n  --light-color-context-text: #ffffff;\n  --light-color-context-text-selected: #ffffff;\n  --light-color-dim: #777d88;\n  --light-color-dimmer: #cfd1d5;\n  --light-color-dimmest: #eff0f1;\n  --light-color-error-background: hsl(0, 100%, 97%);\n  --light-color-error-border: hsl(0, 100%, 92%);\n  --light-color-error-text: #ff0000;\n  --light-color-expand-collapse-toggle: #777d88;\n  --light-color-link: #0000ff;\n  --light-color-modal-background: rgba(255, 255, 255, 0.75);\n  --light-color-bridge-version-npm-background: #eff0f1;\n  --light-color-bridge-version-npm-text: #000000;\n  --light-color-bridge-version-number: #0088fa;\n  --light-color-primitive-hook-badge-background: #e5e5e5;\n  --light-color-primitive-hook-badge-text: #5f6673;\n  --light-color-record-active: #fc3a4b;\n  --light-color-record-hover: #3578e5;\n  --light-color-record-inactive: #0088fa;\n  --light-color-scroll-thumb: #c2c2c2;\n  --light-color-scroll-track: #fafafa;\n  --light-color-search-match: yellow;\n  --light-color-search-match-current: #f7923b;\n  --light-color-selected-tree-highlight-active: rgba(0, 136, 250, 0.1);\n  --light-color-selected-tree-highlight-inactive: rgba(0, 0, 0, 0.05);\n  --light-color-shadow: rgba(0, 0, 0, 0.25);\n  --light-color-tab-selected-border: #0088fa;\n  --light-color-text: #000000;\n  --light-color-text-invalid: #ff0000;\n  --light-color-text-selected: #ffffff;\n  --light-color-toggle-background-invalid: #fc3a4b;\n  --light-color-toggle-background-on: #0088fa;\n  --light-color-toggle-background-off: #cfd1d5;\n  --light-color-toggle-text: #ffffff;\n  --light-color-tooltip-background: rgba(0, 0, 0, 0.9);\n  --light-color-tooltip-text: #ffffff;\n\n  /* Dark theme */\n  --dark-color-attribute-name: #9d87d2;\n  --dark-color-attribute-name-not-editable: #ededed;\n  --dark-color-attribute-name-inverted: #282828;\n  --dark-color-attribute-value: #cedae0;\n  --dark-color-attribute-value-inverted: #ffffff;\n  --dark-color-attribute-editable-value: yellow;\n  --dark-color-background: #282c34;\n  --dark-color-background-hover: rgba(255, 255, 255, 0.1);\n  --dark-color-background-inactive: #3d424a;\n  --dark-color-background-invalid: #5c0000;\n  --dark-color-background-selected: #178fb9;\n  --dark-color-button-background: #282c34;\n  --dark-color-button-background-focus: #3d424a;\n  --dark-color-button: #afb3b9;\n  --dark-color-button-active: #61dafb;\n  --dark-color-button-disabled: #4f5766;\n  --dark-color-button-focus: #a2e9fc;\n  --dark-color-button-hover: #ededed;\n  --dark-color-border: #3d424a;\n  --dark-color-commit-did-not-render-fill: #777d88;\n  --dark-color-commit-did-not-render-fill-text: #000000;\n  --dark-color-commit-did-not-render-pattern: #666c77;\n  --dark-color-commit-did-not-render-pattern-text: #ffffff;\n  --dark-color-commit-gradient-0: #37afa9;\n  --dark-color-commit-gradient-1: #63b19e;\n  --dark-color-commit-gradient-2: #80b393;\n  --dark-color-commit-gradient-3: #97b488;\n  --dark-color-commit-gradient-4: #abb67d;\n  --dark-color-commit-gradient-5: #beb771;\n  --dark-color-commit-gradient-6: #cfb965;\n  --dark-color-commit-gradient-7: #dfba57;\n  --dark-color-commit-gradient-8: #efbb49;\n  --dark-color-commit-gradient-9: #febc38;\n  --dark-color-commit-gradient-text: #000000;\n  --dark-color-component-name: #61dafb;\n  --dark-color-component-name-inverted: #282828;\n  --dark-color-component-badge-background: rgba(255, 255, 255, 0.25);\n  --dark-color-component-badge-background-inverted: rgba(0, 0, 0, 0.25);\n  --dark-color-component-badge-count: #8f949d;\n  --dark-color-component-badge-count-inverted: rgba(255, 255, 255, 0.7);\n  --dark-color-console-error-badge-text: #000000;\n  --dark-color-console-error-background: #290000;\n  --dark-color-console-error-border: #5c0000;\n  --dark-color-console-error-icon: #eb3941;\n  --dark-color-console-error-text: #fc7f7f;\n  --dark-color-console-warning-badge-text: #000000;\n  --dark-color-console-warning-background: #332b00;\n  --dark-color-console-warning-border: #665500;\n  --dark-color-console-warning-icon: #f4bd00;\n  --dark-color-console-warning-text: #f5f2ed;\n  --dark-color-context-background: rgba(255,255,255,.9);\n  --dark-color-context-background-hover: rgba(0, 136, 250, 0.1);\n  --dark-color-context-background-selected: #0088fa;\n  --dark-color-context-border: #eeeeee;\n  --dark-color-context-text: #000000;\n  --dark-color-context-text-selected: #ffffff;\n  --dark-color-dim: #8f949d;\n  --dark-color-dimmer: #777d88;\n  --dark-color-dimmest: #4f5766;\n  --dark-color-error-background: #200;\n  --dark-color-error-border: #900;\n  --dark-color-error-text: #f55;\n  --dark-color-expand-collapse-toggle: #8f949d;\n  --dark-color-link: #61dafb;\n  --dark-color-modal-background: rgba(0, 0, 0, 0.75);\n  --dark-color-bridge-version-npm-background: rgba(0, 0, 0, 0.25);\n  --dark-color-bridge-version-npm-text: #ffffff;\n  --dark-color-bridge-version-number: yellow;\n  --dark-color-primitive-hook-badge-background: rgba(0, 0, 0, 0.25);\n  --dark-color-primitive-hook-badge-text: rgba(255, 255, 255, 0.7);\n  --dark-color-record-active: #fc3a4b;\n  --dark-color-record-hover: #a2e9fc;\n  --dark-color-record-inactive: #61dafb;\n  --dark-color-scroll-thumb: #afb3b9;\n  --dark-color-scroll-track: #313640;\n  --dark-color-search-match: yellow;\n  --dark-color-search-match-current: #f7923b;\n  --dark-color-selected-tree-highlight-active: rgba(23, 143, 185, 0.15);\n  --dark-color-selected-tree-highlight-inactive: rgba(255, 255, 255, 0.05);\n  --dark-color-shadow: rgba(0, 0, 0, 0.5);\n  --dark-color-tab-selected-border: #178fb9;\n  --dark-color-text: #ffffff;\n  --dark-color-text-invalid: #ff8080;\n  --dark-color-text-selected: #ffffff;\n  --dark-color-toggle-background-invalid: #fc3a4b;\n  --dark-color-toggle-background-on: #178fb9;\n  --dark-color-toggle-background-off: #777d88;\n  --dark-color-toggle-text: #ffffff;\n  --dark-color-tooltip-background: rgba(255, 255, 255, 0.9);\n  --dark-color-tooltip-text: #000000;\n\n  /* Font smoothing */\n  --light-font-smoothing: auto;\n  --dark-font-smoothing: antialiased;\n  --font-smoothing: auto;\n\n  /* Compact density */\n  --compact-font-size-monospace-small: 9px;\n  --compact-font-size-monospace-normal: 11px;\n  --compact-font-size-monospace-large: 15px;\n  --compact-font-size-sans-small: 10px;\n  --compact-font-size-sans-normal: 12px;\n  --compact-font-size-sans-large: 14px;\n  --compact-line-height-data: 18px;\n  --compact-root-font-size: 16px;\n\n  /* Comfortable density */\n  --comfortable-font-size-monospace-small: 10px;\n  --comfortable-font-size-monospace-normal: 13px;\n  --comfortable-font-size-monospace-large: 17px;\n  --comfortable-font-size-sans-small: 12px;\n  --comfortable-font-size-sans-normal: 14px;\n  --comfortable-font-size-sans-large: 16px;\n  --comfortable-line-height-data: 22px;\n  --comfortable-root-font-size: 20px;\n\n  /* GitHub.com system fonts */\n  --font-family-monospace: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo,\n    Courier, monospace;\n  --font-family-sans: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica,\n    Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;\n}\n";
    }, function (module, exports, __webpack_require__) {
      "use strict";

      module.exports = Yallist;
      Yallist.Node = Node;
      Yallist.create = Yallist;

      function Yallist(list) {
        var self = this;

        if (!(self instanceof Yallist)) {
          self = new Yallist();
        }

        self.tail = null;
        self.head = null;
        self.length = 0;

        if (list && typeof list.forEach === 'function') {
          list.forEach(function (item) {
            self.push(item);
          });
        } else if (arguments.length > 0) {
          for (var i = 0, l = arguments.length; i < l; i++) {
            self.push(arguments[i]);
          }
        }

        return self;
      }

      Yallist.prototype.removeNode = function (node) {
        if (node.list !== this) {
          throw new Error('removing node which does not belong to this list');
        }

        var next = node.next;
        var prev = node.prev;

        if (next) {
          next.prev = prev;
        }

        if (prev) {
          prev.next = next;
        }

        if (node === this.head) {
          this.head = next;
        }

        if (node === this.tail) {
          this.tail = prev;
        }

        node.list.length--;
        node.next = null;
        node.prev = null;
        node.list = null;
        return next;
      };

      Yallist.prototype.unshiftNode = function (node) {
        if (node === this.head) {
          return;
        }

        if (node.list) {
          node.list.removeNode(node);
        }

        var head = this.head;
        node.list = this;
        node.next = head;

        if (head) {
          head.prev = node;
        }

        this.head = node;

        if (!this.tail) {
          this.tail = node;
        }

        this.length++;
      };

      Yallist.prototype.pushNode = function (node) {
        if (node === this.tail) {
          return;
        }

        if (node.list) {
          node.list.removeNode(node);
        }

        var tail = this.tail;
        node.list = this;
        node.prev = tail;

        if (tail) {
          tail.next = node;
        }

        this.tail = node;

        if (!this.head) {
          this.head = node;
        }

        this.length++;
      };

      Yallist.prototype.push = function () {
        for (var i = 0, l = arguments.length; i < l; i++) {
          push(this, arguments[i]);
        }

        return this.length;
      };

      Yallist.prototype.unshift = function () {
        for (var i = 0, l = arguments.length; i < l; i++) {
          unshift(this, arguments[i]);
        }

        return this.length;
      };

      Yallist.prototype.pop = function () {
        if (!this.tail) {
          return undefined;
        }

        var res = this.tail.value;
        this.tail = this.tail.prev;

        if (this.tail) {
          this.tail.next = null;
        } else {
          this.head = null;
        }

        this.length--;
        return res;
      };

      Yallist.prototype.shift = function () {
        if (!this.head) {
          return undefined;
        }

        var res = this.head.value;
        this.head = this.head.next;

        if (this.head) {
          this.head.prev = null;
        } else {
          this.tail = null;
        }

        this.length--;
        return res;
      };

      Yallist.prototype.forEach = function (fn, thisp) {
        thisp = thisp || this;

        for (var walker = this.head, i = 0; walker !== null; i++) {
          fn.call(thisp, walker.value, i, this);
          walker = walker.next;
        }
      };

      Yallist.prototype.forEachReverse = function (fn, thisp) {
        thisp = thisp || this;

        for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
          fn.call(thisp, walker.value, i, this);
          walker = walker.prev;
        }
      };

      Yallist.prototype.get = function (n) {
        for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
          walker = walker.next;
        }

        if (i === n && walker !== null) {
          return walker.value;
        }
      };

      Yallist.prototype.getReverse = function (n) {
        for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
          walker = walker.prev;
        }

        if (i === n && walker !== null) {
          return walker.value;
        }
      };

      Yallist.prototype.map = function (fn, thisp) {
        thisp = thisp || this;
        var res = new Yallist();

        for (var walker = this.head; walker !== null;) {
          res.push(fn.call(thisp, walker.value, this));
          walker = walker.next;
        }

        return res;
      };

      Yallist.prototype.mapReverse = function (fn, thisp) {
        thisp = thisp || this;
        var res = new Yallist();

        for (var walker = this.tail; walker !== null;) {
          res.push(fn.call(thisp, walker.value, this));
          walker = walker.prev;
        }

        return res;
      };

      Yallist.prototype.reduce = function (fn, initial) {
        var acc;
        var walker = this.head;

        if (arguments.length > 1) {
          acc = initial;
        } else if (this.head) {
          walker = this.head.next;
          acc = this.head.value;
        } else {
          throw new TypeError('Reduce of empty list with no initial value');
        }

        for (var i = 0; walker !== null; i++) {
          acc = fn(acc, walker.value, i);
          walker = walker.next;
        }

        return acc;
      };

      Yallist.prototype.reduceReverse = function (fn, initial) {
        var acc;
        var walker = this.tail;

        if (arguments.length > 1) {
          acc = initial;
        } else if (this.tail) {
          walker = this.tail.prev;
          acc = this.tail.value;
        } else {
          throw new TypeError('Reduce of empty list with no initial value');
        }

        for (var i = this.length - 1; walker !== null; i--) {
          acc = fn(acc, walker.value, i);
          walker = walker.prev;
        }

        return acc;
      };

      Yallist.prototype.toArray = function () {
        var arr = new Array(this.length);

        for (var i = 0, walker = this.head; walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.next;
        }

        return arr;
      };

      Yallist.prototype.toArrayReverse = function () {
        var arr = new Array(this.length);

        for (var i = 0, walker = this.tail; walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.prev;
        }

        return arr;
      };

      Yallist.prototype.slice = function (from, to) {
        to = to || this.length;

        if (to < 0) {
          to += this.length;
        }

        from = from || 0;

        if (from < 0) {
          from += this.length;
        }

        var ret = new Yallist();

        if (to < from || to < 0) {
          return ret;
        }

        if (from < 0) {
          from = 0;
        }

        if (to > this.length) {
          to = this.length;
        }

        for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
          walker = walker.next;
        }

        for (; walker !== null && i < to; i++, walker = walker.next) {
          ret.push(walker.value);
        }

        return ret;
      };

      Yallist.prototype.sliceReverse = function (from, to) {
        to = to || this.length;

        if (to < 0) {
          to += this.length;
        }

        from = from || 0;

        if (from < 0) {
          from += this.length;
        }

        var ret = new Yallist();

        if (to < from || to < 0) {
          return ret;
        }

        if (from < 0) {
          from = 0;
        }

        if (to > this.length) {
          to = this.length;
        }

        for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
          walker = walker.prev;
        }

        for (; walker !== null && i > from; i--, walker = walker.prev) {
          ret.push(walker.value);
        }

        return ret;
      };

      Yallist.prototype.splice = function (start, deleteCount) {
        if (start > this.length) {
          start = this.length - 1;
        }

        if (start < 0) {
          start = this.length + start;
        }

        for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
          walker = walker.next;
        }

        var ret = [];

        for (var i = 0; walker && i < deleteCount; i++) {
          ret.push(walker.value);
          walker = this.removeNode(walker);
        }

        if (walker === null) {
          walker = this.tail;
        }

        if (walker !== this.head && walker !== this.tail) {
          walker = walker.prev;
        }

        for (var i = 2; i < arguments.length; i++) {
          walker = insert(this, walker, arguments[i]);
        }

        return ret;
      };

      Yallist.prototype.reverse = function () {
        var head = this.head;
        var tail = this.tail;

        for (var walker = head; walker !== null; walker = walker.prev) {
          var p = walker.prev;
          walker.prev = walker.next;
          walker.next = p;
        }

        this.head = tail;
        this.tail = head;
        return this;
      };

      function insert(self, node, value) {
        var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);

        if (inserted.next === null) {
          self.tail = inserted;
        }

        if (inserted.prev === null) {
          self.head = inserted;
        }

        self.length++;
        return inserted;
      }

      function push(self, item) {
        self.tail = new Node(item, self.tail, null, self);

        if (!self.head) {
          self.head = self.tail;
        }

        self.length++;
      }

      function unshift(self, item) {
        self.head = new Node(item, null, self.head, self);

        if (!self.tail) {
          self.tail = self.head;
        }

        self.length++;
      }

      function Node(value, prev, next, list) {
        if (!(this instanceof Node)) {
          return new Node(value, prev, next, list);
        }

        this.list = list;
        this.value = value;

        if (prev) {
          prev.next = this;
          this.prev = prev;
        } else {
          this.prev = null;
        }

        if (next) {
          next.prev = this;
          this.next = next;
        } else {
          this.next = null;
        }
      }

      try {
        __webpack_require__(11)(Yallist);
      } catch (er) {}
    }, function (module, exports, __webpack_require__) {
      "use strict";

      module.exports = function (Yallist) {
        Yallist.prototype[Symbol.iterator] = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/regenerator").mark(function _callee() {
          var walker;
          return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/regenerator").wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  walker = this.head;

                case 1:
                  if (!walker) {
                    _context.next = 7;
                    break;
                  }

                  _context.next = 4;
                  return walker.value;

                case 4:
                  walker = walker.next;
                  _context.next = 1;
                  break;

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        });
      };
    }, function (module, exports, __webpack_require__) {
      "use strict";
      /** @license React vundefined
       * react-is.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var b = 60103,
          c = 60106,
          d = 60107,
          e = 60108,
          f = 60114,
          g = 60109,
          h = 60110,
          k = 60112,
          l = 60113,
          m = 60120,
          n = 60115,
          p = 60116,
          q = 60129,
          r = 60131,
          u = 60132;

      if ("function" === typeof Symbol && Symbol.for) {
        var v = Symbol.for;
        b = v("react.element");
        c = v("react.portal");
        d = v("react.fragment");
        e = v("react.strict_mode");
        f = v("react.profiler");
        g = v("react.provider");
        h = v("react.context");
        k = v("react.forward_ref");
        l = v("react.suspense");
        m = v("react.suspense_list");
        n = v("react.memo");
        p = v("react.lazy");
        q = v("react.debug_trace_mode");
        r = v("react.legacy_hidden");
        u = v("react.cache");
      }

      var w = 0;
      "function" === typeof Symbol && (w = Symbol.for("react.module.reference"));

      function x(a) {
        if ("object" === _typeof(a) && null !== a) {
          var t = a.$$typeof;

          switch (t) {
            case b:
              switch (a = a.type, a) {
                case d:
                case f:
                case e:
                case l:
                case m:
                  return a;

                default:
                  switch (a = a && a.$$typeof, a) {
                    case h:
                    case k:
                    case p:
                    case n:
                    case g:
                      return a;

                    default:
                      return t;
                  }

              }

            case c:
              return t;
          }
        }
      }

      var y = g,
          z = b,
          A = k,
          B = d,
          C = p,
          D = n,
          E = c,
          F = f,
          G = e,
          H = l,
          I = m;
      exports.ContextConsumer = h;
      exports.ContextProvider = y;
      exports.Element = z;
      exports.ForwardRef = A;
      exports.Fragment = B;
      exports.Lazy = C;
      exports.Memo = D;
      exports.Portal = E;
      exports.Profiler = F;
      exports.StrictMode = G;
      exports.Suspense = H;
      exports.SuspenseList = I;

      exports.isAsyncMode = function () {
        return !1;
      };

      exports.isConcurrentMode = function () {
        return !1;
      };

      exports.isContextConsumer = function (a) {
        return x(a) === h;
      };

      exports.isContextProvider = function (a) {
        return x(a) === g;
      };

      exports.isElement = function (a) {
        return "object" === _typeof(a) && null !== a && a.$$typeof === b;
      };

      exports.isForwardRef = function (a) {
        return x(a) === k;
      };

      exports.isFragment = function (a) {
        return x(a) === d;
      };

      exports.isLazy = function (a) {
        return x(a) === p;
      };

      exports.isMemo = function (a) {
        return x(a) === n;
      };

      exports.isPortal = function (a) {
        return x(a) === c;
      };

      exports.isProfiler = function (a) {
        return x(a) === f;
      };

      exports.isStrictMode = function (a) {
        return x(a) === e;
      };

      exports.isSuspense = function (a) {
        return x(a) === l;
      };

      exports.isSuspenseList = function (a) {
        return x(a) === m;
      };

      exports.isValidElementType = function (a) {
        return "string" === typeof a || "function" === typeof a || a === d || a === f || a === q || a === e || a === l || a === m || a === r || a === u || "object" === _typeof(a) && null !== a && (a.$$typeof === p || a.$$typeof === n || a.$$typeof === g || a.$$typeof === h || a.$$typeof === k || a.$$typeof === w || void 0 !== a.getModuleId) ? !0 : !1;
      };

      exports.typeOf = x;
    }, function (module, exports, __webpack_require__) {
      (function (global) {
        var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
        var apply = Function.prototype.apply;

        exports.setTimeout = function () {
          return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
        };

        exports.setInterval = function () {
          return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
        };

        exports.clearTimeout = exports.clearInterval = function (timeout) {
          if (timeout) {
            timeout.close();
          }
        };

        function Timeout(id, clearFn) {
          this._id = id;
          this._clearFn = clearFn;
        }

        Timeout.prototype.unref = Timeout.prototype.ref = function () {};

        Timeout.prototype.close = function () {
          this._clearFn.call(scope, this._id);
        };

        exports.enroll = function (item, msecs) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = msecs;
        };

        exports.unenroll = function (item) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = -1;
        };

        exports._unrefActive = exports.active = function (item) {
          clearTimeout(item._idleTimeoutId);
          var msecs = item._idleTimeout;

          if (msecs >= 0) {
            item._idleTimeoutId = setTimeout(function onTimeout() {
              if (item._onTimeout) item._onTimeout();
            }, msecs);
          }
        };

        __webpack_require__(14);

        exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
        exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
      }).call(this, __webpack_require__(4));
    }, function (module, exports, __webpack_require__) {
      (function (global, process) {
        (function (global, undefined) {
          "use strict";

          if (global.setImmediate) {
            return;
          }

          var nextHandle = 1;
          var tasksByHandle = {};
          var currentlyRunningATask = false;
          var doc = global.document;
          var registerImmediate;

          function setImmediate(callback) {
            if (typeof callback !== "function") {
              callback = new Function("" + callback);
            }

            var args = new Array(arguments.length - 1);

            for (var i = 0; i < args.length; i++) {
              args[i] = arguments[i + 1];
            }

            var task = {
              callback: callback,
              args: args
            };
            tasksByHandle[nextHandle] = task;
            registerImmediate(nextHandle);
            return nextHandle++;
          }

          function clearImmediate(handle) {
            delete tasksByHandle[handle];
          }

          function run(task) {
            var callback = task.callback;
            var args = task.args;

            switch (args.length) {
              case 0:
                callback();
                break;

              case 1:
                callback(args[0]);
                break;

              case 2:
                callback(args[0], args[1]);
                break;

              case 3:
                callback(args[0], args[1], args[2]);
                break;

              default:
                callback.apply(undefined, args);
                break;
            }
          }

          function runIfPresent(handle) {
            if (currentlyRunningATask) {
              setTimeout(runIfPresent, 0, handle);
            } else {
              var task = tasksByHandle[handle];

              if (task) {
                currentlyRunningATask = true;

                try {
                  run(task);
                } finally {
                  clearImmediate(handle);
                  currentlyRunningATask = false;
                }
              }
            }
          }

          function installNextTickImplementation() {
            registerImmediate = function registerImmediate(handle) {
              process.nextTick(function () {
                runIfPresent(handle);
              });
            };
          }

          function canUsePostMessage() {
            if (global.postMessage && !global.importScripts) {
              var postMessageIsAsynchronous = true;
              var oldOnMessage = global.onmessage;

              global.onmessage = function () {
                postMessageIsAsynchronous = false;
              };

              global.postMessage("", "*");
              global.onmessage = oldOnMessage;
              return postMessageIsAsynchronous;
            }
          }

          function installPostMessageImplementation() {
            var messagePrefix = "setImmediate$" + Math.random() + "$";

            var onGlobalMessage = function onGlobalMessage(event) {
              if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
              }
            };

            if (global.addEventListener) {
              global.addEventListener("message", onGlobalMessage, false);
            } else {
              global.attachEvent("onmessage", onGlobalMessage);
            }

            registerImmediate = function registerImmediate(handle) {
              global.postMessage(messagePrefix + handle, "*");
            };
          }

          function installMessageChannelImplementation() {
            var channel = new MessageChannel();

            channel.port1.onmessage = function (event) {
              var handle = event.data;
              runIfPresent(handle);
            };

            registerImmediate = function registerImmediate(handle) {
              channel.port2.postMessage(handle);
            };
          }

          function installReadyStateChangeImplementation() {
            var html = doc.documentElement;

            registerImmediate = function registerImmediate(handle) {
              var script = doc.createElement("script");

              script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
              };

              html.appendChild(script);
            };
          }

          function installSetTimeoutImplementation() {
            registerImmediate = function registerImmediate(handle) {
              setTimeout(runIfPresent, 0, handle);
            };
          }

          var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
          attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

          if ({}.toString.call(global.process) === "[object process]") {
            installNextTickImplementation();
          } else if (canUsePostMessage()) {
            installPostMessageImplementation();
          } else if (global.MessageChannel) {
            installMessageChannelImplementation();
          } else if (doc && "onreadystatechange" in doc.createElement("script")) {
            installReadyStateChangeImplementation();
          } else {
            installSetTimeoutImplementation();
          }

          attachTo.setImmediate = setImmediate;
          attachTo.clearImmediate = clearImmediate;
        })(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
      }).call(this, __webpack_require__(4), __webpack_require__(5));
    }, function (module, exports, __webpack_require__) {
      "use strict";
      /** @license React vundefined
       * react-debug-tools.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var g = __webpack_require__(1),
          h = __webpack_require__(16);

      function n(a) {
        for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {
          b += "&args[]=" + encodeURIComponent(arguments[c]);
        }

        return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }

      var v = __webpack_require__(18).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
          w = 60128;

      if ("function" === typeof Symbol && Symbol.for) {
        var x = Symbol.for;
        w = x("react.opaque.id");
      }

      var y = [],
          z = null,
          A = null;

      function B() {
        if (null === z) {
          var a = new Map();

          try {
            C.useContext({
              _currentValue: null
            }), C.useState(null), C.useReducer(function (a) {
              return a;
            }, null), C.useRef(null), "function" === typeof C.useCacheRefresh && C.useCacheRefresh(), C.useLayoutEffect(function () {}), C.useEffect(function () {}), C.useImperativeHandle(void 0, function () {
              return null;
            }), C.useDebugValue(null), C.useCallback(function () {}), C.useMemo(function () {
              return null;
            });
          } finally {
            var b = y;
            y = [];
          }

          for (var c = 0; c < b.length; c++) {
            var d = b[c];
            a.set(d.primitive, h.parse(d.stackError));
          }

          z = a;
        }

        return z;
      }

      var D = null;

      function E() {
        var a = D;
        null !== a && (D = a.next);
        return a;
      }

      var C = {
        getCacheForType: function getCacheForType() {
          throw Error(n(248));
        },
        readContext: function readContext(a) {
          return a._currentValue;
        },
        useCacheRefresh: function useCacheRefresh() {
          var a = E();
          y.push({
            primitive: "CacheRefresh",
            stackError: Error(),
            value: null !== a ? a.memoizedState : function () {}
          });
          return function () {};
        },
        useCallback: function useCallback(a) {
          var b = E();
          y.push({
            primitive: "Callback",
            stackError: Error(),
            value: null !== b ? b.memoizedState[0] : a
          });
          return a;
        },
        useContext: function useContext(a) {
          y.push({
            primitive: "Context",
            stackError: Error(),
            value: a._currentValue
          });
          return a._currentValue;
        },
        useEffect: function useEffect(a) {
          E();
          y.push({
            primitive: "Effect",
            stackError: Error(),
            value: a
          });
        },
        useImperativeHandle: function useImperativeHandle(a) {
          E();
          var b = void 0;
          null !== a && "object" === _typeof(a) && (b = a.current);
          y.push({
            primitive: "ImperativeHandle",
            stackError: Error(),
            value: b
          });
        },
        useDebugValue: function useDebugValue(a, b) {
          y.push({
            primitive: "DebugValue",
            stackError: Error(),
            value: "function" === typeof b ? b(a) : a
          });
        },
        useLayoutEffect: function useLayoutEffect(a) {
          E();
          y.push({
            primitive: "LayoutEffect",
            stackError: Error(),
            value: a
          });
        },
        useMemo: function useMemo(a) {
          var b = E();
          a = null !== b ? b.memoizedState[0] : a();
          y.push({
            primitive: "Memo",
            stackError: Error(),
            value: a
          });
          return a;
        },
        useReducer: function useReducer(a, b, c) {
          a = E();
          b = null !== a ? a.memoizedState : void 0 !== c ? c(b) : b;
          y.push({
            primitive: "Reducer",
            stackError: Error(),
            value: b
          });
          return [b, function () {}];
        },
        useRef: function useRef(a) {
          var b = E();
          a = null !== b ? b.memoizedState : {
            current: a
          };
          y.push({
            primitive: "Ref",
            stackError: Error(),
            value: a.current
          });
          return a;
        },
        useState: function useState(a) {
          var b = E();
          a = null !== b ? b.memoizedState : "function" === typeof a ? a() : a;
          y.push({
            primitive: "State",
            stackError: Error(),
            value: a
          });
          return [a, function () {}];
        },
        useTransition: function useTransition() {
          E();
          E();
          y.push({
            primitive: "Transition",
            stackError: Error(),
            value: void 0
          });
          return [!1, function () {}];
        },
        useMutableSource: function useMutableSource(a, b) {
          E();
          E();
          E();
          E();
          a = b(a._source);
          y.push({
            primitive: "MutableSource",
            stackError: Error(),
            value: a
          });
          return a;
        },
        useDeferredValue: function useDeferredValue(a) {
          E();
          E();
          y.push({
            primitive: "DeferredValue",
            stackError: Error(),
            value: a
          });
          return a;
        },
        useOpaqueIdentifier: function useOpaqueIdentifier() {
          var a = E();
          A && 0 === A.mode && E();
          (a = null === a ? void 0 : a.memoizedState) && a.$$typeof === w && (a = void 0);
          y.push({
            primitive: "OpaqueIdentifier",
            stackError: Error(),
            value: a
          });
          return a;
        }
      },
          F = 0;

      function G(a, b, c) {
        var d = b[c].source,
            e = 0;

        a: for (; e < a.length; e++) {
          if (a[e].source === d) {
            for (var p = c + 1, q = e + 1; p < b.length && q < a.length; p++, q++) {
              if (a[q].source !== b[p].source) continue a;
            }

            return e;
          }
        }

        return -1;
      }

      function H(a, b) {
        if (!a) return !1;
        b = "use" + b;
        return a.length < b.length ? !1 : a.lastIndexOf(b) === a.length - b.length;
      }

      function I(a) {
        if (!a) return "";
        var b = a.lastIndexOf(".");
        -1 === b && (b = 0);
        "use" === a.substr(b, 3) && (b += 3);
        return a.substr(b);
      }

      function J(a, b) {
        for (var c = [], d = null, e = c, p = 0, q = [], u = 0; u < b.length; u++) {
          var t = b[u];
          var f = a;
          var k = h.parse(t.stackError);

          b: {
            var m = k,
                r = G(m, f, F);
            if (-1 !== r) f = r;else {
              for (var l = 0; l < f.length && 5 > l; l++) {
                if (r = G(m, f, l), -1 !== r) {
                  F = l;
                  f = r;
                  break b;
                }
              }

              f = -1;
            }
          }

          b: {
            m = k;
            r = B().get(t.primitive);
            if (void 0 !== r) for (l = 0; l < r.length && l < m.length; l++) {
              if (r[l].source !== m[l].source) {
                l < m.length - 1 && H(m[l].functionName, t.primitive) && l++;
                l < m.length - 1 && H(m[l].functionName, t.primitive) && l++;
                m = l;
                break b;
              }
            }
            m = -1;
          }

          k = -1 === f || -1 === m || 2 > f - m ? null : k.slice(m, f - 1);

          if (null !== k) {
            f = 0;

            if (null !== d) {
              for (; f < k.length && f < d.length && k[k.length - f - 1].source === d[d.length - f - 1].source;) {
                f++;
              }

              for (d = d.length - 1; d > f; d--) {
                e = q.pop();
              }
            }

            for (d = k.length - f - 1; 1 <= d; d--) {
              f = [], e.push({
                id: null,
                isStateEditable: !1,
                name: I(k[d - 1].functionName),
                value: void 0,
                subHooks: f
              }), q.push(e), e = f;
            }

            d = k;
          }

          k = t.primitive;
          f = "Context" === k || "DebugValue" === k ? null : p++;
          e.push({
            id: f,
            isStateEditable: "Reducer" === k || "State" === k,
            name: k,
            value: t.value,
            subHooks: []
          });
        }

        K(c, null);
        return c;
      }

      function K(a, b) {
        for (var c = [], d = 0; d < a.length; d++) {
          var e = a[d];
          "DebugValue" === e.name && 0 === e.subHooks.length ? (a.splice(d, 1), d--, c.push(e)) : K(e.subHooks, e);
        }

        null !== b && (1 === c.length ? b.value = c[0].value : 1 < c.length && (b.value = c.map(function (a) {
          return a.value;
        })));
      }

      function L(a, b, c) {
        null == c && (c = v.ReactCurrentDispatcher);
        var d = c.current;
        c.current = C;

        try {
          var e = Error();
          a(b);
        } finally {
          a = y, y = [], c.current = d;
        }

        c = h.parse(e);
        return J(c, a);
      }

      function M(a) {
        a.forEach(function (a, c) {
          return c._currentValue = a;
        });
      }

      exports.inspectHooks = L;

      exports.inspectHooksOfFiber = function (a, b) {
        null == b && (b = v.ReactCurrentDispatcher);
        A = a;
        if (0 !== a.tag && 15 !== a.tag && 11 !== a.tag) throw Error("Unknown Fiber. Needs to be a function component to inspect hooks.");
        B();
        var c = a.type,
            d = a.memoizedProps;

        if (c !== a.elementType && c && c.defaultProps) {
          d = g({}, d);
          var e = c.defaultProps;

          for (p in e) {
            void 0 === d[p] && (d[p] = e[p]);
          }
        }

        D = a.memoizedState;
        var p = new Map();

        try {
          for (e = a; e;) {
            if (10 === e.tag) {
              var q = e.type._context;
              p.has(q) || (p.set(q, q._currentValue), q._currentValue = e.memoizedProps.value);
            }

            e = e.return;
          }

          if (11 === a.tag) {
            var u = c.render;
            c = d;
            var t = a.ref;
            a = b;
            var f = a.current;
            a.current = C;

            try {
              var k = Error();
              u(c, t);
            } finally {
              var m = y;
              y = [];
              a.current = f;
            }

            var r = h.parse(k);
            return J(r, m);
          }

          return L(c, d, b);
        } finally {
          D = null, M(p);
        }
      };
    }, function (module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      (function (root, factory) {
        'use strict';

        if (true) {
          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(17)], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {}
      })(this, function ErrorStackParser(StackFrame) {
        'use strict';

        var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
        var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
        var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;
        return {
          parse: function ErrorStackParser$$parse(error) {
            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
              return this.parseOpera(error);
            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
              return this.parseV8OrIE(error);
            } else if (error.stack) {
              return this.parseFFOrSafari(error);
            } else {
              throw new Error('Cannot parse given Error object');
            }
          },
          extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
            if (urlLike.indexOf(':') === -1) {
              return [urlLike];
            }

            var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
            var parts = regExp.exec(urlLike.replace(/[()]/g, ''));
            return [parts[1], parts[2] || undefined, parts[3] || undefined];
          },
          parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
            var filtered = error.stack.split('\n').filter(function (line) {
              return !!line.match(CHROME_IE_STACK_REGEXP);
            }, this);
            return filtered.map(function (line) {
              if (line.indexOf('(eval ') > -1) {
                line = line.replace(/eval code/g, 'eval').replace(/(\(eval at [^()]*)|(\),.*$)/g, '');
              }

              var sanitizedLine = line.replace(/^\s+/, '').replace(/\(eval code/g, '(');
              var location = sanitizedLine.match(/ (\((.+):(\d+):(\d+)\)$)/);
              sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;
              var tokens = sanitizedLine.split(/\s+/).slice(1);
              var locationParts = this.extractLocation(location ? location[1] : tokens.pop());
              var functionName = tokens.join(' ') || undefined;
              var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];
              return new StackFrame({
                functionName: functionName,
                fileName: fileName,
                lineNumber: locationParts[1],
                columnNumber: locationParts[2],
                source: line
              });
            }, this);
          },
          parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
            var filtered = error.stack.split('\n').filter(function (line) {
              return !line.match(SAFARI_NATIVE_CODE_REGEXP);
            }, this);
            return filtered.map(function (line) {
              if (line.indexOf(' > eval') > -1) {
                line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ':$1');
              }

              if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
                return new StackFrame({
                  functionName: line
                });
              } else {
                var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
                var matches = line.match(functionNameRegex);
                var functionName = matches && matches[1] ? matches[1] : undefined;
                var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));
                return new StackFrame({
                  functionName: functionName,
                  fileName: locationParts[0],
                  lineNumber: locationParts[1],
                  columnNumber: locationParts[2],
                  source: line
                });
              }
            }, this);
          },
          parseOpera: function ErrorStackParser$$parseOpera(e) {
            if (!e.stacktrace || e.message.indexOf('\n') > -1 && e.message.split('\n').length > e.stacktrace.split('\n').length) {
              return this.parseOpera9(e);
            } else if (!e.stack) {
              return this.parseOpera10(e);
            } else {
              return this.parseOpera11(e);
            }
          },
          parseOpera9: function ErrorStackParser$$parseOpera9(e) {
            var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
            var lines = e.message.split('\n');
            var result = [];

            for (var i = 2, len = lines.length; i < len; i += 2) {
              var match = lineRE.exec(lines[i]);

              if (match) {
                result.push(new StackFrame({
                  fileName: match[2],
                  lineNumber: match[1],
                  source: lines[i]
                }));
              }
            }

            return result;
          },
          parseOpera10: function ErrorStackParser$$parseOpera10(e) {
            var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
            var lines = e.stacktrace.split('\n');
            var result = [];

            for (var i = 0, len = lines.length; i < len; i += 2) {
              var match = lineRE.exec(lines[i]);

              if (match) {
                result.push(new StackFrame({
                  functionName: match[3] || undefined,
                  fileName: match[2],
                  lineNumber: match[1],
                  source: lines[i]
                }));
              }
            }

            return result;
          },
          parseOpera11: function ErrorStackParser$$parseOpera11(error) {
            var filtered = error.stack.split('\n').filter(function (line) {
              return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
            }, this);
            return filtered.map(function (line) {
              var tokens = line.split('@');
              var locationParts = this.extractLocation(tokens.pop());
              var functionCall = tokens.shift() || '';
              var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, '$2').replace(/\([^)]*\)/g, '') || undefined;
              var argsRaw;

              if (functionCall.match(/\(([^)]*)\)/)) {
                argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, '$1');
              }

              var args = argsRaw === undefined || argsRaw === '[arguments not available]' ? undefined : argsRaw.split(',');
              return new StackFrame({
                functionName: functionName,
                args: args,
                fileName: locationParts[0],
                lineNumber: locationParts[1],
                columnNumber: locationParts[2],
                source: line
              });
            }, this);
          }
        };
      });
    }, function (module, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      (function (root, factory) {
        'use strict';

        if (true) {
          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {}
      })(this, function () {
        'use strict';

        function _isNumber(n) {
          return !isNaN(parseFloat(n)) && isFinite(n);
        }

        function _capitalize(str) {
          return str.charAt(0).toUpperCase() + str.substring(1);
        }

        function _getter(p) {
          return function () {
            return this[p];
          };
        }

        var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel'];
        var numericProps = ['columnNumber', 'lineNumber'];
        var stringProps = ['fileName', 'functionName', 'source'];
        var arrayProps = ['args'];
        var props = booleanProps.concat(numericProps, stringProps, arrayProps);

        function StackFrame(obj) {
          if (!obj) return;

          for (var i = 0; i < props.length; i++) {
            if (obj[props[i]] !== undefined) {
              this['set' + _capitalize(props[i])](obj[props[i]]);
            }
          }
        }

        StackFrame.prototype = {
          getArgs: function getArgs() {
            return this.args;
          },
          setArgs: function setArgs(v) {
            if (Object.prototype.toString.call(v) !== '[object Array]') {
              throw new TypeError('Args must be an Array');
            }

            this.args = v;
          },
          getEvalOrigin: function getEvalOrigin() {
            return this.evalOrigin;
          },
          setEvalOrigin: function setEvalOrigin(v) {
            if (v instanceof StackFrame) {
              this.evalOrigin = v;
            } else if (v instanceof Object) {
              this.evalOrigin = new StackFrame(v);
            } else {
              throw new TypeError('Eval Origin must be an Object or StackFrame');
            }
          },
          toString: function toString() {
            var fileName = this.getFileName() || '';
            var lineNumber = this.getLineNumber() || '';
            var columnNumber = this.getColumnNumber() || '';
            var functionName = this.getFunctionName() || '';

            if (this.getIsEval()) {
              if (fileName) {
                return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
              }

              return '[eval]:' + lineNumber + ':' + columnNumber;
            }

            if (functionName) {
              return functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')';
            }

            return fileName + ':' + lineNumber + ':' + columnNumber;
          }
        };

        StackFrame.fromString = function StackFrame$$fromString(str) {
          var argsStartIndex = str.indexOf('(');
          var argsEndIndex = str.lastIndexOf(')');
          var functionName = str.substring(0, argsStartIndex);
          var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',');
          var locationString = str.substring(argsEndIndex + 1);

          if (locationString.indexOf('@') === 0) {
            var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, '');
            var fileName = parts[1];
            var lineNumber = parts[2];
            var columnNumber = parts[3];
          }

          return new StackFrame({
            functionName: functionName,
            args: args || undefined,
            fileName: fileName,
            lineNumber: lineNumber || undefined,
            columnNumber: columnNumber || undefined
          });
        };

        for (var i = 0; i < booleanProps.length; i++) {
          StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);

          StackFrame.prototype['set' + _capitalize(booleanProps[i])] = function (p) {
            return function (v) {
              this[p] = Boolean(v);
            };
          }(booleanProps[i]);
        }

        for (var j = 0; j < numericProps.length; j++) {
          StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j]);

          StackFrame.prototype['set' + _capitalize(numericProps[j])] = function (p) {
            return function (v) {
              if (!_isNumber(v)) {
                throw new TypeError(p + ' must be a Number');
              }

              this[p] = Number(v);
            };
          }(numericProps[j]);
        }

        for (var k = 0; k < stringProps.length; k++) {
          StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k]);

          StackFrame.prototype['set' + _capitalize(stringProps[k])] = function (p) {
            return function (v) {
              this[p] = String(v);
            };
          }(stringProps[k]);
        }

        return StackFrame;
      });
    }, function (module, exports, __webpack_require__) {
      "use strict";

      if (true) {
        module.exports = __webpack_require__(19);
      } else {}
    }, function (module, exports, __webpack_require__) {
      "use strict";
      /** @license React vundefined
       * react.production.min.js
       *
       * Copyright (c) Facebook, Inc. and its affiliates.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var l = __webpack_require__(1),
          m = 60103,
          p = 60106;

      exports.Fragment = 60107;
      exports.StrictMode = 60108;
      exports.Profiler = 60114;
      var q = 60109,
          r = 60110,
          t = 60112;
      exports.Suspense = 60113;
      exports.SuspenseList = 60120;
      var u = 60115,
          v = 60116;
      exports.unstable_DebugTracingMode = 60129;
      exports.unstable_LegacyHidden = 60131;
      exports.unstable_Cache = 60132;

      if ("function" === typeof Symbol && Symbol.for) {
        var w = Symbol.for;
        m = w("react.element");
        p = w("react.portal");
        exports.Fragment = w("react.fragment");
        exports.StrictMode = w("react.strict_mode");
        exports.Profiler = w("react.profiler");
        q = w("react.provider");
        r = w("react.context");
        t = w("react.forward_ref");
        exports.Suspense = w("react.suspense");
        exports.SuspenseList = w("react.suspense_list");
        u = w("react.memo");
        v = w("react.lazy");
        exports.unstable_DebugTracingMode = w("react.debug_trace_mode");
        exports.unstable_LegacyHidden = w("react.legacy_hidden");
        exports.unstable_Cache = w("react.cache");
      }

      var x = "function" === typeof Symbol && Symbol.iterator;

      function y(a) {
        if (null === a || "object" !== _typeof(a)) return null;
        a = x && a[x] || a["@@iterator"];
        return "function" === typeof a ? a : null;
      }

      function z(a) {
        for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {
          b += "&args[]=" + encodeURIComponent(arguments[c]);
        }

        return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }

      var A = {
        isMounted: function isMounted() {
          return !1;
        },
        enqueueForceUpdate: function enqueueForceUpdate() {},
        enqueueReplaceState: function enqueueReplaceState() {},
        enqueueSetState: function enqueueSetState() {}
      },
          B = {};

      function C(a, b, c) {
        this.props = a;
        this.context = b;
        this.refs = B;
        this.updater = c || A;
      }

      C.prototype.isReactComponent = {};

      C.prototype.setState = function (a, b) {
        if ("object" !== _typeof(a) && "function" !== typeof a && null != a) throw Error(z(85));
        this.updater.enqueueSetState(this, a, b, "setState");
      };

      C.prototype.forceUpdate = function (a) {
        this.updater.enqueueForceUpdate(this, a, "forceUpdate");
      };

      function D() {}

      D.prototype = C.prototype;

      function E(a, b, c) {
        this.props = a;
        this.context = b;
        this.refs = B;
        this.updater = c || A;
      }

      var F = E.prototype = new D();
      F.constructor = E;
      l(F, C.prototype);
      F.isPureReactComponent = !0;
      var G = Array.isArray,
          H = Object.prototype.hasOwnProperty,
          I = {
        current: null
      },
          J = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      };

      function K(a, b, c) {
        var e,
            d = {},
            k = null,
            h = null;
        if (null != b) for (e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) {
          H.call(b, e) && !J.hasOwnProperty(e) && (d[e] = b[e]);
        }
        var g = arguments.length - 2;
        if (1 === g) d.children = c;else if (1 < g) {
          for (var f = Array(g), n = 0; n < g; n++) {
            f[n] = arguments[n + 2];
          }

          d.children = f;
        }
        if (a && a.defaultProps) for (e in g = a.defaultProps, g) {
          void 0 === d[e] && (d[e] = g[e]);
        }
        return {
          $$typeof: m,
          type: a,
          key: k,
          ref: h,
          props: d,
          _owner: I.current
        };
      }

      function L(a, b) {
        return {
          $$typeof: m,
          type: a.type,
          key: b,
          ref: a.ref,
          props: a.props,
          _owner: a._owner
        };
      }

      function M(a) {
        return "object" === _typeof(a) && null !== a && a.$$typeof === m;
      }

      function escape(a) {
        var b = {
          "=": "=0",
          ":": "=2"
        };
        return "$" + a.replace(/[=:]/g, function (a) {
          return b[a];
        });
      }

      var N = /\/+/g;

      function O(a, b) {
        return "object" === _typeof(a) && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
      }

      function P(a, b, c, e, d) {
        var k = _typeof(a);

        if ("undefined" === k || "boolean" === k) a = null;
        var h = !1;
        if (null === a) h = !0;else switch (k) {
          case "string":
          case "number":
            h = !0;
            break;

          case "object":
            switch (a.$$typeof) {
              case m:
              case p:
                h = !0;
            }

        }
        if (h) return h = a, d = d(h), a = "" === e ? "." + O(h, 0) : e, G(d) ? (c = "", null != a && (c = a.replace(N, "$&/") + "/"), P(d, b, c, "", function (a) {
          return a;
        })) : null != d && (M(d) && (d = L(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(N, "$&/") + "/") + a)), b.push(d)), 1;
        h = 0;
        e = "" === e ? "." : e + ":";
        if (G(a)) for (var g = 0; g < a.length; g++) {
          k = a[g];
          var f = e + O(k, g);
          h += P(k, b, c, f, d);
        } else if (f = y(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) {
          k = k.value, f = e + O(k, g++), h += P(k, b, c, f, d);
        } else if ("object" === k) throw b = "" + a, Error(z(31, "[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
        return h;
      }

      function Q(a, b, c) {
        if (null == a) return a;
        var e = [],
            d = 0;
        P(a, e, "", "", function (a) {
          return b.call(c, a, d++);
        });
        return e;
      }

      function R(a) {
        if (-1 === a._status) {
          var b = a._result;
          b = b();
          a._status = 0;
          a._result = b;
          b.then(function (b) {
            0 === a._status && (b = b.default, a._status = 1, a._result = b);
          }, function (b) {
            0 === a._status && (a._status = 2, a._result = b);
          });
        }

        if (1 === a._status) return a._result;
        throw a._result;
      }

      var S = {
        current: null
      },
          T = {
        transition: 0
      },
          U = {
        ReactCurrentDispatcher: S,
        ReactCurrentBatchConfig: T,
        ReactCurrentOwner: I,
        IsSomeRendererActing: {
          current: !1
        },
        assign: l
      };
      exports.Children = {
        map: Q,
        forEach: function forEach(a, b, c) {
          Q(a, function () {
            b.apply(this, arguments);
          }, c);
        },
        count: function count(a) {
          var b = 0;
          Q(a, function () {
            b++;
          });
          return b;
        },
        toArray: function toArray(a) {
          return Q(a, function (a) {
            return a;
          }) || [];
        },
        only: function only(a) {
          if (!M(a)) throw Error(z(143));
          return a;
        }
      };
      exports.Component = C;
      exports.PureComponent = E;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = U;

      exports.cloneElement = function (a, b, c) {
        if (null === a || void 0 === a) throw Error(z(267, a));
        var e = l({}, a.props),
            d = a.key,
            k = a.ref,
            h = a._owner;

        if (null != b) {
          void 0 !== b.ref && (k = b.ref, h = I.current);
          void 0 !== b.key && (d = "" + b.key);
          if (a.type && a.type.defaultProps) var g = a.type.defaultProps;

          for (f in b) {
            H.call(b, f) && !J.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
          }
        }

        var f = arguments.length - 2;
        if (1 === f) e.children = c;else if (1 < f) {
          g = Array(f);

          for (var n = 0; n < f; n++) {
            g[n] = arguments[n + 2];
          }

          e.children = g;
        }
        return {
          $$typeof: m,
          type: a.type,
          key: d,
          ref: k,
          props: e,
          _owner: h
        };
      };

      exports.createContext = function (a) {
        a = {
          $$typeof: r,
          _currentValue: a,
          _currentValue2: a,
          _threadCount: 0,
          Provider: null,
          Consumer: null
        };
        a.Provider = {
          $$typeof: q,
          _context: a
        };
        return a.Consumer = a;
      };

      exports.createElement = K;

      exports.createFactory = function (a) {
        var b = K.bind(null, a);
        b.type = a;
        return b;
      };

      exports.createRef = function () {
        return {
          current: null
        };
      };

      exports.forwardRef = function (a) {
        return {
          $$typeof: t,
          render: a
        };
      };

      exports.isValidElement = M;

      exports.lazy = function (a) {
        return {
          $$typeof: v,
          _payload: {
            _status: -1,
            _result: a
          },
          _init: R
        };
      };

      exports.memo = function (a, b) {
        return {
          $$typeof: u,
          type: a,
          compare: void 0 === b ? null : b
        };
      };

      exports.startTransition = function (a) {
        var b = T.transition;
        T.transition = 1;

        try {
          a();
        } finally {
          T.transition = b;
        }
      };

      exports.unstable_createMutableSource = function (a, b) {
        return {
          _getVersion: b,
          _source: a,
          _workInProgressVersionPrimary: null,
          _workInProgressVersionSecondary: null
        };
      };

      exports.unstable_getCacheForType = function (a) {
        return S.current.getCacheForType(a);
      };

      exports.unstable_useCacheRefresh = function () {
        return S.current.useCacheRefresh();
      };

      exports.unstable_useMutableSource = function (a, b, c) {
        return S.current.useMutableSource(a, b, c);
      };

      exports.unstable_useOpaqueIdentifier = function () {
        return S.current.useOpaqueIdentifier();
      };

      exports.useCallback = function (a, b) {
        return S.current.useCallback(a, b);
      };

      exports.useContext = function (a) {
        return S.current.useContext(a);
      };

      exports.useDebugValue = function () {};

      exports.useDeferredValue = function (a) {
        return S.current.useDeferredValue(a);
      };

      exports.useEffect = function (a, b) {
        return S.current.useEffect(a, b);
      };

      exports.useImperativeHandle = function (a, b, c) {
        return S.current.useImperativeHandle(a, b, c);
      };

      exports.useLayoutEffect = function (a, b) {
        return S.current.useLayoutEffect(a, b);
      };

      exports.useMemo = function (a, b) {
        return S.current.useMemo(a, b);
      };

      exports.useReducer = function (a, b, c) {
        return S.current.useReducer(a, b, c);
      };

      exports.useRef = function (a) {
        return S.current.useRef(a);
      };

      exports.useState = function (a) {
        return S.current.useState(a);
      };

      exports.useTransition = function () {
        return S.current.useTransition();
      };

      exports.version = "17.0.3-experimental-965fb8be6";
    }, function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);

      __webpack_require__.d(__webpack_exports__, "connectToDevTools", function () {
        return connectToDevTools;
      });

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      var EventEmitter = function () {
        function EventEmitter() {
          _classCallCheck(this, EventEmitter);

          _defineProperty(this, "listenersMap", new Map());
        }

        _createClass(EventEmitter, [{
          key: "addListener",
          value: function addListener(event, listener) {
            var listeners = this.listenersMap.get(event);

            if (listeners === undefined) {
              this.listenersMap.set(event, [listener]);
            } else {
              var index = listeners.indexOf(listener);

              if (index < 0) {
                listeners.push(listener);
              }
            }
          }
        }, {
          key: "emit",
          value: function emit(event) {
            var listeners = this.listenersMap.get(event);

            if (listeners !== undefined) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              if (listeners.length === 1) {
                var listener = listeners[0];
                listener.apply(null, args);
              } else {
                var didThrow = false;
                var caughtError = null;
                var clonedListeners = Array.from(listeners);

                for (var i = 0; i < clonedListeners.length; i++) {
                  var _listener = clonedListeners[i];

                  try {
                    _listener.apply(null, args);
                  } catch (error) {
                    if (caughtError === null) {
                      didThrow = true;
                      caughtError = error;
                    }
                  }
                }

                if (didThrow) {
                  throw caughtError;
                }
              }
            }
          }
        }, {
          key: "removeAllListeners",
          value: function removeAllListeners() {
            this.listenersMap.clear();
          }
        }, {
          key: "removeListener",
          value: function removeListener(event, listener) {
            var listeners = this.listenersMap.get(event);

            if (listeners !== undefined) {
              var index = listeners.indexOf(listener);

              if (index >= 0) {
                listeners.splice(index, 1);
              }
            }
          }
        }]);

        return EventEmitter;
      }();

      var lodash_throttle = __webpack_require__(3);

      var lodash_throttle_default = __webpack_require__.n(lodash_throttle);

      var __DEBUG__ = false;
      var TREE_OPERATION_ADD = 1;
      var TREE_OPERATION_REMOVE = 2;
      var TREE_OPERATION_REORDER_CHILDREN = 3;
      var TREE_OPERATION_UPDATE_TREE_BASE_DURATION = 4;
      var TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS = 5;
      var TREE_OPERATION_REMOVE_ROOT = 6;
      var LOCAL_STORAGE_FILTER_PREFERENCES_KEY = 'React::DevTools::componentFilters';
      var SESSION_STORAGE_LAST_SELECTION_KEY = 'React::DevTools::lastSelection';
      var SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY = 'React::DevTools::recordChangeDescriptions';
      var SESSION_STORAGE_RELOAD_AND_PROFILE_KEY = 'React::DevTools::reloadAndProfile';
      var LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS = 'React::DevTools::breakOnConsoleErrors';
      var LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY = 'React::DevTools::appendComponentStack';
      var LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY = 'React::DevTools::showInlineWarningsAndErrors';
      var LOCAL_STORAGE_TRACE_UPDATES_ENABLED_KEY = 'React::DevTools::traceUpdatesEnabled';
      var PROFILER_EXPORT_VERSION = 5;
      var CHANGE_LOG_URL = 'https://github.com/facebook/react/blob/master/packages/react-devtools/CHANGELOG.md';
      var UNSUPPORTED_VERSION_URL = 'https://reactjs.org/blog/2019/08/15/new-react-devtools.html#how-do-i-get-the-old-version-back';
      var REACT_DEVTOOLS_WORKPLACE_URL = 'https://fburl.com/react-devtools-workplace-group';
      var COMFORTABLE_LINE_HEIGHT;
      var COMPACT_LINE_HEIGHT;

      try {
        var rawStyleString = __webpack_require__(9).default;

        var extractVar = function extractVar(varName) {
          var regExp = new RegExp("".concat(varName, ": ([0-9]+)"));
          var match = rawStyleString.match(regExp);
          return parseInt(match[1], 10);
        };

        COMFORTABLE_LINE_HEIGHT = extractVar('comfortable-line-height-data');
        COMPACT_LINE_HEIGHT = extractVar('compact-line-height-data');
      } catch (error) {
        COMFORTABLE_LINE_HEIGHT = 15;
        COMPACT_LINE_HEIGHT = 10;
      }

      function localStorageGetItem(key) {
        try {
          return localStorage.getItem(key);
        } catch (error) {
          return null;
        }
      }

      function localStorageRemoveItem(key) {
        try {
          localStorage.removeItem(key);
        } catch (error) {}
      }

      function localStorageSetItem(key, value) {
        try {
          return localStorage.setItem(key, value);
        } catch (error) {}
      }

      function sessionStorageGetItem(key) {
        try {
          return sessionStorage.getItem(key);
        } catch (error) {
          return null;
        }
      }

      function sessionStorageRemoveItem(key) {
        try {
          sessionStorage.removeItem(key);
        } catch (error) {}
      }

      function sessionStorageSetItem(key, value) {
        try {
          return sessionStorage.setItem(key, value);
        } catch (error) {}
      }

      var simpleIsEqual = function simpleIsEqual(a, b) {
        return a === b;
      };

      var esm = function esm(resultFn) {
        var isEqual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : simpleIsEqual;
        var lastThis = void 0;
        var lastArgs = [];
        var lastResult = void 0;
        var calledOnce = false;

        var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {
          return isEqual(newArg, lastArgs[index]);
        };

        var result = function result() {
          for (var _len = arguments.length, newArgs = Array(_len), _key = 0; _key < _len; _key++) {
            newArgs[_key] = arguments[_key];
          }

          if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {
            return lastResult;
          }

          calledOnce = true;
          lastThis = this;
          lastArgs = newArgs;
          lastResult = resultFn.apply(this, newArgs);
          return lastResult;
        };

        return result;
      };

      var object_assign = __webpack_require__(1);

      var object_assign_default = __webpack_require__.n(object_assign);

      function getOwnerWindow(node) {
        if (!node.ownerDocument) {
          return null;
        }

        return node.ownerDocument.defaultView;
      }

      function getOwnerIframe(node) {
        var nodeWindow = getOwnerWindow(node);

        if (nodeWindow) {
          return nodeWindow.frameElement;
        }

        return null;
      }

      function getBoundingClientRectWithBorderOffset(node) {
        var dimensions = getElementDimensions(node);
        return mergeRectOffsets([node.getBoundingClientRect(), {
          top: dimensions.borderTop,
          left: dimensions.borderLeft,
          bottom: dimensions.borderBottom,
          right: dimensions.borderRight,
          width: 0,
          height: 0
        }]);
      }

      function mergeRectOffsets(rects) {
        return rects.reduce(function (previousRect, rect) {
          if (previousRect == null) {
            return rect;
          }

          return {
            top: previousRect.top + rect.top,
            left: previousRect.left + rect.left,
            width: previousRect.width,
            height: previousRect.height,
            bottom: previousRect.bottom + rect.bottom,
            right: previousRect.right + rect.right
          };
        });
      }

      function getNestedBoundingClientRect(node, boundaryWindow) {
        var ownerIframe = getOwnerIframe(node);

        if (ownerIframe && ownerIframe !== boundaryWindow) {
          var rects = [node.getBoundingClientRect()];
          var currentIframe = ownerIframe;
          var onlyOneMore = false;

          while (currentIframe) {
            var rect = getBoundingClientRectWithBorderOffset(currentIframe);
            rects.push(rect);
            currentIframe = getOwnerIframe(currentIframe);

            if (onlyOneMore) {
              break;
            }

            if (currentIframe && getOwnerWindow(currentIframe) === boundaryWindow) {
              onlyOneMore = true;
            }
          }

          return mergeRectOffsets(rects);
        } else {
          return node.getBoundingClientRect();
        }
      }

      function getElementDimensions(domElement) {
        var calculatedStyle = window.getComputedStyle(domElement);
        return {
          borderLeft: parseInt(calculatedStyle.borderLeftWidth, 10),
          borderRight: parseInt(calculatedStyle.borderRightWidth, 10),
          borderTop: parseInt(calculatedStyle.borderTopWidth, 10),
          borderBottom: parseInt(calculatedStyle.borderBottomWidth, 10),
          marginLeft: parseInt(calculatedStyle.marginLeft, 10),
          marginRight: parseInt(calculatedStyle.marginRight, 10),
          marginTop: parseInt(calculatedStyle.marginTop, 10),
          marginBottom: parseInt(calculatedStyle.marginBottom, 10),
          paddingLeft: parseInt(calculatedStyle.paddingLeft, 10),
          paddingRight: parseInt(calculatedStyle.paddingRight, 10),
          paddingTop: parseInt(calculatedStyle.paddingTop, 10),
          paddingBottom: parseInt(calculatedStyle.paddingBottom, 10)
        };
      }

      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it;

        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;

            var F = function F() {};

            return {
              s: F,
              n: function n() {
                if (i >= o.length) return {
                  done: true
                };
                return {
                  done: false,
                  value: o[i++]
                };
              },
              e: function e(_e) {
                throw _e;
              },
              f: F
            };
          }

          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        var normalCompletion = true,
            didErr = false,
            err;
        return {
          s: function s() {
            it = o[Symbol.iterator]();
          },
          n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function e(_e2) {
            didErr = true;
            err = _e2;
          },
          f: function f() {
            try {
              if (!normalCompletion && it.return != null) it.return();
            } finally {
              if (didErr) throw err;
            }
          }
        };
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      function Overlay_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function Overlay_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function Overlay_createClass(Constructor, protoProps, staticProps) {
        if (protoProps) Overlay_defineProperties(Constructor.prototype, protoProps);
        if (staticProps) Overlay_defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var Overlay_OverlayRect = function () {
        function OverlayRect(doc, container) {
          Overlay_classCallCheck(this, OverlayRect);
          this.node = doc.createElement('div');
          this.border = doc.createElement('div');
          this.padding = doc.createElement('div');
          this.content = doc.createElement('div');
          this.border.style.borderColor = overlayStyles.border;
          this.padding.style.borderColor = overlayStyles.padding;
          this.content.style.backgroundColor = overlayStyles.background;
          object_assign_default()(this.node.style, {
            borderColor: overlayStyles.margin,
            pointerEvents: 'none',
            position: 'fixed'
          });
          this.node.style.zIndex = '10000000';
          this.node.appendChild(this.border);
          this.border.appendChild(this.padding);
          this.padding.appendChild(this.content);
          container.appendChild(this.node);
        }

        Overlay_createClass(OverlayRect, [{
          key: "remove",
          value: function remove() {
            if (this.node.parentNode) {
              this.node.parentNode.removeChild(this.node);
            }
          }
        }, {
          key: "update",
          value: function update(box, dims) {
            boxWrap(dims, 'margin', this.node);
            boxWrap(dims, 'border', this.border);
            boxWrap(dims, 'padding', this.padding);
            object_assign_default()(this.content.style, {
              height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + 'px',
              width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + 'px'
            });
            object_assign_default()(this.node.style, {
              top: box.top - dims.marginTop + 'px',
              left: box.left - dims.marginLeft + 'px'
            });
          }
        }]);
        return OverlayRect;
      }();

      var Overlay_OverlayTip = function () {
        function OverlayTip(doc, container) {
          Overlay_classCallCheck(this, OverlayTip);
          this.tip = doc.createElement('div');
          object_assign_default()(this.tip.style, {
            display: 'flex',
            flexFlow: 'row nowrap',
            backgroundColor: '#333740',
            borderRadius: '2px',
            fontFamily: '"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace',
            fontWeight: 'bold',
            padding: '3px 5px',
            pointerEvents: 'none',
            position: 'fixed',
            fontSize: '12px',
            whiteSpace: 'nowrap'
          });
          this.nameSpan = doc.createElement('span');
          this.tip.appendChild(this.nameSpan);
          object_assign_default()(this.nameSpan.style, {
            color: '#ee78e6',
            borderRight: '1px solid #aaaaaa',
            paddingRight: '0.5rem',
            marginRight: '0.5rem'
          });
          this.dimSpan = doc.createElement('span');
          this.tip.appendChild(this.dimSpan);
          object_assign_default()(this.dimSpan.style, {
            color: '#d7d7d7'
          });
          this.tip.style.zIndex = '10000000';
          container.appendChild(this.tip);
        }

        Overlay_createClass(OverlayTip, [{
          key: "remove",
          value: function remove() {
            if (this.tip.parentNode) {
              this.tip.parentNode.removeChild(this.tip);
            }
          }
        }, {
          key: "updateText",
          value: function updateText(name, width, height) {
            this.nameSpan.textContent = name;
            this.dimSpan.textContent = Math.round(width) + 'px × ' + Math.round(height) + 'px';
          }
        }, {
          key: "updatePosition",
          value: function updatePosition(dims, bounds) {
            var tipRect = this.tip.getBoundingClientRect();
            var tipPos = findTipPos(dims, bounds, {
              width: tipRect.width,
              height: tipRect.height
            });
            object_assign_default()(this.tip.style, tipPos.style);
          }
        }]);
        return OverlayTip;
      }();

      var Overlay_Overlay = function () {
        function Overlay() {
          Overlay_classCallCheck(this, Overlay);
          var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
          this.window = currentWindow;
          var tipBoundsWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
          this.tipBoundsWindow = tipBoundsWindow;
          var doc = currentWindow.document;
          this.container = doc.createElement('div');
          this.container.style.zIndex = '10000000';
          this.tip = new Overlay_OverlayTip(doc, this.container);
          this.rects = [];
          doc.body.appendChild(this.container);
        }

        Overlay_createClass(Overlay, [{
          key: "remove",
          value: function remove() {
            this.tip.remove();
            this.rects.forEach(function (rect) {
              rect.remove();
            });
            this.rects.length = 0;

            if (this.container.parentNode) {
              this.container.parentNode.removeChild(this.container);
            }
          }
        }, {
          key: "inspect",
          value: function inspect(nodes, name) {
            var _this = this;

            var elements = nodes.filter(function (node) {
              return node.nodeType === Node.ELEMENT_NODE;
            });

            while (this.rects.length > elements.length) {
              var rect = this.rects.pop();
              rect.remove();
            }

            if (elements.length === 0) {
              return;
            }

            while (this.rects.length < elements.length) {
              this.rects.push(new Overlay_OverlayRect(this.window.document, this.container));
            }

            var outerBox = {
              top: Number.POSITIVE_INFINITY,
              right: Number.NEGATIVE_INFINITY,
              bottom: Number.NEGATIVE_INFINITY,
              left: Number.POSITIVE_INFINITY
            };
            elements.forEach(function (element, index) {
              var box = getNestedBoundingClientRect(element, _this.window);
              var dims = getElementDimensions(element);
              outerBox.top = Math.min(outerBox.top, box.top - dims.marginTop);
              outerBox.right = Math.max(outerBox.right, box.left + box.width + dims.marginRight);
              outerBox.bottom = Math.max(outerBox.bottom, box.top + box.height + dims.marginBottom);
              outerBox.left = Math.min(outerBox.left, box.left - dims.marginLeft);
              var rect = _this.rects[index];
              rect.update(box, dims);
            });

            if (!name) {
              name = elements[0].nodeName.toLowerCase();
              var node = elements[0];
              var hook = node.ownerDocument.defaultView.__REACT_DEVTOOLS_GLOBAL_HOOK__;

              if (hook != null && hook.rendererInterfaces != null) {
                var ownerName = null;

                var _iterator = _createForOfIteratorHelper(hook.rendererInterfaces.values()),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var rendererInterface = _step.value;
                    var id = rendererInterface.getFiberIDForNative(node, true);

                    if (id !== null) {
                      ownerName = rendererInterface.getDisplayNameForFiberID(id, true);
                      break;
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                if (ownerName) {
                  name += ' (in ' + ownerName + ')';
                }
              }
            }

            this.tip.updateText(name, outerBox.right - outerBox.left, outerBox.bottom - outerBox.top);
            var tipBounds = getNestedBoundingClientRect(this.tipBoundsWindow.document.documentElement, this.window);
            this.tip.updatePosition({
              top: outerBox.top,
              left: outerBox.left,
              height: outerBox.bottom - outerBox.top,
              width: outerBox.right - outerBox.left
            }, {
              top: tipBounds.top + this.tipBoundsWindow.scrollY,
              left: tipBounds.left + this.tipBoundsWindow.scrollX,
              height: this.tipBoundsWindow.innerHeight,
              width: this.tipBoundsWindow.innerWidth
            });
          }
        }]);
        return Overlay;
      }();

      function findTipPos(dims, bounds, tipSize) {
        var tipHeight = Math.max(tipSize.height, 20);
        var tipWidth = Math.max(tipSize.width, 60);
        var margin = 5;
        var top;

        if (dims.top + dims.height + tipHeight <= bounds.top + bounds.height) {
          if (dims.top + dims.height < bounds.top + 0) {
            top = bounds.top + margin;
          } else {
            top = dims.top + dims.height + margin;
          }
        } else if (dims.top - tipHeight <= bounds.top + bounds.height) {
          if (dims.top - tipHeight - margin < bounds.top + margin) {
            top = bounds.top + margin;
          } else {
            top = dims.top - tipHeight - margin;
          }
        } else {
          top = bounds.top + bounds.height - tipHeight - margin;
        }

        var left = dims.left + margin;

        if (dims.left < bounds.left) {
          left = bounds.left + margin;
        }

        if (dims.left + tipWidth > bounds.left + bounds.width) {
          left = bounds.left + bounds.width - tipWidth - margin;
        }

        top += 'px';
        left += 'px';
        return {
          style: {
            top: top,
            left: left
          }
        };
      }

      function boxWrap(dims, what, node) {
        object_assign_default()(node.style, {
          borderTopWidth: dims[what + 'Top'] + 'px',
          borderLeftWidth: dims[what + 'Left'] + 'px',
          borderRightWidth: dims[what + 'Right'] + 'px',
          borderBottomWidth: dims[what + 'Bottom'] + 'px',
          borderStyle: 'solid'
        });
      }

      var overlayStyles = {
        background: 'rgba(120, 170, 210, 0.7)',
        padding: 'rgba(77, 200, 0, 0.3)',
        margin: 'rgba(255, 155, 0, 0.3)',
        border: 'rgba(255, 200, 50, 0.3)'
      };
      var SHOW_DURATION = 2000;
      var timeoutID = null;
      var overlay = null;

      function hideOverlay() {
        timeoutID = null;

        if (overlay !== null) {
          overlay.remove();
          overlay = null;
        }
      }

      function showOverlay(elements, componentName, hideAfterTimeout) {
        if (window.document == null) {
          return;
        }

        if (timeoutID !== null) {
          clearTimeout(timeoutID);
        }

        if (elements == null) {
          return;
        }

        if (overlay === null) {
          overlay = new Overlay_Overlay();
        }

        overlay.inspect(elements, componentName);

        if (hideAfterTimeout) {
          timeoutID = setTimeout(hideOverlay, SHOW_DURATION);
        }
      }

      var iframesListeningTo = new Set();

      function setupHighlighter(bridge, agent) {
        bridge.addListener('clearNativeElementHighlight', clearNativeElementHighlight);
        bridge.addListener('highlightNativeElement', highlightNativeElement);
        bridge.addListener('shutdown', stopInspectingNative);
        bridge.addListener('startInspectingNative', startInspectingNative);
        bridge.addListener('stopInspectingNative', stopInspectingNative);

        function startInspectingNative() {
          registerListenersOnWindow(window);
        }

        function registerListenersOnWindow(window) {
          if (window && typeof window.addEventListener === 'function') {
            window.addEventListener('click', onClick, true);
            window.addEventListener('mousedown', onMouseEvent, true);
            window.addEventListener('mouseover', onMouseEvent, true);
            window.addEventListener('mouseup', onMouseEvent, true);
            window.addEventListener('pointerdown', onPointerDown, true);
            window.addEventListener('pointerover', onPointerOver, true);
            window.addEventListener('pointerup', onPointerUp, true);
          }
        }

        function stopInspectingNative() {
          hideOverlay();
          removeListenersOnWindow(window);
          iframesListeningTo.forEach(function (frame) {
            try {
              removeListenersOnWindow(frame.contentWindow);
            } catch (error) {}
          });
          iframesListeningTo = new Set();
        }

        function removeListenersOnWindow(window) {
          if (window && typeof window.removeEventListener === 'function') {
            window.removeEventListener('click', onClick, true);
            window.removeEventListener('mousedown', onMouseEvent, true);
            window.removeEventListener('mouseover', onMouseEvent, true);
            window.removeEventListener('mouseup', onMouseEvent, true);
            window.removeEventListener('pointerdown', onPointerDown, true);
            window.removeEventListener('pointerover', onPointerOver, true);
            window.removeEventListener('pointerup', onPointerUp, true);
          }
        }

        function clearNativeElementHighlight() {
          hideOverlay();
        }

        function highlightNativeElement(_ref) {
          var displayName = _ref.displayName,
              hideAfterTimeout = _ref.hideAfterTimeout,
              id = _ref.id,
              openNativeElementsPanel = _ref.openNativeElementsPanel,
              rendererID = _ref.rendererID,
              scrollIntoView = _ref.scrollIntoView;
          var renderer = agent.rendererInterfaces[rendererID];

          if (renderer == null) {
            console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
          }

          var nodes = null;

          if (renderer != null) {
            nodes = renderer.findNativeNodesForFiberID(id);
          }

          if (nodes != null && nodes[0] != null) {
            var node = nodes[0];

            if (scrollIntoView && typeof node.scrollIntoView === 'function') {
              node.scrollIntoView({
                block: 'nearest',
                inline: 'nearest'
              });
            }

            showOverlay(nodes, displayName, hideAfterTimeout);

            if (openNativeElementsPanel) {
              window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0 = node;
              bridge.send('syncSelectionToNativeElementsPanel');
            }
          } else {
            hideOverlay();
          }
        }

        function onClick(event) {
          event.preventDefault();
          event.stopPropagation();
          stopInspectingNative();
          bridge.send('stopInspectingNative', true);
        }

        function onMouseEvent(event) {
          event.preventDefault();
          event.stopPropagation();
        }

        function onPointerDown(event) {
          event.preventDefault();
          event.stopPropagation();
          selectFiberForNode(event.target);
        }

        function onPointerOver(event) {
          event.preventDefault();
          event.stopPropagation();
          var target = event.target;

          if (target.tagName === 'IFRAME') {
            var iframe = target;

            try {
              if (!iframesListeningTo.has(iframe)) {
                var _window = iframe.contentWindow;
                registerListenersOnWindow(_window);
                iframesListeningTo.add(iframe);
              }
            } catch (error) {}
          }

          showOverlay([target], null, false);
          selectFiberForNode(target);
        }

        function onPointerUp(event) {
          event.preventDefault();
          event.stopPropagation();
        }

        var selectFiberForNode = lodash_throttle_default()(esm(function (node) {
          var id = agent.getIDForNode(node);

          if (id !== null) {
            bridge.send('selectFiber', id);
          }
        }), 200, {
          leading: false
        });
      }

      var OUTLINE_COLOR = '#f0f0f0';
      var COLORS = ['#37afa9', '#63b19e', '#80b393', '#97b488', '#abb67d', '#beb771', '#cfb965', '#dfba57', '#efbb49', '#febc38'];
      var canvas = null;

      function draw(nodeToData) {
        if (canvas === null) {
          initialize();
        }

        var canvasFlow = canvas;
        canvasFlow.width = window.innerWidth;
        canvasFlow.height = window.innerHeight;
        var context = canvasFlow.getContext('2d');
        context.clearRect(0, 0, canvasFlow.width, canvasFlow.height);
        nodeToData.forEach(function (_ref) {
          var count = _ref.count,
              rect = _ref.rect;

          if (rect !== null) {
            var colorIndex = Math.min(COLORS.length - 1, count - 1);
            var color = COLORS[colorIndex];
            drawBorder(context, rect, color);
          }
        });
      }

      function drawBorder(context, rect, color) {
        var height = rect.height,
            left = rect.left,
            top = rect.top,
            width = rect.width;
        context.lineWidth = 1;
        context.strokeStyle = OUTLINE_COLOR;
        context.strokeRect(left - 1, top - 1, width + 2, height + 2);
        context.lineWidth = 1;
        context.strokeStyle = OUTLINE_COLOR;
        context.strokeRect(left + 1, top + 1, width - 1, height - 1);
        context.strokeStyle = color;
        context.setLineDash([0]);
        context.lineWidth = 1;
        context.strokeRect(left, top, width - 1, height - 1);
        context.setLineDash([0]);
      }

      function destroy() {
        if (canvas !== null) {
          if (canvas.parentNode != null) {
            canvas.parentNode.removeChild(canvas);
          }

          canvas = null;
        }
      }

      function initialize() {
        canvas = window.document.createElement('canvas');
        canvas.style.cssText = "\n    xx-background-color: red;\n    xx-opacity: 0.5;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 1000000000;\n  ";
        var root = window.document.documentElement;
        root.insertBefore(canvas, root.firstChild);
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var DISPLAY_DURATION = 250;
      var MAX_DISPLAY_DURATION = 3000;
      var REMEASUREMENT_AFTER_DURATION = 250;
      var getCurrentTime = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === 'object' && typeof performance.now === 'function' ? function () {
        return performance.now();
      } : function () {
        return Date.now();
      };
      var nodeToData = new Map();
      var TraceUpdates_agent = null;
      var drawAnimationFrameID = null;
      var isEnabled = false;
      var redrawTimeoutID = null;

      function TraceUpdates_initialize(injectedAgent) {
        TraceUpdates_agent = injectedAgent;
        TraceUpdates_agent.addListener('traceUpdates', traceUpdates);
      }

      function toggleEnabled(value) {
        isEnabled = value;

        if (!isEnabled) {
          nodeToData.clear();

          if (drawAnimationFrameID !== null) {
            cancelAnimationFrame(drawAnimationFrameID);
            drawAnimationFrameID = null;
          }

          if (redrawTimeoutID !== null) {
            clearTimeout(redrawTimeoutID);
            redrawTimeoutID = null;
          }

          destroy();
        }
      }

      function traceUpdates(nodes) {
        if (!isEnabled) {
          return;
        }

        nodes.forEach(function (node) {
          var data = nodeToData.get(node);
          var now = getCurrentTime();
          var lastMeasuredAt = data != null ? data.lastMeasuredAt : 0;
          var rect = data != null ? data.rect : null;

          if (rect === null || lastMeasuredAt + REMEASUREMENT_AFTER_DURATION < now) {
            lastMeasuredAt = now;
            rect = measureNode(node);
          }

          nodeToData.set(node, {
            count: data != null ? data.count + 1 : 1,
            expirationTime: data != null ? Math.min(now + MAX_DISPLAY_DURATION, data.expirationTime + DISPLAY_DURATION) : now + DISPLAY_DURATION,
            lastMeasuredAt: lastMeasuredAt,
            rect: rect
          });
        });

        if (redrawTimeoutID !== null) {
          clearTimeout(redrawTimeoutID);
          redrawTimeoutID = null;
        }

        if (drawAnimationFrameID === null) {
          drawAnimationFrameID = requestAnimationFrame(prepareToDraw);
        }
      }

      function prepareToDraw() {
        drawAnimationFrameID = null;
        redrawTimeoutID = null;
        var now = getCurrentTime();
        var earliestExpiration = Number.MAX_VALUE;
        nodeToData.forEach(function (data, node) {
          if (data.expirationTime < now) {
            nodeToData.delete(node);
          } else {
            earliestExpiration = Math.min(earliestExpiration, data.expirationTime);
          }
        });
        draw(nodeToData);

        if (earliestExpiration !== Number.MAX_VALUE) {
          redrawTimeoutID = setTimeout(prepareToDraw, earliestExpiration - now);
        }
      }

      function measureNode(node) {
        if (!node || typeof node.getBoundingClientRect !== 'function') {
          return null;
        }

        var currentWindow = window.__REACT_DEVTOOLS_TARGET_WINDOW__ || window;
        return getNestedBoundingClientRect(node, currentWindow);
      }

      var semver = __webpack_require__(2);

      var ElementTypeClass = 1;
      var ElementTypeContext = 2;
      var ElementTypeFunction = 5;
      var ElementTypeForwardRef = 6;
      var ElementTypeHostComponent = 7;
      var ElementTypeMemo = 8;
      var ElementTypeOtherOrUnknown = 9;
      var ElementTypeProfiler = 10;
      var ElementTypeRoot = 11;
      var ElementTypeSuspense = 12;
      var ElementTypeSuspenseList = 13;
      var ComponentFilterElementType = 1;
      var ComponentFilterDisplayName = 2;
      var ComponentFilterLocation = 3;
      var ComponentFilterHOC = 4;

      var lru_cache = __webpack_require__(6);

      var lru_cache_default = __webpack_require__.n(lru_cache);

      var react_is = __webpack_require__(0);

      function ReactSymbols_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          ReactSymbols_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          ReactSymbols_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return ReactSymbols_typeof(obj);
      }

      var REACT_ELEMENT_TYPE = 0xeac7;
      var REACT_PORTAL_TYPE = 0xeaca;
      var REACT_FRAGMENT_TYPE = 0xeacb;
      var REACT_STRICT_MODE_TYPE = 0xeacc;
      var REACT_PROFILER_TYPE = 0xead2;
      var REACT_PROVIDER_TYPE = 0xeacd;
      var REACT_CONTEXT_TYPE = 0xeace;
      var REACT_FORWARD_REF_TYPE = 0xead0;
      var REACT_SUSPENSE_TYPE = 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = 0xead8;
      var REACT_MEMO_TYPE = 0xead3;
      var REACT_LAZY_TYPE = 0xead4;
      var REACT_SCOPE_TYPE = 0xead7;
      var REACT_OPAQUE_ID_TYPE = 0xeae0;
      var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
      var REACT_OFFSCREEN_TYPE = 0xeae2;
      var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
      var REACT_CACHE_TYPE = 0xeae4;

      if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
        REACT_CACHE_TYPE = symbolFor('react.cache');
      }

      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator';

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || ReactSymbols_typeof(maybeIterable) !== 'object') {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === 'function') {
          return maybeIterator;
        }

        return null;
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              hydration_defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function hydration_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      var meta = {
        inspectable: Symbol('inspectable'),
        inspected: Symbol('inspected'),
        name: Symbol('name'),
        preview_long: Symbol('preview_long'),
        preview_short: Symbol('preview_short'),
        readonly: Symbol('readonly'),
        size: Symbol('size'),
        type: Symbol('type'),
        unserializable: Symbol('unserializable')
      };
      var LEVEL_THRESHOLD = 2;

      function createDehydrated(type, inspectable, data, cleaned, path) {
        cleaned.push(path);
        var dehydrated = {
          inspectable: inspectable,
          type: type,
          preview_long: formatDataForPreview(data, true),
          preview_short: formatDataForPreview(data, false),
          name: !data.constructor || data.constructor.name === 'Object' ? '' : data.constructor.name
        };

        if (type === 'array' || type === 'typed_array') {
          dehydrated.size = data.length;
        } else if (type === 'object') {
          dehydrated.size = Object.keys(data).length;
        }

        if (type === 'iterator' || type === 'typed_array') {
          dehydrated.readonly = true;
        }

        return dehydrated;
      }

      function dehydrate(data, cleaned, unserializable, path, isPathAllowed) {
        var level = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var type = getDataType(data);
        var isPathAllowedCheck;

        switch (type) {
          case 'html_element':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: formatDataForPreview(data, false),
              preview_long: formatDataForPreview(data, true),
              name: data.tagName,
              type: type
            };

          case 'function':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: formatDataForPreview(data, false),
              preview_long: formatDataForPreview(data, true),
              name: typeof data.name === 'function' || !data.name ? 'function' : data.name,
              type: type
            };

          case 'string':
            return data.length <= 500 ? data : data.slice(0, 500) + '...';

          case 'bigint':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: formatDataForPreview(data, false),
              preview_long: formatDataForPreview(data, true),
              name: data.toString(),
              type: type
            };

          case 'symbol':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: formatDataForPreview(data, false),
              preview_long: formatDataForPreview(data, true),
              name: data.toString(),
              type: type
            };

          case 'react_element':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: formatDataForPreview(data, false),
              preview_long: formatDataForPreview(data, true),
              name: getDisplayNameForReactElement(data) || 'Unknown',
              type: type
            };

          case 'array_buffer':
          case 'data_view':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: formatDataForPreview(data, false),
              preview_long: formatDataForPreview(data, true),
              name: type === 'data_view' ? 'DataView' : 'ArrayBuffer',
              size: data.byteLength,
              type: type
            };

          case 'array':
            isPathAllowedCheck = isPathAllowed(path);

            if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
              return createDehydrated(type, true, data, cleaned, path);
            }

            return data.map(function (item, i) {
              return dehydrate(item, cleaned, unserializable, path.concat([i]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
            });

          case 'html_all_collection':
          case 'typed_array':
          case 'iterator':
            isPathAllowedCheck = isPathAllowed(path);

            if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
              return createDehydrated(type, true, data, cleaned, path);
            } else {
              var unserializableValue = {
                unserializable: true,
                type: type,
                readonly: true,
                size: type === 'typed_array' ? data.length : undefined,
                preview_short: formatDataForPreview(data, false),
                preview_long: formatDataForPreview(data, true),
                name: !data.constructor || data.constructor.name === 'Object' ? '' : data.constructor.name
              };
              Array.from(data).forEach(function (item, i) {
                return unserializableValue[i] = dehydrate(item, cleaned, unserializable, path.concat([i]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
              });
              unserializable.push(path);
              return unserializableValue;
            }

          case 'opaque_iterator':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: formatDataForPreview(data, false),
              preview_long: formatDataForPreview(data, true),
              name: data[Symbol.toStringTag],
              type: type
            };

          case 'date':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: formatDataForPreview(data, false),
              preview_long: formatDataForPreview(data, true),
              name: data.toString(),
              type: type
            };

          case 'regexp':
            cleaned.push(path);
            return {
              inspectable: false,
              preview_short: formatDataForPreview(data, false),
              preview_long: formatDataForPreview(data, true),
              name: data.toString(),
              type: type
            };

          case 'object':
            isPathAllowedCheck = isPathAllowed(path);

            if (level >= LEVEL_THRESHOLD && !isPathAllowedCheck) {
              return createDehydrated(type, true, data, cleaned, path);
            } else {
              var object = {};
              getAllEnumerableKeys(data).forEach(function (key) {
                var name = key.toString();
                object[name] = dehydrate(data[key], cleaned, unserializable, path.concat([name]), isPathAllowed, isPathAllowedCheck ? 1 : level + 1);
              });
              return object;
            }

          case 'infinity':
          case 'nan':
          case 'undefined':
            cleaned.push(path);
            return {
              type: type
            };

          default:
            return data;
        }
      }

      function fillInPath(object, data, path, value) {
        var target = getInObject(object, path);

        if (target != null) {
          if (!target[meta.unserializable]) {
            delete target[meta.inspectable];
            delete target[meta.inspected];
            delete target[meta.name];
            delete target[meta.preview_long];
            delete target[meta.preview_short];
            delete target[meta.readonly];
            delete target[meta.size];
            delete target[meta.type];
          }
        }

        if (value !== null && data.unserializable.length > 0) {
          var unserializablePath = data.unserializable[0];
          var isMatch = unserializablePath.length === path.length;

          for (var i = 0; i < path.length; i++) {
            if (path[i] !== unserializablePath[i]) {
              isMatch = false;
              break;
            }
          }

          if (isMatch) {
            upgradeUnserializable(value, value);
          }
        }

        setInObject(object, path, value);
      }

      function hydrate(object, cleaned, unserializable) {
        cleaned.forEach(function (path) {
          var length = path.length;
          var last = path[length - 1];
          var parent = getInObject(object, path.slice(0, length - 1));

          if (!parent || !parent.hasOwnProperty(last)) {
            return;
          }

          var value = parent[last];

          if (!value) {
            return;
          } else if (value.type === 'infinity') {
            parent[last] = Infinity;
          } else if (value.type === 'nan') {
            parent[last] = NaN;
          } else if (value.type === 'undefined') {
            parent[last] = undefined;
          } else {
            var replaced = {};
            replaced[meta.inspectable] = !!value.inspectable;
            replaced[meta.inspected] = false;
            replaced[meta.name] = value.name;
            replaced[meta.preview_long] = value.preview_long;
            replaced[meta.preview_short] = value.preview_short;
            replaced[meta.size] = value.size;
            replaced[meta.readonly] = !!value.readonly;
            replaced[meta.type] = value.type;
            parent[last] = replaced;
          }
        });
        unserializable.forEach(function (path) {
          var length = path.length;
          var last = path[length - 1];
          var parent = getInObject(object, path.slice(0, length - 1));

          if (!parent || !parent.hasOwnProperty(last)) {
            return;
          }

          var node = parent[last];

          var replacement = _objectSpread({}, node);

          upgradeUnserializable(replacement, node);
          parent[last] = replacement;
        });
        return object;
      }

      function upgradeUnserializable(destination, source) {
        var _Object$definePropert;

        Object.defineProperties(destination, (_Object$definePropert = {}, hydration_defineProperty(_Object$definePropert, meta.inspected, {
          configurable: true,
          enumerable: false,
          value: !!source.inspected
        }), hydration_defineProperty(_Object$definePropert, meta.name, {
          configurable: true,
          enumerable: false,
          value: source.name
        }), hydration_defineProperty(_Object$definePropert, meta.preview_long, {
          configurable: true,
          enumerable: false,
          value: source.preview_long
        }), hydration_defineProperty(_Object$definePropert, meta.preview_short, {
          configurable: true,
          enumerable: false,
          value: source.preview_short
        }), hydration_defineProperty(_Object$definePropert, meta.size, {
          configurable: true,
          enumerable: false,
          value: source.size
        }), hydration_defineProperty(_Object$definePropert, meta.readonly, {
          configurable: true,
          enumerable: false,
          value: !!source.readonly
        }), hydration_defineProperty(_Object$definePropert, meta.type, {
          configurable: true,
          enumerable: false,
          value: source.type
        }), hydration_defineProperty(_Object$definePropert, meta.unserializable, {
          configurable: true,
          enumerable: false,
          value: !!source.unserializable
        }), _Object$definePropert));
        delete destination.inspected;
        delete destination.name;
        delete destination.preview_long;
        delete destination.preview_short;
        delete destination.size;
        delete destination.readonly;
        delete destination.type;
        delete destination.unserializable;
      }

      function utils_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          utils_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          utils_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return utils_typeof(obj);
      }

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || utils_unsupportedIterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function utils_unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return utils_arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return utils_arrayLikeToArray(o, minLen);
      }

      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return utils_arrayLikeToArray(arr);
      }

      function utils_arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      var cachedDisplayNames = new WeakMap();
      var encodedStringCache = new lru_cache_default.a({
        max: 1000
      });

      function alphaSortKeys(a, b) {
        if (a.toString() > b.toString()) {
          return 1;
        } else if (b.toString() > a.toString()) {
          return -1;
        } else {
          return 0;
        }
      }

      function getAllEnumerableKeys(obj) {
        var keys = new Set();
        var current = obj;

        var _loop = function _loop() {
          var currentKeys = [].concat(_toConsumableArray(Object.keys(current)), _toConsumableArray(Object.getOwnPropertySymbols(current)));
          var descriptors = Object.getOwnPropertyDescriptors(current);
          currentKeys.forEach(function (key) {
            if (descriptors[key].enumerable) {
              keys.add(key);
            }
          });
          current = Object.getPrototypeOf(current);
        };

        while (current != null) {
          _loop();
        }

        return keys;
      }

      function getDisplayName(type) {
        var fallbackName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Anonymous';
        var nameFromCache = cachedDisplayNames.get(type);

        if (nameFromCache != null) {
          return nameFromCache;
        }

        var displayName = fallbackName;

        if (typeof type.displayName === 'string') {
          displayName = type.displayName;
        } else if (typeof type.name === 'string' && type.name !== '') {
          displayName = type.name;
        }

        cachedDisplayNames.set(type, displayName);
        return displayName;
      }

      var utils_uidCounter = 0;

      function getUID() {
        return ++utils_uidCounter;
      }

      function utfDecodeString(array) {
        return String.fromCodePoint.apply(String, _toConsumableArray(array));
      }

      function utfEncodeString(string) {
        var cached = encodedStringCache.get(string);

        if (cached !== undefined) {
          return cached;
        }

        var encoded = new Array(string.length);

        for (var i = 0; i < string.length; i++) {
          encoded[i] = string.codePointAt(i);
        }

        encodedStringCache.set(string, encoded);
        return encoded;
      }

      function printOperationsArray(operations) {
        var rendererID = operations[0];
        var rootID = operations[1];
        var logs = ["operations for renderer:".concat(rendererID, " and root:").concat(rootID)];
        var i = 2;
        var stringTable = [null];
        var stringTableSize = operations[i++];
        var stringTableEnd = i + stringTableSize;

        while (i < stringTableEnd) {
          var nextLength = operations[i++];
          var nextString = utfDecodeString(operations.slice(i, i + nextLength));
          stringTable.push(nextString);
          i += nextLength;
        }

        while (i < operations.length) {
          var operation = operations[i];

          switch (operation) {
            case TREE_OPERATION_ADD:
              {
                var _id = operations[i + 1];
                var type = operations[i + 2];
                i += 3;

                if (type === ElementTypeRoot) {
                  logs.push("Add new root node ".concat(_id));
                  i++;
                  i++;
                } else {
                  var parentID = operations[i];
                  i++;
                  i++;
                  var displayNameStringID = operations[i];
                  var displayName = stringTable[displayNameStringID];
                  i++;
                  i++;
                  logs.push("Add node ".concat(_id, " (").concat(displayName || 'null', ") as child of ").concat(parentID));
                }

                break;
              }

            case TREE_OPERATION_REMOVE:
              {
                var removeLength = operations[i + 1];
                i += 2;

                for (var removeIndex = 0; removeIndex < removeLength; removeIndex++) {
                  var _id2 = operations[i];
                  i += 1;
                  logs.push("Remove node ".concat(_id2));
                }

                break;
              }

            case TREE_OPERATION_REMOVE_ROOT:
              {
                i += 1;
                logs.push("Remove root ".concat(rootID));
                break;
              }

            case TREE_OPERATION_REORDER_CHILDREN:
              {
                var _id3 = operations[i + 1];
                var numChildren = operations[i + 2];
                i += 3;
                var children = operations.slice(i, i + numChildren);
                i += numChildren;
                logs.push("Re-order node ".concat(_id3, " children ").concat(children.join(',')));
                break;
              }

            case TREE_OPERATION_UPDATE_TREE_BASE_DURATION:
              i += 3;
              break;

            case TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS:
              var id = operations[i + 1];
              var numErrors = operations[i + 2];
              var numWarnings = operations[i + 3];
              i += 4;
              logs.push("Node ".concat(id, " has ").concat(numErrors, " errors and ").concat(numWarnings, " warnings"));
              break;

            default:
              throw Error("Unsupported Bridge operation \"".concat(operation, "\""));
          }
        }

        console.log(logs.join('\n  '));
      }

      function getDefaultComponentFilters() {
        return [{
          type: ComponentFilterElementType,
          value: ElementTypeHostComponent,
          isEnabled: true
        }];
      }

      function getSavedComponentFilters() {
        try {
          var raw = localStorageGetItem(LOCAL_STORAGE_FILTER_PREFERENCES_KEY);

          if (raw != null) {
            return JSON.parse(raw);
          }
        } catch (error) {}

        return getDefaultComponentFilters();
      }

      function saveComponentFilters(componentFilters) {
        localStorageSetItem(LOCAL_STORAGE_FILTER_PREFERENCES_KEY, JSON.stringify(componentFilters));
      }

      function getAppendComponentStack() {
        try {
          var raw = localStorageGetItem(LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY);

          if (raw != null) {
            return JSON.parse(raw);
          }
        } catch (error) {}

        return true;
      }

      function setAppendComponentStack(value) {
        localStorageSetItem(LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY, JSON.stringify(value));
      }

      function getBreakOnConsoleErrors() {
        try {
          var raw = localStorageGetItem(LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS);

          if (raw != null) {
            return JSON.parse(raw);
          }
        } catch (error) {}

        return false;
      }

      function setBreakOnConsoleErrors(value) {
        localStorageSetItem(LOCAL_STORAGE_SHOULD_BREAK_ON_CONSOLE_ERRORS, JSON.stringify(value));
      }

      function getShowInlineWarningsAndErrors() {
        try {
          var raw = localStorageGetItem(LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY);

          if (raw != null) {
            return JSON.parse(raw);
          }
        } catch (error) {}

        return true;
      }

      function setShowInlineWarningsAndErrors(value) {
        localStorageSetItem(LOCAL_STORAGE_SHOW_INLINE_WARNINGS_AND_ERRORS_KEY, JSON.stringify(value));
      }

      function separateDisplayNameAndHOCs(displayName, type) {
        if (displayName === null) {
          return [null, null];
        }

        var hocDisplayNames = null;

        switch (type) {
          case ElementTypeClass:
          case ElementTypeForwardRef:
          case ElementTypeFunction:
          case ElementTypeMemo:
            if (displayName.indexOf('(') >= 0) {
              var matches = displayName.match(/[^()]+/g);

              if (matches != null) {
                displayName = matches.pop();
                hocDisplayNames = matches;
              }
            }

            break;

          default:
            break;
        }

        if (type === ElementTypeMemo) {
          if (hocDisplayNames === null) {
            hocDisplayNames = ['Memo'];
          } else {
            hocDisplayNames.unshift('Memo');
          }
        } else if (type === ElementTypeForwardRef) {
          if (hocDisplayNames === null) {
            hocDisplayNames = ['ForwardRef'];
          } else {
            hocDisplayNames.unshift('ForwardRef');
          }
        }

        return [displayName, hocDisplayNames];
      }

      function shallowDiffers(prev, next) {
        for (var attribute in prev) {
          if (!(attribute in next)) {
            return true;
          }
        }

        for (var _attribute in next) {
          if (prev[_attribute] !== next[_attribute]) {
            return true;
          }
        }

        return false;
      }

      function getInObject(object, path) {
        return path.reduce(function (reduced, attr) {
          if (reduced) {
            if (hasOwnProperty.call(reduced, attr)) {
              return reduced[attr];
            }

            if (typeof reduced[Symbol.iterator] === 'function') {
              return Array.from(reduced)[attr];
            }
          }

          return null;
        }, object);
      }

      function deletePathInObject(object, path) {
        var length = path.length;
        var last = path[length - 1];

        if (object != null) {
          var parent = getInObject(object, path.slice(0, length - 1));

          if (parent) {
            if (Array.isArray(parent)) {
              parent.splice(last, 1);
            } else {
              delete parent[last];
            }
          }
        }
      }

      function renamePathInObject(object, oldPath, newPath) {
        var length = oldPath.length;

        if (object != null) {
          var parent = getInObject(object, oldPath.slice(0, length - 1));

          if (parent) {
            var lastOld = oldPath[length - 1];
            var lastNew = newPath[length - 1];
            parent[lastNew] = parent[lastOld];

            if (Array.isArray(parent)) {
              parent.splice(lastOld, 1);
            } else {
              delete parent[lastOld];
            }
          }
        }
      }

      function setInObject(object, path, value) {
        var length = path.length;
        var last = path[length - 1];

        if (object != null) {
          var parent = getInObject(object, path.slice(0, length - 1));

          if (parent) {
            parent[last] = value;
          }
        }
      }

      function getDataType(data) {
        if (data === null) {
          return 'null';
        } else if (data === undefined) {
          return 'undefined';
        }

        if (Object(react_is["isElement"])(data)) {
          return 'react_element';
        }

        if (typeof HTMLElement !== 'undefined' && data instanceof HTMLElement) {
          return 'html_element';
        }

        var type = utils_typeof(data);

        switch (type) {
          case 'bigint':
            return 'bigint';

          case 'boolean':
            return 'boolean';

          case 'function':
            return 'function';

          case 'number':
            if (Number.isNaN(data)) {
              return 'nan';
            } else if (!Number.isFinite(data)) {
              return 'infinity';
            } else {
              return 'number';
            }

          case 'object':
            if (Array.isArray(data)) {
              return 'array';
            } else if (ArrayBuffer.isView(data)) {
              return hasOwnProperty.call(data.constructor, 'BYTES_PER_ELEMENT') ? 'typed_array' : 'data_view';
            } else if (data.constructor && data.constructor.name === 'ArrayBuffer') {
              return 'array_buffer';
            } else if (typeof data[Symbol.iterator] === 'function') {
              return data[Symbol.iterator]() === data ? 'opaque_iterator' : 'iterator';
            } else if (data.constructor && data.constructor.name === 'RegExp') {
              return 'regexp';
            } else {
              var toStringValue = Object.prototype.toString.call(data);

              if (toStringValue === '[object Date]') {
                return 'date';
              } else if (toStringValue === '[object HTMLAllCollection]') {
                return 'html_all_collection';
              }
            }

            return 'object';

          case 'string':
            return 'string';

          case 'symbol':
            return 'symbol';

          case 'undefined':
            if (Object.prototype.toString.call(data) === '[object HTMLAllCollection]') {
              return 'html_all_collection';
            }

            return 'undefined';

          default:
            return 'unknown';
        }
      }

      function getDisplayNameForReactElement(element) {
        var elementType = Object(react_is["typeOf"])(element);

        switch (elementType) {
          case react_is["ContextConsumer"]:
            return 'ContextConsumer';

          case react_is["ContextProvider"]:
            return 'ContextProvider';

          case react_is["ForwardRef"]:
            return 'ForwardRef';

          case react_is["Fragment"]:
            return 'Fragment';

          case react_is["Lazy"]:
            return 'Lazy';

          case react_is["Memo"]:
            return 'Memo';

          case react_is["Portal"]:
            return 'Portal';

          case react_is["Profiler"]:
            return 'Profiler';

          case react_is["StrictMode"]:
            return 'StrictMode';

          case react_is["Suspense"]:
            return 'Suspense';

          case REACT_SUSPENSE_LIST_TYPE:
            return 'SuspenseList';

          default:
            var type = element.type;

            if (typeof type === 'string') {
              return type;
            } else if (typeof type === 'function') {
              return getDisplayName(type, 'Anonymous');
            } else if (type != null) {
              return 'NotImplementedInDevtools';
            } else {
              return 'Element';
            }

        }
      }

      var MAX_PREVIEW_STRING_LENGTH = 50;

      function truncateForDisplay(string) {
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_PREVIEW_STRING_LENGTH;

        if (string.length > length) {
          return string.substr(0, length) + '…';
        } else {
          return string;
        }
      }

      function formatDataForPreview(data, showFormattedValue) {
        if (data != null && hasOwnProperty.call(data, meta.type)) {
          return showFormattedValue ? data[meta.preview_long] : data[meta.preview_short];
        }

        var type = getDataType(data);

        switch (type) {
          case 'html_element':
            return "<".concat(truncateForDisplay(data.tagName.toLowerCase()), " />");

          case 'function':
            return truncateForDisplay("\u0192 ".concat(typeof data.name === 'function' ? '' : data.name, "() {}"));

          case 'string':
            return "\"".concat(data, "\"");

          case 'bigint':
            return truncateForDisplay(data.toString() + 'n');

          case 'regexp':
            return truncateForDisplay(data.toString());

          case 'symbol':
            return truncateForDisplay(data.toString());

          case 'react_element':
            return "<".concat(truncateForDisplay(getDisplayNameForReactElement(data) || 'Unknown'), " />");

          case 'array_buffer':
            return "ArrayBuffer(".concat(data.byteLength, ")");

          case 'data_view':
            return "DataView(".concat(data.buffer.byteLength, ")");

          case 'array':
            if (showFormattedValue) {
              var formatted = '';

              for (var i = 0; i < data.length; i++) {
                if (i > 0) {
                  formatted += ', ';
                }

                formatted += formatDataForPreview(data[i], false);

                if (formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                  break;
                }
              }

              return "[".concat(truncateForDisplay(formatted), "]");
            } else {
              var length = hasOwnProperty.call(data, meta.size) ? data[meta.size] : data.length;
              return "Array(".concat(length, ")");
            }

          case 'typed_array':
            var shortName = "".concat(data.constructor.name, "(").concat(data.length, ")");

            if (showFormattedValue) {
              var _formatted = '';

              for (var _i = 0; _i < data.length; _i++) {
                if (_i > 0) {
                  _formatted += ', ';
                }

                _formatted += data[_i];

                if (_formatted.length > MAX_PREVIEW_STRING_LENGTH) {
                  break;
                }
              }

              return "".concat(shortName, " [").concat(truncateForDisplay(_formatted), "]");
            } else {
              return shortName;
            }

          case 'iterator':
            var name = data.constructor.name;

            if (showFormattedValue) {
              var array = Array.from(data);
              var _formatted2 = '';

              for (var _i2 = 0; _i2 < array.length; _i2++) {
                var entryOrEntries = array[_i2];

                if (_i2 > 0) {
                  _formatted2 += ', ';
                }

                if (Array.isArray(entryOrEntries)) {
                  var key = formatDataForPreview(entryOrEntries[0], true);
                  var value = formatDataForPreview(entryOrEntries[1], false);
                  _formatted2 += "".concat(key, " => ").concat(value);
                } else {
                  _formatted2 += formatDataForPreview(entryOrEntries, false);
                }

                if (_formatted2.length > MAX_PREVIEW_STRING_LENGTH) {
                  break;
                }
              }

              return "".concat(name, "(").concat(data.size, ") {").concat(truncateForDisplay(_formatted2), "}");
            } else {
              return "".concat(name, "(").concat(data.size, ")");
            }

          case 'opaque_iterator':
            {
              return data[Symbol.toStringTag];
            }

          case 'date':
            return data.toString();

          case 'object':
            if (showFormattedValue) {
              var keys = Array.from(getAllEnumerableKeys(data)).sort(alphaSortKeys);
              var _formatted3 = '';

              for (var _i3 = 0; _i3 < keys.length; _i3++) {
                var _key = keys[_i3];

                if (_i3 > 0) {
                  _formatted3 += ', ';
                }

                _formatted3 += "".concat(_key.toString(), ": ").concat(formatDataForPreview(data[_key], false));

                if (_formatted3.length > MAX_PREVIEW_STRING_LENGTH) {
                  break;
                }
              }

              return "{".concat(truncateForDisplay(_formatted3), "}");
            } else {
              return '{…}';
            }

          case 'boolean':
          case 'number':
          case 'infinity':
          case 'nan':
          case 'null':
          case 'undefined':
            return data;

          default:
            try {
              return truncateForDisplay('' + data);
            } catch (error) {
              return 'unserializable';
            }

        }
      }

      var clipboard = __webpack_require__(7);

      var isArrayImpl = Array.isArray;

      function isArray(a) {
        return isArrayImpl(a);
      }

      var shared_isArray = isArray;

      function backend_utils_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          backend_utils_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          backend_utils_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return backend_utils_typeof(obj);
      }

      function utils_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function utils_objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            utils_ownKeys(Object(source), true).forEach(function (key) {
              utils_defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            utils_ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function utils_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function cleanForBridge(data, isPathAllowed) {
        var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

        if (data !== null) {
          var cleanedPaths = [];
          var unserializablePaths = [];
          var cleanedData = dehydrate(data, cleanedPaths, unserializablePaths, path, isPathAllowed);
          return {
            data: cleanedData,
            cleaned: cleanedPaths,
            unserializable: unserializablePaths
          };
        } else {
          return null;
        }
      }

      function copyToClipboard(value) {
        var safeToCopy = serializeToString(value);
        var text = safeToCopy === undefined ? 'undefined' : safeToCopy;
        var clipboardCopyText = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.clipboardCopyText;

        if (typeof clipboardCopyText === 'function') {
          clipboardCopyText(text).catch(function (err) {});
        } else {
          Object(clipboard["copy"])(text);
        }
      }

      function copyWithDelete(obj, path) {
        var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var key = path[index];
        var updated = shared_isArray(obj) ? obj.slice() : utils_objectSpread({}, obj);

        if (index + 1 === path.length) {
          if (shared_isArray(updated)) {
            updated.splice(key, 1);
          } else {
            delete updated[key];
          }
        } else {
          updated[key] = copyWithDelete(obj[key], path, index + 1);
        }

        return updated;
      }

      function copyWithRename(obj, oldPath, newPath) {
        var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var oldKey = oldPath[index];
        var updated = shared_isArray(obj) ? obj.slice() : utils_objectSpread({}, obj);

        if (index + 1 === oldPath.length) {
          var newKey = newPath[index];
          updated[newKey] = updated[oldKey];

          if (shared_isArray(updated)) {
            updated.splice(oldKey, 1);
          } else {
            delete updated[oldKey];
          }
        } else {
          updated[oldKey] = copyWithRename(obj[oldKey], oldPath, newPath, index + 1);
        }

        return updated;
      }

      function copyWithSet(obj, path, value) {
        var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

        if (index >= path.length) {
          return value;
        }

        var key = path[index];
        var updated = shared_isArray(obj) ? obj.slice() : utils_objectSpread({}, obj);
        updated[key] = copyWithSet(obj[key], path, value, index + 1);
        return updated;
      }

      function getEffectDurations(root) {
        var effectDuration = null;
        var passiveEffectDuration = null;
        var hostRoot = root.current;

        if (hostRoot != null) {
          var stateNode = hostRoot.stateNode;

          if (stateNode != null) {
            effectDuration = stateNode.effectDuration != null ? stateNode.effectDuration : null;
            passiveEffectDuration = stateNode.passiveEffectDuration != null ? stateNode.passiveEffectDuration : null;
          }
        }

        return {
          effectDuration: effectDuration,
          passiveEffectDuration: passiveEffectDuration
        };
      }

      function serializeToString(data) {
        var cache = new Set();
        return JSON.stringify(data, function (key, value) {
          if (backend_utils_typeof(value) === 'object' && value !== null) {
            if (cache.has(value)) {
              return;
            }

            cache.add(value);
          }

          if (typeof value === 'bigint') {
            return value.toString() + 'n';
          }

          return value;
        });
      }

      function format(maybeMessage) {
        for (var _len = arguments.length, inputArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          inputArgs[_key - 1] = arguments[_key];
        }

        var args = inputArgs.slice();
        var formatted = backend_utils_typeof(maybeMessage) === 'symbol' ? maybeMessage.toString() : '' + maybeMessage;

        if (typeof maybeMessage === 'string') {
          if (args.length) {
            var REGEXP = /(%?)(%([jds]))/g;
            formatted = formatted.replace(REGEXP, function (match, escaped, ptn, flag) {
              var arg = args.shift();

              switch (flag) {
                case 's':
                  arg += '';
                  break;

                case 'd':
                case 'i':
                  arg = parseInt(arg, 10).toString();
                  break;

                case 'f':
                  arg = parseFloat(arg).toString();
                  break;
              }

              if (!escaped) {
                return arg;
              }

              args.unshift(arg);
              return match;
            });
          }
        }

        if (args.length) {
          for (var i = 0; i < args.length; i++) {
            var arg = args[i];
            formatted += ' ' + (backend_utils_typeof(arg) === 'symbol' ? arg.toString() : arg);
          }
        }

        formatted = formatted.replace(/%{2,2}/g, '%');
        return '' + formatted;
      }

      function isSynchronousXHRSupported() {
        return !!(window.document && window.document.featurePolicy && window.document.featurePolicy.allowsFeature('sync-xhr'));
      }

      var react_debug_tools = __webpack_require__(8);

      var CONCURRENT_MODE_NUMBER = 0xeacf;
      var CONCURRENT_MODE_SYMBOL_STRING = 'Symbol(react.concurrent_mode)';
      var CONTEXT_NUMBER = 0xeace;
      var CONTEXT_SYMBOL_STRING = 'Symbol(react.context)';
      var DEPRECATED_ASYNC_MODE_SYMBOL_STRING = 'Symbol(react.async_mode)';
      var ELEMENT_NUMBER = 0xeac7;
      var ELEMENT_SYMBOL_STRING = 'Symbol(react.element)';
      var DEBUG_TRACING_MODE_NUMBER = 0xeae1;
      var DEBUG_TRACING_MODE_SYMBOL_STRING = 'Symbol(react.debug_trace_mode)';
      var FORWARD_REF_NUMBER = 0xead0;
      var FORWARD_REF_SYMBOL_STRING = 'Symbol(react.forward_ref)';
      var FRAGMENT_NUMBER = 0xeacb;
      var FRAGMENT_SYMBOL_STRING = 'Symbol(react.fragment)';
      var LAZY_NUMBER = 0xead4;
      var LAZY_SYMBOL_STRING = 'Symbol(react.lazy)';
      var MEMO_NUMBER = 0xead3;
      var MEMO_SYMBOL_STRING = 'Symbol(react.memo)';
      var OPAQUE_ID_NUMBER = 0xeae0;
      var OPAQUE_ID_SYMBOL_STRING = 'Symbol(react.opaque.id)';
      var PORTAL_NUMBER = 0xeaca;
      var PORTAL_SYMBOL_STRING = 'Symbol(react.portal)';
      var PROFILER_NUMBER = 0xead2;
      var PROFILER_SYMBOL_STRING = 'Symbol(react.profiler)';
      var PROVIDER_NUMBER = 0xeacd;
      var PROVIDER_SYMBOL_STRING = 'Symbol(react.provider)';
      var SCOPE_NUMBER = 0xead7;
      var SCOPE_SYMBOL_STRING = 'Symbol(react.scope)';
      var STRICT_MODE_NUMBER = 0xeacc;
      var STRICT_MODE_SYMBOL_STRING = 'Symbol(react.strict_mode)';
      var SUSPENSE_NUMBER = 0xead1;
      var SUSPENSE_SYMBOL_STRING = 'Symbol(react.suspense)';
      var SUSPENSE_LIST_NUMBER = 0xead8;
      var SUSPENSE_LIST_SYMBOL_STRING = 'Symbol(react.suspense_list)';
      var enableProfilerChangedHookIndices = false;
      var isInternalFacebookBuild = false;

      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }

      var objectIs = typeof Object.is === 'function' ? Object.is : is;
      var shared_objectIs = objectIs;

      function renderer_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function renderer_objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            renderer_ownKeys(Object(source), true).forEach(function (key) {
              renderer_defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            renderer_ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function renderer_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || renderer_unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function _iterableToArrayLimit(arr, i) {
        if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      function renderer_toConsumableArray(arr) {
        return renderer_arrayWithoutHoles(arr) || renderer_iterableToArray(arr) || renderer_unsupportedIterableToArray(arr) || renderer_nonIterableSpread();
      }

      function renderer_nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function renderer_iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
      }

      function renderer_arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return renderer_arrayLikeToArray(arr);
      }

      function renderer_createForOfIteratorHelper(o, allowArrayLike) {
        var it;

        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (Array.isArray(o) || (it = renderer_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;

            var F = function F() {};

            return {
              s: F,
              n: function n() {
                if (i >= o.length) return {
                  done: true
                };
                return {
                  done: false,
                  value: o[i++]
                };
              },
              e: function e(_e2) {
                throw _e2;
              },
              f: F
            };
          }

          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        var normalCompletion = true,
            didErr = false,
            err;
        return {
          s: function s() {
            it = o[Symbol.iterator]();
          },
          n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function e(_e3) {
            didErr = true;
            err = _e3;
          },
          f: function f() {
            try {
              if (!normalCompletion && it.return != null) it.return();
            } finally {
              if (didErr) throw err;
            }
          }
        };
      }

      function renderer_unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return renderer_arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return renderer_arrayLikeToArray(o, minLen);
      }

      function renderer_arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      function renderer_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          renderer_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          renderer_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return renderer_typeof(obj);
      }

      function getFiberFlags(fiber) {
        return fiber.flags !== undefined ? fiber.flags : fiber.effectTag;
      }

      var renderer_getCurrentTime = (typeof performance === "undefined" ? "undefined" : renderer_typeof(performance)) === 'object' && typeof performance.now === 'function' ? function () {
        return performance.now();
      } : function () {
        return Date.now();
      };

      function getInternalReactConstants(version) {
        var ReactTypeOfSideEffect = {
          NoFlags: 0,
          PerformedWork: 1,
          Placement: 2,
          Incomplete: 8192
        };
        var ReactPriorityLevels = {
          ImmediatePriority: 99,
          UserBlockingPriority: 98,
          NormalPriority: 97,
          LowPriority: 96,
          IdlePriority: 95,
          NoPriority: 90
        };

        if (Object(semver["gt"])(version, '17.0.2')) {
          ReactPriorityLevels = {
            ImmediatePriority: 1,
            UserBlockingPriority: 2,
            NormalPriority: 3,
            LowPriority: 4,
            IdlePriority: 5,
            NoPriority: 0
          };
        }

        var ReactTypeOfWork = null;

        if (Object(semver["gt"])(version, '17.0.1')) {
          ReactTypeOfWork = {
            CacheComponent: 24,
            ClassComponent: 1,
            ContextConsumer: 9,
            ContextProvider: 10,
            CoroutineComponent: -1,
            CoroutineHandlerPhase: -1,
            DehydratedSuspenseComponent: 18,
            ForwardRef: 11,
            Fragment: 7,
            FunctionComponent: 0,
            HostComponent: 5,
            HostPortal: 4,
            HostRoot: 3,
            HostText: 6,
            IncompleteClassComponent: 17,
            IndeterminateComponent: 2,
            LazyComponent: 16,
            LegacyHiddenComponent: 23,
            MemoComponent: 14,
            Mode: 8,
            OffscreenComponent: 22,
            Profiler: 12,
            ScopeComponent: 21,
            SimpleMemoComponent: 15,
            SuspenseComponent: 13,
            SuspenseListComponent: 19,
            YieldComponent: -1
          };
        } else if (Object(semver["gte"])(version, '17.0.0-alpha')) {
          ReactTypeOfWork = {
            CacheComponent: -1,
            ClassComponent: 1,
            ContextConsumer: 9,
            ContextProvider: 10,
            CoroutineComponent: -1,
            CoroutineHandlerPhase: -1,
            DehydratedSuspenseComponent: 18,
            ForwardRef: 11,
            Fragment: 7,
            FunctionComponent: 0,
            HostComponent: 5,
            HostPortal: 4,
            HostRoot: 3,
            HostText: 6,
            IncompleteClassComponent: 17,
            IndeterminateComponent: 2,
            LazyComponent: 16,
            LegacyHiddenComponent: 24,
            MemoComponent: 14,
            Mode: 8,
            OffscreenComponent: 23,
            Profiler: 12,
            ScopeComponent: 21,
            SimpleMemoComponent: 15,
            SuspenseComponent: 13,
            SuspenseListComponent: 19,
            YieldComponent: -1
          };
        } else if (Object(semver["gte"])(version, '16.6.0-beta.0')) {
          ReactTypeOfWork = {
            CacheComponent: -1,
            ClassComponent: 1,
            ContextConsumer: 9,
            ContextProvider: 10,
            CoroutineComponent: -1,
            CoroutineHandlerPhase: -1,
            DehydratedSuspenseComponent: 18,
            ForwardRef: 11,
            Fragment: 7,
            FunctionComponent: 0,
            HostComponent: 5,
            HostPortal: 4,
            HostRoot: 3,
            HostText: 6,
            IncompleteClassComponent: 17,
            IndeterminateComponent: 2,
            LazyComponent: 16,
            LegacyHiddenComponent: -1,
            MemoComponent: 14,
            Mode: 8,
            OffscreenComponent: -1,
            Profiler: 12,
            ScopeComponent: -1,
            SimpleMemoComponent: 15,
            SuspenseComponent: 13,
            SuspenseListComponent: 19,
            YieldComponent: -1
          };
        } else if (Object(semver["gte"])(version, '16.4.3-alpha')) {
          ReactTypeOfWork = {
            CacheComponent: -1,
            ClassComponent: 2,
            ContextConsumer: 11,
            ContextProvider: 12,
            CoroutineComponent: -1,
            CoroutineHandlerPhase: -1,
            DehydratedSuspenseComponent: -1,
            ForwardRef: 13,
            Fragment: 9,
            FunctionComponent: 0,
            HostComponent: 7,
            HostPortal: 6,
            HostRoot: 5,
            HostText: 8,
            IncompleteClassComponent: -1,
            IndeterminateComponent: 4,
            LazyComponent: -1,
            LegacyHiddenComponent: -1,
            MemoComponent: -1,
            Mode: 10,
            OffscreenComponent: -1,
            Profiler: 15,
            ScopeComponent: -1,
            SimpleMemoComponent: -1,
            SuspenseComponent: 16,
            SuspenseListComponent: -1,
            YieldComponent: -1
          };
        } else {
          ReactTypeOfWork = {
            CacheComponent: -1,
            ClassComponent: 2,
            ContextConsumer: 12,
            ContextProvider: 13,
            CoroutineComponent: 7,
            CoroutineHandlerPhase: 8,
            DehydratedSuspenseComponent: -1,
            ForwardRef: 14,
            Fragment: 10,
            FunctionComponent: 1,
            HostComponent: 5,
            HostPortal: 4,
            HostRoot: 3,
            HostText: 6,
            IncompleteClassComponent: -1,
            IndeterminateComponent: 0,
            LazyComponent: -1,
            LegacyHiddenComponent: -1,
            MemoComponent: -1,
            Mode: 11,
            OffscreenComponent: -1,
            Profiler: 15,
            ScopeComponent: -1,
            SimpleMemoComponent: -1,
            SuspenseComponent: 16,
            SuspenseListComponent: -1,
            YieldComponent: 9
          };
        }

        function getTypeSymbol(type) {
          var symbolOrNumber = renderer_typeof(type) === 'object' && type !== null ? type.$$typeof : type;
          return renderer_typeof(symbolOrNumber) === 'symbol' ? symbolOrNumber.toString() : symbolOrNumber;
        }

        var _ReactTypeOfWork = ReactTypeOfWork,
            CacheComponent = _ReactTypeOfWork.CacheComponent,
            ClassComponent = _ReactTypeOfWork.ClassComponent,
            IncompleteClassComponent = _ReactTypeOfWork.IncompleteClassComponent,
            FunctionComponent = _ReactTypeOfWork.FunctionComponent,
            IndeterminateComponent = _ReactTypeOfWork.IndeterminateComponent,
            ForwardRef = _ReactTypeOfWork.ForwardRef,
            HostRoot = _ReactTypeOfWork.HostRoot,
            HostComponent = _ReactTypeOfWork.HostComponent,
            HostPortal = _ReactTypeOfWork.HostPortal,
            HostText = _ReactTypeOfWork.HostText,
            Fragment = _ReactTypeOfWork.Fragment,
            LazyComponent = _ReactTypeOfWork.LazyComponent,
            LegacyHiddenComponent = _ReactTypeOfWork.LegacyHiddenComponent,
            MemoComponent = _ReactTypeOfWork.MemoComponent,
            OffscreenComponent = _ReactTypeOfWork.OffscreenComponent,
            Profiler = _ReactTypeOfWork.Profiler,
            ScopeComponent = _ReactTypeOfWork.ScopeComponent,
            SimpleMemoComponent = _ReactTypeOfWork.SimpleMemoComponent,
            SuspenseComponent = _ReactTypeOfWork.SuspenseComponent,
            SuspenseListComponent = _ReactTypeOfWork.SuspenseListComponent;

        function resolveFiberType(type) {
          var typeSymbol = getTypeSymbol(type);

          switch (typeSymbol) {
            case MEMO_NUMBER:
            case MEMO_SYMBOL_STRING:
              return resolveFiberType(type.type);

            case FORWARD_REF_NUMBER:
            case FORWARD_REF_SYMBOL_STRING:
              return type.render;

            default:
              return type;
          }
        }

        function getDisplayNameForFiber(fiber) {
          var elementType = fiber.elementType,
              type = fiber.type,
              tag = fiber.tag;
          var resolvedType = type;

          if (renderer_typeof(type) === 'object' && type !== null) {
            resolvedType = resolveFiberType(type);
          }

          var resolvedContext = null;

          switch (tag) {
            case CacheComponent:
              return 'Cache';

            case ClassComponent:
            case IncompleteClassComponent:
              return getDisplayName(resolvedType);

            case FunctionComponent:
            case IndeterminateComponent:
              return getDisplayName(resolvedType);

            case ForwardRef:
              return type && type.displayName || getDisplayName(resolvedType, 'Anonymous');

            case HostRoot:
              return null;

            case HostComponent:
              return type;

            case HostPortal:
            case HostText:
            case Fragment:
              return null;

            case LazyComponent:
              return 'Lazy';

            case MemoComponent:
            case SimpleMemoComponent:
              return elementType && elementType.displayName || type && type.displayName || getDisplayName(resolvedType, 'Anonymous');

            case SuspenseComponent:
              return 'Suspense';

            case LegacyHiddenComponent:
              return 'LegacyHidden';

            case OffscreenComponent:
              return 'Offscreen';

            case ScopeComponent:
              return 'Scope';

            case SuspenseListComponent:
              return 'SuspenseList';

            case Profiler:
              return 'Profiler';

            default:
              var typeSymbol = getTypeSymbol(type);

              switch (typeSymbol) {
                case CONCURRENT_MODE_NUMBER:
                case CONCURRENT_MODE_SYMBOL_STRING:
                case DEPRECATED_ASYNC_MODE_SYMBOL_STRING:
                  return null;

                case PROVIDER_NUMBER:
                case PROVIDER_SYMBOL_STRING:
                  resolvedContext = fiber.type._context || fiber.type.context;
                  return "".concat(resolvedContext.displayName || 'Context', ".Provider");

                case CONTEXT_NUMBER:
                case CONTEXT_SYMBOL_STRING:
                  resolvedContext = fiber.type._context || fiber.type;
                  return "".concat(resolvedContext.displayName || 'Context', ".Consumer");

                case STRICT_MODE_NUMBER:
                case STRICT_MODE_SYMBOL_STRING:
                  return null;

                case PROFILER_NUMBER:
                case PROFILER_SYMBOL_STRING:
                  return "Profiler(".concat(fiber.memoizedProps.id, ")");

                case SCOPE_NUMBER:
                case SCOPE_SYMBOL_STRING:
                  return 'Scope';

                default:
                  return null;
              }

          }
        }

        return {
          getDisplayNameForFiber: getDisplayNameForFiber,
          getTypeSymbol: getTypeSymbol,
          ReactPriorityLevels: ReactPriorityLevels,
          ReactTypeOfWork: ReactTypeOfWork,
          ReactTypeOfSideEffect: ReactTypeOfSideEffect
        };
      }

      function renderer_attach(hook, rendererID, renderer, global) {
        var version = renderer.reconcilerVersion || renderer.version;

        var _getInternalReactCons = getInternalReactConstants(version),
            getDisplayNameForFiber = _getInternalReactCons.getDisplayNameForFiber,
            getTypeSymbol = _getInternalReactCons.getTypeSymbol,
            ReactPriorityLevels = _getInternalReactCons.ReactPriorityLevels,
            ReactTypeOfWork = _getInternalReactCons.ReactTypeOfWork,
            ReactTypeOfSideEffect = _getInternalReactCons.ReactTypeOfSideEffect;

        var Incomplete = ReactTypeOfSideEffect.Incomplete,
            NoFlags = ReactTypeOfSideEffect.NoFlags,
            PerformedWork = ReactTypeOfSideEffect.PerformedWork,
            Placement = ReactTypeOfSideEffect.Placement;
        var CacheComponent = ReactTypeOfWork.CacheComponent,
            ClassComponent = ReactTypeOfWork.ClassComponent,
            ContextConsumer = ReactTypeOfWork.ContextConsumer,
            DehydratedSuspenseComponent = ReactTypeOfWork.DehydratedSuspenseComponent,
            ForwardRef = ReactTypeOfWork.ForwardRef,
            Fragment = ReactTypeOfWork.Fragment,
            FunctionComponent = ReactTypeOfWork.FunctionComponent,
            HostRoot = ReactTypeOfWork.HostRoot,
            HostPortal = ReactTypeOfWork.HostPortal,
            HostComponent = ReactTypeOfWork.HostComponent,
            HostText = ReactTypeOfWork.HostText,
            IncompleteClassComponent = ReactTypeOfWork.IncompleteClassComponent,
            IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent,
            LegacyHiddenComponent = ReactTypeOfWork.LegacyHiddenComponent,
            MemoComponent = ReactTypeOfWork.MemoComponent,
            OffscreenComponent = ReactTypeOfWork.OffscreenComponent,
            SimpleMemoComponent = ReactTypeOfWork.SimpleMemoComponent,
            SuspenseComponent = ReactTypeOfWork.SuspenseComponent,
            SuspenseListComponent = ReactTypeOfWork.SuspenseListComponent;
        var ImmediatePriority = ReactPriorityLevels.ImmediatePriority,
            UserBlockingPriority = ReactPriorityLevels.UserBlockingPriority,
            NormalPriority = ReactPriorityLevels.NormalPriority,
            LowPriority = ReactPriorityLevels.LowPriority,
            IdlePriority = ReactPriorityLevels.IdlePriority,
            NoPriority = ReactPriorityLevels.NoPriority;
        var overrideHookState = renderer.overrideHookState,
            overrideHookStateDeletePath = renderer.overrideHookStateDeletePath,
            overrideHookStateRenamePath = renderer.overrideHookStateRenamePath,
            overrideProps = renderer.overrideProps,
            overridePropsDeletePath = renderer.overridePropsDeletePath,
            overridePropsRenamePath = renderer.overridePropsRenamePath,
            setSuspenseHandler = renderer.setSuspenseHandler,
            scheduleUpdate = renderer.scheduleUpdate;
        var supportsTogglingSuspense = typeof setSuspenseHandler === 'function' && typeof scheduleUpdate === 'function';
        var fibersWithChangedErrorOrWarningCounts = new Set();
        var pendingFiberToErrorsMap = new Map();
        var pendingFiberToWarningsMap = new Map();
        var fiberIDToErrorsMap = new Map();
        var fiberIDToWarningsMap = new Map();

        function clearErrorsAndWarnings() {
          var _iterator = renderer_createForOfIteratorHelper(fiberIDToErrorsMap.keys()),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var id = _step.value;

              var _fiber = idToArbitraryFiberMap.get(id);

              if (_fiber != null) {
                fibersWithChangedErrorOrWarningCounts.add(_fiber);
                updateMostRecentlyInspectedElementIfNecessary(id);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          var _iterator2 = renderer_createForOfIteratorHelper(fiberIDToWarningsMap.keys()),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _id = _step2.value;

              var _fiber2 = idToArbitraryFiberMap.get(_id);

              if (_fiber2 != null) {
                fibersWithChangedErrorOrWarningCounts.add(_fiber2);
                updateMostRecentlyInspectedElementIfNecessary(_id);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          fiberIDToErrorsMap.clear();
          fiberIDToWarningsMap.clear();
          flushPendingEvents();
        }

        function clearMessageCountHelper(fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {
          var fiber = idToArbitraryFiberMap.get(fiberID);

          if (fiber != null) {
            pendingFiberToErrorsMap.delete(fiber);

            if (fiberIDToMessageCountMap.has(fiberID)) {
              fiberIDToMessageCountMap.delete(fiberID);
              fibersWithChangedErrorOrWarningCounts.add(fiber);
              flushPendingEvents();
              updateMostRecentlyInspectedElementIfNecessary(fiberID);
            } else {
              fibersWithChangedErrorOrWarningCounts.delete(fiber);
            }
          }
        }

        function clearErrorsForFiberID(fiberID) {
          clearMessageCountHelper(fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);
        }

        function clearWarningsForFiberID(fiberID) {
          clearMessageCountHelper(fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);
        }

        function updateMostRecentlyInspectedElementIfNecessary(fiberID) {
          if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === fiberID) {
            hasElementUpdatedSinceLastInspected = true;
          }
        }

        function onErrorOrWarning(fiber, type, args) {
          var message = format.apply(void 0, renderer_toConsumableArray(args));

          if (__DEBUG__) {
            debug('onErrorOrWarning', fiber, null, "".concat(type, ": \"").concat(message, "\""));
          }

          fibersWithChangedErrorOrWarningCounts.add(fiber);
          var fiberMap = type === 'error' ? pendingFiberToErrorsMap : pendingFiberToWarningsMap;
          var messageMap = fiberMap.get(fiber);

          if (messageMap != null) {
            var count = messageMap.get(message) || 0;
            messageMap.set(message, count + 1);
          } else {
            fiberMap.set(fiber, new Map([[message, 1]]));
          }

          flushPendingErrorsAndWarningsAfterDelay();
        }

        if (true) {
          registerRenderer(renderer, onErrorOrWarning);
          var appendComponentStack = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false;
          var breakOnConsoleErrors = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
          var showInlineWarningsAndErrors = window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ !== false;

          if (appendComponentStack || breakOnConsoleErrors || showInlineWarningsAndErrors) {
            patch({
              appendComponentStack: appendComponentStack,
              breakOnConsoleErrors: breakOnConsoleErrors,
              showInlineWarningsAndErrors: showInlineWarningsAndErrors
            });
          }
        }

        var debug = function debug(name, fiber, parentFiber) {
          var extraString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

          if (__DEBUG__) {
            var displayName = fiber.tag + ':' + (getDisplayNameForFiber(fiber) || 'null');
            var maybeID = getFiberIDUnsafe(fiber) || '<no id>';
            var parentDisplayName = parentFiber ? parentFiber.tag + ':' + (getDisplayNameForFiber(parentFiber) || 'null') : '';
            var maybeParentID = parentFiber ? getFiberIDUnsafe(parentFiber) || '<no-id>' : '';
            console.groupCollapsed("[renderer] %c".concat(name, " %c").concat(displayName, " (").concat(maybeID, ") %c").concat(parentFiber ? "".concat(parentDisplayName, " (").concat(maybeParentID, ")") : '', " %c").concat(extraString), 'color: red; font-weight: bold;', 'color: blue;', 'color: purple;', 'color: black;');
            console.log(new Error().stack.split('\n').slice(1).join('\n'));
            console.groupEnd();
          }
        };

        var hideElementsWithDisplayNames = new Set();
        var hideElementsWithPaths = new Set();
        var hideElementsWithTypes = new Set();
        var traceUpdatesEnabled = false;
        var traceUpdatesForNodes = new Set();

        function applyComponentFilters(componentFilters) {
          hideElementsWithTypes.clear();
          hideElementsWithDisplayNames.clear();
          hideElementsWithPaths.clear();
          componentFilters.forEach(function (componentFilter) {
            if (!componentFilter.isEnabled) {
              return;
            }

            switch (componentFilter.type) {
              case ComponentFilterDisplayName:
                if (componentFilter.isValid && componentFilter.value !== '') {
                  hideElementsWithDisplayNames.add(new RegExp(componentFilter.value, 'i'));
                }

                break;

              case ComponentFilterElementType:
                hideElementsWithTypes.add(componentFilter.value);
                break;

              case ComponentFilterLocation:
                if (componentFilter.isValid && componentFilter.value !== '') {
                  hideElementsWithPaths.add(new RegExp(componentFilter.value, 'i'));
                }

                break;

              case ComponentFilterHOC:
                hideElementsWithDisplayNames.add(new RegExp('\\('));
                break;

              default:
                console.warn("Invalid component filter type \"".concat(componentFilter.type, "\""));
                break;
            }
          });
        }

        if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ != null) {
          applyComponentFilters(window.__REACT_DEVTOOLS_COMPONENT_FILTERS__);
        } else {
          applyComponentFilters(getDefaultComponentFilters());
        }

        function updateComponentFilters(componentFilters) {
          if (isProfiling) {
            throw Error('Cannot modify filter preferences while profiling');
          }

          hook.getFiberRoots(rendererID).forEach(function (root) {
            currentRootID = getOrGenerateFiberID(root.current);
            pushOperation(TREE_OPERATION_REMOVE_ROOT);
            flushPendingEvents(root);
            currentRootID = -1;
          });
          applyComponentFilters(componentFilters);
          rootDisplayNameCounter.clear();
          hook.getFiberRoots(rendererID).forEach(function (root) {
            currentRootID = getOrGenerateFiberID(root.current);
            setRootPseudoKey(currentRootID, root.current);
            mountFiberRecursively(root.current, null, false, false);
            flushPendingEvents(root);
            currentRootID = -1;
          });
          reevaluateErrorsAndWarnings();
          flushPendingEvents();
        }

        function shouldFilterFiber(fiber) {
          var _debugSource = fiber._debugSource,
              tag = fiber.tag,
              type = fiber.type;

          switch (tag) {
            case DehydratedSuspenseComponent:
              return true;

            case HostPortal:
            case HostText:
            case Fragment:
            case LegacyHiddenComponent:
            case OffscreenComponent:
              return true;

            case HostRoot:
              return false;

            default:
              var typeSymbol = getTypeSymbol(type);

              switch (typeSymbol) {
                case CONCURRENT_MODE_NUMBER:
                case CONCURRENT_MODE_SYMBOL_STRING:
                case DEPRECATED_ASYNC_MODE_SYMBOL_STRING:
                case STRICT_MODE_NUMBER:
                case STRICT_MODE_SYMBOL_STRING:
                  return true;

                default:
                  break;
              }

          }

          var elementType = getElementTypeForFiber(fiber);

          if (hideElementsWithTypes.has(elementType)) {
            return true;
          }

          if (hideElementsWithDisplayNames.size > 0) {
            var displayName = getDisplayNameForFiber(fiber);

            if (displayName != null) {
              var _iterator3 = renderer_createForOfIteratorHelper(hideElementsWithDisplayNames),
                  _step3;

              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  var displayNameRegExp = _step3.value;

                  if (displayNameRegExp.test(displayName)) {
                    return true;
                  }
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
            }
          }

          if (_debugSource != null && hideElementsWithPaths.size > 0) {
            var fileName = _debugSource.fileName;

            var _iterator4 = renderer_createForOfIteratorHelper(hideElementsWithPaths),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var pathRegExp = _step4.value;

                if (pathRegExp.test(fileName)) {
                  return true;
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }

          return false;
        }

        function getElementTypeForFiber(fiber) {
          var type = fiber.type,
              tag = fiber.tag;

          switch (tag) {
            case ClassComponent:
            case IncompleteClassComponent:
              return ElementTypeClass;

            case FunctionComponent:
            case IndeterminateComponent:
              return ElementTypeFunction;

            case ForwardRef:
              return ElementTypeForwardRef;

            case HostRoot:
              return ElementTypeRoot;

            case HostComponent:
              return ElementTypeHostComponent;

            case HostPortal:
            case HostText:
            case Fragment:
              return ElementTypeOtherOrUnknown;

            case MemoComponent:
            case SimpleMemoComponent:
              return ElementTypeMemo;

            case SuspenseComponent:
              return ElementTypeSuspense;

            case SuspenseListComponent:
              return ElementTypeSuspenseList;

            default:
              var typeSymbol = getTypeSymbol(type);

              switch (typeSymbol) {
                case CONCURRENT_MODE_NUMBER:
                case CONCURRENT_MODE_SYMBOL_STRING:
                case DEPRECATED_ASYNC_MODE_SYMBOL_STRING:
                  return ElementTypeOtherOrUnknown;

                case PROVIDER_NUMBER:
                case PROVIDER_SYMBOL_STRING:
                  return ElementTypeContext;

                case CONTEXT_NUMBER:
                case CONTEXT_SYMBOL_STRING:
                  return ElementTypeContext;

                case STRICT_MODE_NUMBER:
                case STRICT_MODE_SYMBOL_STRING:
                  return ElementTypeOtherOrUnknown;

                case PROFILER_NUMBER:
                case PROFILER_SYMBOL_STRING:
                  return ElementTypeProfiler;

                default:
                  return ElementTypeOtherOrUnknown;
              }

          }
        }

        var fiberToIDMap = new Map();
        var idToArbitraryFiberMap = new Map();
        var idToTreeBaseDurationMap = new Map();
        var idToRootMap = new Map();
        var currentRootID = -1;

        function getOrGenerateFiberID(fiber) {
          var id = null;

          if (fiberToIDMap.has(fiber)) {
            id = fiberToIDMap.get(fiber);
          } else {
            var _alternate = fiber.alternate;

            if (_alternate !== null && fiberToIDMap.has(_alternate)) {
              id = fiberToIDMap.get(_alternate);
            }
          }

          var didGenerateID = false;

          if (id === null) {
            didGenerateID = true;
            id = getUID();
          }

          var refinedID = id;

          if (!fiberToIDMap.has(fiber)) {
            fiberToIDMap.set(fiber, refinedID);
            idToArbitraryFiberMap.set(refinedID, fiber);
          }

          var alternate = fiber.alternate;

          if (alternate !== null) {
            if (!fiberToIDMap.has(alternate)) {
              fiberToIDMap.set(alternate, refinedID);
            }
          }

          if (__DEBUG__) {
            if (didGenerateID) {
              debug('getOrGenerateFiberID()', fiber, fiber.return, 'Generated a new UID');
            }
          }

          return refinedID;
        }

        function getFiberIDThrows(fiber) {
          var maybeID = getFiberIDUnsafe(fiber);

          if (maybeID !== null) {
            return maybeID;
          }

          throw Error("Could not find ID for Fiber \"".concat(getDisplayNameForFiber(fiber) || '', "\""));
        }

        function getFiberIDUnsafe(fiber) {
          if (fiberToIDMap.has(fiber)) {
            return fiberToIDMap.get(fiber);
          } else {
            var alternate = fiber.alternate;

            if (alternate !== null && fiberToIDMap.has(alternate)) {
              return fiberToIDMap.get(alternate);
            }
          }

          return null;
        }

        function untrackFiberID(fiber) {
          if (__DEBUG__) {
            debug('untrackFiberID()', fiber, fiber.return, 'schedule after delay');
          }

          untrackFibersSet.add(fiber);

          if (untrackFibersTimeoutID === null) {
            untrackFibersTimeoutID = setTimeout(untrackFibers, 1000);
          }
        }

        var untrackFibersSet = new Set();
        var untrackFibersTimeoutID = null;

        function untrackFibers() {
          if (untrackFibersTimeoutID !== null) {
            clearTimeout(untrackFibersTimeoutID);
            untrackFibersTimeoutID = null;
          }

          untrackFibersSet.forEach(function (fiber) {
            var fiberID = getFiberIDUnsafe(fiber);

            if (fiberID !== null) {
              idToArbitraryFiberMap.delete(fiberID);
              clearErrorsForFiberID(fiberID);
              clearWarningsForFiberID(fiberID);
            }

            fiberToIDMap.delete(fiber);
            var alternate = fiber.alternate;

            if (alternate !== null) {
              fiberToIDMap.delete(alternate);
            }
          });
          untrackFibersSet.clear();
        }

        function getChangeDescription(prevFiber, nextFiber) {
          switch (getElementTypeForFiber(nextFiber)) {
            case ElementTypeClass:
            case ElementTypeFunction:
            case ElementTypeMemo:
            case ElementTypeForwardRef:
              if (prevFiber === null) {
                return {
                  context: null,
                  didHooksChange: false,
                  isFirstMount: true,
                  props: null,
                  state: null
                };
              } else {
                var data = {
                  context: getContextChangedKeys(nextFiber),
                  didHooksChange: false,
                  isFirstMount: false,
                  props: getChangedKeys(prevFiber.memoizedProps, nextFiber.memoizedProps),
                  state: getChangedKeys(prevFiber.memoizedState, nextFiber.memoizedState)
                };

                if (enableProfilerChangedHookIndices) {
                  var indices = getChangedHooksIndices(prevFiber.memoizedState, nextFiber.memoizedState);
                  data.hooks = indices;
                  data.didHooksChange = indices !== null && indices.length > 0;
                } else {
                  data.didHooksChange = didHooksChange(prevFiber.memoizedState, nextFiber.memoizedState);
                }

                return data;
              }

            default:
              return null;
          }
        }

        function updateContextsForFiber(fiber) {
          switch (getElementTypeForFiber(fiber)) {
            case ElementTypeClass:
              if (idToContextsMap !== null) {
                var id = getFiberIDThrows(fiber);
                var contexts = getContextsForFiber(fiber);

                if (contexts !== null) {
                  idToContextsMap.set(id, contexts);
                }
              }

              break;

            default:
              break;
          }
        }

        var NO_CONTEXT = {};

        function getContextsForFiber(fiber) {
          switch (getElementTypeForFiber(fiber)) {
            case ElementTypeClass:
              var instance = fiber.stateNode;
              var legacyContext = NO_CONTEXT;
              var modernContext = NO_CONTEXT;

              if (instance != null) {
                if (instance.constructor && instance.constructor.contextType != null) {
                  modernContext = instance.context;
                } else {
                  legacyContext = instance.context;

                  if (legacyContext && Object.keys(legacyContext).length === 0) {
                    legacyContext = NO_CONTEXT;
                  }
                }
              }

              return [legacyContext, modernContext];

            default:
              return null;
          }
        }

        function crawlToInitializeContextsMap(fiber) {
          updateContextsForFiber(fiber);
          var current = fiber.child;

          while (current !== null) {
            crawlToInitializeContextsMap(current);
            current = current.sibling;
          }
        }

        function getContextChangedKeys(fiber) {
          switch (getElementTypeForFiber(fiber)) {
            case ElementTypeClass:
              if (idToContextsMap !== null) {
                var id = getFiberIDThrows(fiber);
                var prevContexts = idToContextsMap.has(id) ? idToContextsMap.get(id) : null;
                var nextContexts = getContextsForFiber(fiber);

                if (prevContexts == null || nextContexts == null) {
                  return null;
                }

                var _prevContexts = _slicedToArray(prevContexts, 2),
                    prevLegacyContext = _prevContexts[0],
                    prevModernContext = _prevContexts[1];

                var _nextContexts = _slicedToArray(nextContexts, 2),
                    nextLegacyContext = _nextContexts[0],
                    nextModernContext = _nextContexts[1];

                if (nextLegacyContext !== NO_CONTEXT) {
                  return getChangedKeys(prevLegacyContext, nextLegacyContext);
                } else if (nextModernContext !== NO_CONTEXT) {
                  return prevModernContext !== nextModernContext;
                }
              }

              break;

            default:
              break;
          }

          return null;
        }

        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            return false;
          }

          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (shared_objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }

            return false;
          }

          return true;
        }

        function isEffect(memoizedState) {
          if (memoizedState === null || renderer_typeof(memoizedState) !== 'object') {
            return false;
          }

          var deps = memoizedState.deps;
          var hasOwnProperty = Object.prototype.hasOwnProperty.bind(memoizedState);
          return hasOwnProperty('create') && hasOwnProperty('destroy') && hasOwnProperty('deps') && hasOwnProperty('next') && hasOwnProperty('tag') && (deps === null || shared_isArray(deps));
        }

        function didHookChange(prev, next) {
          var prevMemoizedState = prev.memoizedState;
          var nextMemoizedState = next.memoizedState;

          if (isEffect(prevMemoizedState) && isEffect(nextMemoizedState)) {
            return prevMemoizedState !== nextMemoizedState && !areHookInputsEqual(nextMemoizedState.deps, prevMemoizedState.deps);
          }

          return nextMemoizedState !== prevMemoizedState;
        }

        function didHooksChange(prev, next) {
          if (prev == null || next == null) {
            return false;
          }

          if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {
            while (next !== null) {
              if (didHookChange(prev, next)) {
                return true;
              } else {
                next = next.next;
                prev = prev.next;
              }
            }
          }

          return false;
        }

        function getChangedHooksIndices(prev, next) {
          if (enableProfilerChangedHookIndices) {
            if (prev == null || next == null) {
              return null;
            }

            var indices = [];
            var index = 0;

            if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {
              while (next !== null) {
                if (didHookChange(prev, next)) {
                  indices.push(index);
                }

                next = next.next;
                prev = prev.next;
                index++;
              }
            }

            return indices;
          }

          return null;
        }

        function getChangedKeys(prev, next) {
          if (prev == null || next == null) {
            return null;
          }

          if (next.hasOwnProperty('baseState') && next.hasOwnProperty('memoizedState') && next.hasOwnProperty('next') && next.hasOwnProperty('queue')) {
            return null;
          }

          var keys = new Set([].concat(renderer_toConsumableArray(Object.keys(prev)), renderer_toConsumableArray(Object.keys(next))));
          var changedKeys = [];

          var _iterator5 = renderer_createForOfIteratorHelper(keys),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var key = _step5.value;

              if (prev[key] !== next[key]) {
                changedKeys.push(key);
              }
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }

          return changedKeys;
        }

        function didFiberRender(prevFiber, nextFiber) {
          switch (nextFiber.tag) {
            case ClassComponent:
            case FunctionComponent:
            case ContextConsumer:
            case MemoComponent:
            case SimpleMemoComponent:
              return (getFiberFlags(nextFiber) & PerformedWork) === PerformedWork;

            default:
              return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref;
          }
        }

        var pendingOperations = [];
        var pendingRealUnmountedIDs = [];
        var pendingSimulatedUnmountedIDs = [];
        var pendingOperationsQueue = [];
        var pendingStringTable = new Map();
        var pendingStringTableLength = 0;
        var pendingUnmountedRootID = null;

        function pushOperation(op) {
          if (false) {}

          pendingOperations.push(op);
        }

        function flushOrQueueOperations(operations) {
          if (pendingOperationsQueue !== null) {
            pendingOperationsQueue.push(operations);
          } else {
            hook.emit('operations', operations);
          }
        }

        var flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;

        function clearPendingErrorsAndWarningsAfterDelay() {
          if (flushPendingErrorsAndWarningsAfterDelayTimeoutID !== null) {
            clearTimeout(flushPendingErrorsAndWarningsAfterDelayTimeoutID);
            flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;
          }
        }

        function flushPendingErrorsAndWarningsAfterDelay() {
          clearPendingErrorsAndWarningsAfterDelay();
          flushPendingErrorsAndWarningsAfterDelayTimeoutID = setTimeout(function () {
            flushPendingErrorsAndWarningsAfterDelayTimeoutID = null;

            if (pendingOperations.length > 0) {
              return;
            }

            recordPendingErrorsAndWarnings();

            if (pendingOperations.length === 0) {
              return;
            }

            var operations = new Array(3 + pendingOperations.length);
            operations[0] = rendererID;
            operations[1] = currentRootID;
            operations[2] = 0;

            for (var j = 0; j < pendingOperations.length; j++) {
              operations[3 + j] = pendingOperations[j];
            }

            flushOrQueueOperations(operations);
            pendingOperations.length = 0;
          }, 1000);
        }

        function reevaluateErrorsAndWarnings() {
          fibersWithChangedErrorOrWarningCounts.clear();
          fiberIDToErrorsMap.forEach(function (countMap, fiberID) {
            var fiber = idToArbitraryFiberMap.get(fiberID);

            if (fiber != null) {
              fibersWithChangedErrorOrWarningCounts.add(fiber);
            }
          });
          fiberIDToWarningsMap.forEach(function (countMap, fiberID) {
            var fiber = idToArbitraryFiberMap.get(fiberID);

            if (fiber != null) {
              fibersWithChangedErrorOrWarningCounts.add(fiber);
            }
          });
          recordPendingErrorsAndWarnings();
        }

        function mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToMessageCountMap, fiberIDToMessageCountMap) {
          var newCount = 0;
          var messageCountMap = fiberIDToMessageCountMap.get(fiberID);
          var pendingMessageCountMap = pendingFiberToMessageCountMap.get(fiber);

          if (pendingMessageCountMap != null) {
            if (messageCountMap == null) {
              messageCountMap = pendingMessageCountMap;
              fiberIDToMessageCountMap.set(fiberID, pendingMessageCountMap);
            } else {
              var refinedMessageCountMap = messageCountMap;
              pendingMessageCountMap.forEach(function (pendingCount, message) {
                var previousCount = refinedMessageCountMap.get(message) || 0;
                refinedMessageCountMap.set(message, previousCount + pendingCount);
              });
            }
          }

          if (!shouldFilterFiber(fiber)) {
            if (messageCountMap != null) {
              messageCountMap.forEach(function (count) {
                newCount += count;
              });
            }
          }

          pendingFiberToMessageCountMap.delete(fiber);
          return newCount;
        }

        function recordPendingErrorsAndWarnings() {
          clearPendingErrorsAndWarningsAfterDelay();
          fibersWithChangedErrorOrWarningCounts.forEach(function (fiber) {
            var fiberID = getFiberIDUnsafe(fiber);

            if (fiberID === null) {} else {
              var errorCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToErrorsMap, fiberIDToErrorsMap);
              var warningCount = mergeMapsAndGetCountHelper(fiber, fiberID, pendingFiberToWarningsMap, fiberIDToWarningsMap);
              pushOperation(TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS);
              pushOperation(fiberID);
              pushOperation(errorCount);
              pushOperation(warningCount);
            }

            pendingFiberToErrorsMap.delete(fiber);
            pendingFiberToWarningsMap.delete(fiber);
          });
          fibersWithChangedErrorOrWarningCounts.clear();
        }

        function flushPendingEvents(root) {
          recordPendingErrorsAndWarnings();

          if (pendingOperations.length === 0 && pendingRealUnmountedIDs.length === 0 && pendingSimulatedUnmountedIDs.length === 0 && pendingUnmountedRootID === null) {
            if (!isProfiling) {
              return;
            }
          }

          var numUnmountIDs = pendingRealUnmountedIDs.length + pendingSimulatedUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);
          var operations = new Array(2 + 1 + pendingStringTableLength + (numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + pendingOperations.length);
          var i = 0;
          operations[i++] = rendererID;
          operations[i++] = currentRootID;
          operations[i++] = pendingStringTableLength;
          pendingStringTable.forEach(function (value, key) {
            operations[i++] = key.length;
            var encodedKey = utfEncodeString(key);

            for (var j = 0; j < encodedKey.length; j++) {
              operations[i + j] = encodedKey[j];
            }

            i += key.length;
          });

          if (numUnmountIDs > 0) {
            operations[i++] = TREE_OPERATION_REMOVE;
            operations[i++] = numUnmountIDs;

            for (var j = pendingRealUnmountedIDs.length - 1; j >= 0; j--) {
              operations[i++] = pendingRealUnmountedIDs[j];
            }

            for (var _j = 0; _j < pendingSimulatedUnmountedIDs.length; _j++) {
              operations[i + _j] = pendingSimulatedUnmountedIDs[_j];
            }

            i += pendingSimulatedUnmountedIDs.length;

            if (pendingUnmountedRootID !== null) {
              operations[i] = pendingUnmountedRootID;
              i++;
            }
          }

          for (var _j2 = 0; _j2 < pendingOperations.length; _j2++) {
            operations[i + _j2] = pendingOperations[_j2];
          }

          i += pendingOperations.length;
          flushOrQueueOperations(operations);
          pendingOperations.length = 0;
          pendingRealUnmountedIDs.length = 0;
          pendingSimulatedUnmountedIDs.length = 0;
          pendingUnmountedRootID = null;
          pendingStringTable.clear();
          pendingStringTableLength = 0;
        }

        function getStringID(str) {
          if (str === null) {
            return 0;
          }

          var existingID = pendingStringTable.get(str);

          if (existingID !== undefined) {
            return existingID;
          }

          var stringID = pendingStringTable.size + 1;
          pendingStringTable.set(str, stringID);
          pendingStringTableLength += str.length + 1;
          return stringID;
        }

        function recordMount(fiber, parentFiber) {
          var isRoot = fiber.tag === HostRoot;
          var id = getOrGenerateFiberID(fiber);

          if (__DEBUG__) {
            debug('recordMount()', fiber, parentFiber);
          }

          var hasOwnerMetadata = fiber.hasOwnProperty('_debugOwner');
          var isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');

          if (isRoot) {
            pushOperation(TREE_OPERATION_ADD);
            pushOperation(id);
            pushOperation(ElementTypeRoot);
            pushOperation(isProfilingSupported ? 1 : 0);
            pushOperation(hasOwnerMetadata ? 1 : 0);

            if (isProfiling) {
              if (displayNamesByRootID !== null) {
                displayNamesByRootID.set(id, getDisplayNameForRoot(fiber));
              }
            }
          } else {
            var key = fiber.key;
            var displayName = getDisplayNameForFiber(fiber);
            var elementType = getElementTypeForFiber(fiber);
            var _debugOwner = fiber._debugOwner;
            var ownerID = _debugOwner != null ? getOrGenerateFiberID(_debugOwner) : 0;
            var parentID = parentFiber ? getFiberIDThrows(parentFiber) : 0;
            var displayNameStringID = getStringID(displayName);
            var keyString = key === null ? null : '' + key;
            var keyStringID = getStringID(keyString);
            pushOperation(TREE_OPERATION_ADD);
            pushOperation(id);
            pushOperation(elementType);
            pushOperation(parentID);
            pushOperation(ownerID);
            pushOperation(displayNameStringID);
            pushOperation(keyStringID);
          }

          if (isProfilingSupported) {
            idToRootMap.set(id, currentRootID);
            recordProfilingDurations(fiber);
          }
        }

        function recordUnmount(fiber, isSimulated) {
          if (__DEBUG__) {
            debug('recordUnmount()', fiber, null, isSimulated ? 'unmount is simulated' : '');
          }

          if (trackedPathMatchFiber !== null) {
            if (fiber === trackedPathMatchFiber || fiber === trackedPathMatchFiber.alternate) {
              setTrackedPath(null);
            }
          }

          var unsafeID = getFiberIDUnsafe(fiber);

          if (unsafeID === null) {
            return;
          }

          var id = unsafeID;
          var isRoot = fiber.tag === HostRoot;

          if (isRoot) {
            pendingUnmountedRootID = id;
          } else if (!shouldFilterFiber(fiber)) {
            if (isSimulated) {
              pendingSimulatedUnmountedIDs.push(id);
            } else {
              pendingRealUnmountedIDs.push(id);
            }
          }

          if (!fiber._debugNeedsRemount) {
            untrackFiberID(fiber);
            var isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');

            if (isProfilingSupported) {
              idToRootMap.delete(id);
              idToTreeBaseDurationMap.delete(id);
            }
          }
        }

        function mountFiberRecursively(firstChild, parentFiber, traverseSiblings, traceNearestHostComponentUpdate) {
          var fiber = firstChild;

          while (fiber !== null) {
            getOrGenerateFiberID(fiber);

            if (__DEBUG__) {
              debug('mountFiberRecursively()', fiber, parentFiber);
            }

            var mightSiblingsBeOnTrackedPath = updateTrackedPathStateBeforeMount(fiber);
            var shouldIncludeInTree = !shouldFilterFiber(fiber);

            if (shouldIncludeInTree) {
              recordMount(fiber, parentFiber);
            }

            if (traceUpdatesEnabled) {
              if (traceNearestHostComponentUpdate) {
                var elementType = getElementTypeForFiber(fiber);

                if (elementType === ElementTypeHostComponent) {
                  traceUpdatesForNodes.add(fiber.stateNode);
                  traceNearestHostComponentUpdate = false;
                }
              }
            }

            var isSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent;

            if (isSuspense) {
              var isTimedOut = fiber.memoizedState !== null;

              if (isTimedOut) {
                var primaryChildFragment = fiber.child;
                var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
                var fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;

                if (fallbackChild !== null) {
                  mountFiberRecursively(fallbackChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
                }
              } else {
                var primaryChild = null;
                var areSuspenseChildrenConditionallyWrapped = OffscreenComponent === -1;

                if (areSuspenseChildrenConditionallyWrapped) {
                  primaryChild = fiber.child;
                } else if (fiber.child !== null) {
                  primaryChild = fiber.child.child;
                }

                if (primaryChild !== null) {
                  mountFiberRecursively(primaryChild, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
                }
              }
            } else {
              if (fiber.child !== null) {
                mountFiberRecursively(fiber.child, shouldIncludeInTree ? fiber : parentFiber, true, traceNearestHostComponentUpdate);
              }
            }

            updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath);
            fiber = traverseSiblings ? fiber.sibling : null;
          }
        }

        function unmountFiberChildrenRecursively(fiber) {
          if (__DEBUG__) {
            debug('unmountFiberChildrenRecursively()', fiber);
          }

          var isTimedOutSuspense = fiber.tag === ReactTypeOfWork.SuspenseComponent && fiber.memoizedState !== null;
          var child = fiber.child;

          if (isTimedOutSuspense) {
            var primaryChildFragment = fiber.child;
            var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
            child = fallbackChildFragment ? fallbackChildFragment.child : null;
          }

          while (child !== null) {
            if (child.return !== null) {
              unmountFiberChildrenRecursively(child);
              recordUnmount(child, true);
            }

            child = child.sibling;
          }
        }

        function recordProfilingDurations(fiber) {
          var id = getFiberIDThrows(fiber);
          var actualDuration = fiber.actualDuration,
              treeBaseDuration = fiber.treeBaseDuration;
          idToTreeBaseDurationMap.set(id, treeBaseDuration || 0);

          if (isProfiling) {
            var alternate = fiber.alternate;

            if (alternate == null || treeBaseDuration !== alternate.treeBaseDuration) {
              var convertedTreeBaseDuration = Math.floor((treeBaseDuration || 0) * 1000);
              pushOperation(TREE_OPERATION_UPDATE_TREE_BASE_DURATION);
              pushOperation(id);
              pushOperation(convertedTreeBaseDuration);
            }

            if (alternate == null || didFiberRender(alternate, fiber)) {
              if (actualDuration != null) {
                var selfDuration = actualDuration;
                var child = fiber.child;

                while (child !== null) {
                  selfDuration -= child.actualDuration || 0;
                  child = child.sibling;
                }

                var metadata = currentCommitProfilingMetadata;
                metadata.durations.push(id, actualDuration, selfDuration);
                metadata.maxActualDuration = Math.max(metadata.maxActualDuration, actualDuration);

                if (recordChangeDescriptions) {
                  var changeDescription = getChangeDescription(alternate, fiber);

                  if (changeDescription !== null) {
                    if (metadata.changeDescriptions !== null) {
                      metadata.changeDescriptions.set(id, changeDescription);
                    }
                  }

                  updateContextsForFiber(fiber);
                }
              }
            }
          }
        }

        function recordResetChildren(fiber, childSet) {
          if (__DEBUG__) {
            debug('recordResetChildren()', childSet, fiber);
          }

          var nextChildren = [];
          var child = childSet;

          while (child !== null) {
            findReorderedChildrenRecursively(child, nextChildren);
            child = child.sibling;
          }

          var numChildren = nextChildren.length;

          if (numChildren < 2) {
            return;
          }

          pushOperation(TREE_OPERATION_REORDER_CHILDREN);
          pushOperation(getFiberIDThrows(fiber));
          pushOperation(numChildren);

          for (var i = 0; i < nextChildren.length; i++) {
            pushOperation(nextChildren[i]);
          }
        }

        function findReorderedChildrenRecursively(fiber, nextChildren) {
          if (!shouldFilterFiber(fiber)) {
            nextChildren.push(getFiberIDThrows(fiber));
          } else {
            var child = fiber.child;
            var isTimedOutSuspense = fiber.tag === SuspenseComponent && fiber.memoizedState !== null;

            if (isTimedOutSuspense) {
              var primaryChildFragment = fiber.child;
              var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;
              var fallbackChild = fallbackChildFragment ? fallbackChildFragment.child : null;

              if (fallbackChild !== null) {
                child = fallbackChild;
              }
            }

            while (child !== null) {
              findReorderedChildrenRecursively(child, nextChildren);
              child = child.sibling;
            }
          }
        }

        function updateFiberRecursively(nextFiber, prevFiber, parentFiber, traceNearestHostComponentUpdate) {
          var id = getOrGenerateFiberID(nextFiber);

          if (__DEBUG__) {
            debug('updateFiberRecursively()', nextFiber, parentFiber);
          }

          if (traceUpdatesEnabled) {
            var elementType = getElementTypeForFiber(nextFiber);

            if (traceNearestHostComponentUpdate) {
              if (elementType === ElementTypeHostComponent) {
                traceUpdatesForNodes.add(nextFiber.stateNode);
                traceNearestHostComponentUpdate = false;
              }
            } else {
              if (elementType === ElementTypeFunction || elementType === ElementTypeClass || elementType === ElementTypeContext) {
                traceNearestHostComponentUpdate = didFiberRender(prevFiber, nextFiber);
              }
            }
          }

          if (mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id && didFiberRender(prevFiber, nextFiber)) {
            hasElementUpdatedSinceLastInspected = true;
          }

          var shouldIncludeInTree = !shouldFilterFiber(nextFiber);
          var isSuspense = nextFiber.tag === SuspenseComponent;
          var shouldResetChildren = false;
          var prevDidTimeout = isSuspense && prevFiber.memoizedState !== null;
          var nextDidTimeOut = isSuspense && nextFiber.memoizedState !== null;

          if (prevDidTimeout && nextDidTimeOut) {
            var nextFiberChild = nextFiber.child;
            var nextFallbackChildSet = nextFiberChild ? nextFiberChild.sibling : null;
            var prevFiberChild = prevFiber.child;
            var prevFallbackChildSet = prevFiberChild ? prevFiberChild.sibling : null;

            if (nextFallbackChildSet != null && prevFallbackChildSet != null && updateFiberRecursively(nextFallbackChildSet, prevFallbackChildSet, nextFiber, traceNearestHostComponentUpdate)) {
              shouldResetChildren = true;
            }
          } else if (prevDidTimeout && !nextDidTimeOut) {
            var nextPrimaryChildSet = nextFiber.child;

            if (nextPrimaryChildSet !== null) {
              mountFiberRecursively(nextPrimaryChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);
            }

            shouldResetChildren = true;
          } else if (!prevDidTimeout && nextDidTimeOut) {
            unmountFiberChildrenRecursively(prevFiber);
            var _nextFiberChild = nextFiber.child;

            var _nextFallbackChildSet = _nextFiberChild ? _nextFiberChild.sibling : null;

            if (_nextFallbackChildSet != null) {
              mountFiberRecursively(_nextFallbackChildSet, shouldIncludeInTree ? nextFiber : parentFiber, true, traceNearestHostComponentUpdate);
              shouldResetChildren = true;
            }
          } else {
            if (nextFiber.child !== prevFiber.child) {
              var nextChild = nextFiber.child;
              var prevChildAtSameIndex = prevFiber.child;

              while (nextChild) {
                if (nextChild.alternate) {
                  var prevChild = nextChild.alternate;

                  if (updateFiberRecursively(nextChild, prevChild, shouldIncludeInTree ? nextFiber : parentFiber, traceNearestHostComponentUpdate)) {
                    shouldResetChildren = true;
                  }

                  if (prevChild !== prevChildAtSameIndex) {
                    shouldResetChildren = true;
                  }
                } else {
                  mountFiberRecursively(nextChild, shouldIncludeInTree ? nextFiber : parentFiber, false, traceNearestHostComponentUpdate);
                  shouldResetChildren = true;
                }

                nextChild = nextChild.sibling;

                if (!shouldResetChildren && prevChildAtSameIndex !== null) {
                  prevChildAtSameIndex = prevChildAtSameIndex.sibling;
                }
              }

              if (prevChildAtSameIndex !== null) {
                shouldResetChildren = true;
              }
            } else {
              if (traceUpdatesEnabled) {
                if (traceNearestHostComponentUpdate) {
                  var hostFibers = findAllCurrentHostFibers(getFiberIDThrows(nextFiber));
                  hostFibers.forEach(function (hostFiber) {
                    traceUpdatesForNodes.add(hostFiber.stateNode);
                  });
                }
              }
            }
          }

          if (shouldIncludeInTree) {
            var isProfilingSupported = nextFiber.hasOwnProperty('treeBaseDuration');

            if (isProfilingSupported) {
              recordProfilingDurations(nextFiber);
            }
          }

          if (shouldResetChildren) {
            if (shouldIncludeInTree) {
              var nextChildSet = nextFiber.child;

              if (nextDidTimeOut) {
                var _nextFiberChild2 = nextFiber.child;
                nextChildSet = _nextFiberChild2 ? _nextFiberChild2.sibling : null;
              }

              if (nextChildSet != null) {
                recordResetChildren(nextFiber, nextChildSet);
              }

              return false;
            } else {
              return true;
            }
          } else {
            return false;
          }
        }

        function cleanup() {}

        function rootSupportsProfiling(root) {
          if (root.memoizedInteractions != null) {
            return true;
          } else if (root.current != null && root.current.hasOwnProperty('treeBaseDuration')) {
            return true;
          } else {
            return false;
          }
        }

        function flushInitialOperations() {
          var localPendingOperationsQueue = pendingOperationsQueue;
          pendingOperationsQueue = null;

          if (localPendingOperationsQueue !== null && localPendingOperationsQueue.length > 0) {
            localPendingOperationsQueue.forEach(function (operations) {
              hook.emit('operations', operations);
            });
          } else {
            if (trackedPath !== null) {
              mightBeOnTrackedPath = true;
            }

            hook.getFiberRoots(rendererID).forEach(function (root) {
              currentRootID = getOrGenerateFiberID(root.current);
              setRootPseudoKey(currentRootID, root.current);

              if (isProfiling && rootSupportsProfiling(root)) {
                currentCommitProfilingMetadata = {
                  changeDescriptions: recordChangeDescriptions ? new Map() : null,
                  durations: [],
                  commitTime: renderer_getCurrentTime() - profilingStartTime,
                  maxActualDuration: 0,
                  priorityLevel: null,
                  updaters: getUpdatersList(root),
                  effectDuration: null,
                  passiveEffectDuration: null
                };
              }

              mountFiberRecursively(root.current, null, false, false);
              flushPendingEvents(root);
              currentRootID = -1;
            });
          }
        }

        function getUpdatersList(root) {
          return root.memoizedUpdaters != null ? Array.from(root.memoizedUpdaters).map(fiberToSerializedElement) : null;
        }

        function handleCommitFiberUnmount(fiber) {
          recordUnmount(fiber, false);
        }

        function handlePostCommitFiberRoot(root) {
          if (isProfiling && rootSupportsProfiling(root)) {
            if (currentCommitProfilingMetadata !== null) {
              var _getEffectDurations = getEffectDurations(root),
                  effectDuration = _getEffectDurations.effectDuration,
                  passiveEffectDuration = _getEffectDurations.passiveEffectDuration;

              currentCommitProfilingMetadata.effectDuration = effectDuration;
              currentCommitProfilingMetadata.passiveEffectDuration = passiveEffectDuration;
            }
          }
        }

        function handleCommitFiberRoot(root, priorityLevel) {
          var current = root.current;
          var alternate = current.alternate;
          untrackFibers();
          currentRootID = getOrGenerateFiberID(current);

          if (trackedPath !== null) {
            mightBeOnTrackedPath = true;
          }

          if (traceUpdatesEnabled) {
            traceUpdatesForNodes.clear();
          }

          var isProfilingSupported = rootSupportsProfiling(root);

          if (isProfiling && isProfilingSupported) {
            currentCommitProfilingMetadata = {
              changeDescriptions: recordChangeDescriptions ? new Map() : null,
              durations: [],
              commitTime: renderer_getCurrentTime() - profilingStartTime,
              maxActualDuration: 0,
              priorityLevel: priorityLevel == null ? null : formatPriorityLevel(priorityLevel),
              updaters: getUpdatersList(root),
              effectDuration: null,
              passiveEffectDuration: null
            };
          }

          if (alternate) {
            var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
            var isMounted = current.memoizedState != null && current.memoizedState.element != null;

            if (!wasMounted && isMounted) {
              setRootPseudoKey(currentRootID, current);
              mountFiberRecursively(current, null, false, false);
            } else if (wasMounted && isMounted) {
              updateFiberRecursively(current, alternate, null, false);
            } else if (wasMounted && !isMounted) {
              removeRootPseudoKey(currentRootID);
              recordUnmount(current, false);
            }
          } else {
            setRootPseudoKey(currentRootID, current);
            mountFiberRecursively(current, null, false, false);
          }

          if (isProfiling && isProfilingSupported) {
            var commitProfilingMetadata = rootToCommitProfilingMetadataMap.get(currentRootID);

            if (commitProfilingMetadata != null) {
              commitProfilingMetadata.push(currentCommitProfilingMetadata);
            } else {
              rootToCommitProfilingMetadataMap.set(currentRootID, [currentCommitProfilingMetadata]);
            }
          }

          flushPendingEvents(root);

          if (traceUpdatesEnabled) {
            hook.emit('traceUpdates', traceUpdatesForNodes);
          }

          currentRootID = -1;
        }

        function findAllCurrentHostFibers(id) {
          var fibers = [];
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (!fiber) {
            return fibers;
          }

          var node = fiber;

          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              fibers.push(node);
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === fiber) {
              return fibers;
            }

            while (!node.sibling) {
              if (!node.return || node.return === fiber) {
                return fibers;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }

          return fibers;
        }

        function findNativeNodesForFiberID(id) {
          try {
            var _fiber3 = findCurrentFiberUsingSlowPathById(id);

            if (_fiber3 === null) {
              return null;
            }

            var isTimedOutSuspense = _fiber3.tag === SuspenseComponent && _fiber3.memoizedState !== null;

            if (isTimedOutSuspense) {
              var maybeFallbackFiber = _fiber3.child && _fiber3.child.sibling;

              if (maybeFallbackFiber != null) {
                _fiber3 = maybeFallbackFiber;
              }
            }

            var hostFibers = findAllCurrentHostFibers(id);
            return hostFibers.map(function (hostFiber) {
              return hostFiber.stateNode;
            }).filter(Boolean);
          } catch (err) {
            return null;
          }
        }

        function getDisplayNameForFiberID(id) {
          var fiber = idToArbitraryFiberMap.get(id);
          return fiber != null ? getDisplayNameForFiber(fiber) : null;
        }

        function getFiberIDForNative(hostInstance) {
          var findNearestUnfilteredAncestor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          var fiber = renderer.findFiberByHostInstance(hostInstance);

          if (fiber != null) {
            if (findNearestUnfilteredAncestor) {
              while (fiber !== null && shouldFilterFiber(fiber)) {
                fiber = fiber.return;
              }
            }

            return getFiberIDThrows(fiber);
          }

          return null;
        }

        var MOUNTING = 1;
        var MOUNTED = 2;
        var UNMOUNTED = 3;

        function isFiberMountedImpl(fiber) {
          var node = fiber;
          var prevNode = null;

          if (!fiber.alternate) {
            if ((getFiberFlags(node) & Placement) !== NoFlags) {
              return MOUNTING;
            }

            if ((getFiberFlags(node) & Incomplete) !== NoFlags) {
              return UNMOUNTED;
            }

            while (node.return) {
              prevNode = node;
              node = node.return;

              if ((getFiberFlags(node) & Placement) !== NoFlags) {
                return MOUNTING;
              }

              if ((getFiberFlags(node) & Incomplete) !== NoFlags) {
                return UNMOUNTED;
              }

              var isTimedOutSuspense = node.tag === SuspenseComponent && node.memoizedState !== null;

              if (isTimedOutSuspense) {
                var primaryChildFragment = node.child;
                var fallbackChildFragment = primaryChildFragment ? primaryChildFragment.sibling : null;

                if (prevNode !== fallbackChildFragment) {
                  return UNMOUNTED;
                }
              }
            }
          } else {
            while (node.return) {
              node = node.return;
            }
          }

          if (node.tag === HostRoot) {
            return MOUNTED;
          }

          return UNMOUNTED;
        }

        function findCurrentFiberUsingSlowPathById(id) {
          var fiber = idToArbitraryFiberMap.get(id);

          if (fiber == null) {
            console.warn("Could not find Fiber with id \"".concat(id, "\""));
            return null;
          }

          var alternate = fiber.alternate;

          if (!alternate) {
            var state = isFiberMountedImpl(fiber);

            if (state === UNMOUNTED) {
              throw Error('Unable to find node on an unmounted component.');
            }

            if (state === MOUNTING) {
              return null;
            }

            return fiber;
          }

          var a = fiber;
          var b = alternate;

          while (true) {
            var parentA = a.return;

            if (parentA === null) {
              break;
            }

            var parentB = parentA.alternate;

            if (parentB === null) {
              var nextParent = parentA.return;

              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }

              break;
            }

            if (parentA.child === parentB.child) {
              var child = parentA.child;

              while (child) {
                if (child === a) {
                  if (isFiberMountedImpl(parentA) !== MOUNTED) {
                    throw Error('Unable to find node on an unmounted component.');
                  }

                  return fiber;
                }

                if (child === b) {
                  if (isFiberMountedImpl(parentA) !== MOUNTED) {
                    throw Error('Unable to find node on an unmounted component.');
                  }

                  return alternate;
                }

                child = child.sibling;
              }

              throw Error('Unable to find node on an unmounted component.');
            }

            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }

                _child = _child.sibling;
              }

              if (!didFindChild) {
                _child = parentB.child;

                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }

                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }

                  _child = _child.sibling;
                }

                if (!didFindChild) {
                  throw Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
                }
              }
            }

            if (a.alternate !== b) {
              throw Error("Return fibers should always be each others' alternates. " + 'This error is likely caused by a bug in React. Please file an issue.');
            }
          }

          if (a.tag !== HostRoot) {
            throw Error('Unable to find node on an unmounted component.');
          }

          if (a.stateNode.current === a) {
            return fiber;
          }

          return alternate;
        }

        function prepareViewAttributeSource(id, path) {
          if (isMostRecentlyInspectedElement(id)) {
            window.$attribute = getInObject(mostRecentlyInspectedElement, path);
          }
        }

        function prepareViewElementSource(id) {
          var fiber = idToArbitraryFiberMap.get(id);

          if (fiber == null) {
            console.warn("Could not find Fiber with id \"".concat(id, "\""));
            return;
          }

          var elementType = fiber.elementType,
              tag = fiber.tag,
              type = fiber.type;

          switch (tag) {
            case ClassComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case FunctionComponent:
              global.$type = type;
              break;

            case ForwardRef:
              global.$type = type.render;
              break;

            case MemoComponent:
            case SimpleMemoComponent:
              global.$type = elementType != null && elementType.type != null ? elementType.type : type;
              break;

            default:
              global.$type = null;
              break;
          }
        }

        function fiberToSerializedElement(fiber) {
          return {
            displayName: getDisplayNameForFiber(fiber) || 'Anonymous',
            id: getFiberIDThrows(fiber),
            key: fiber.key,
            type: getElementTypeForFiber(fiber)
          };
        }

        function getOwnersList(id) {
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber == null) {
            return null;
          }

          var _debugOwner = fiber._debugOwner;
          var owners = [fiberToSerializedElement(fiber)];

          if (_debugOwner) {
            var owner = _debugOwner;

            while (owner !== null) {
              owners.unshift(fiberToSerializedElement(owner));
              owner = owner._debugOwner || null;
            }
          }

          return owners;
        }

        function getInstanceAndStyle(id) {
          var instance = null;
          var style = null;
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber !== null) {
            instance = fiber.stateNode;

            if (fiber.memoizedProps !== null) {
              style = fiber.memoizedProps.style;
            }
          }

          return {
            instance: instance,
            style: style
          };
        }

        function inspectElementRaw(id) {
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber == null) {
            return null;
          }

          var _debugOwner = fiber._debugOwner,
              _debugSource = fiber._debugSource,
              stateNode = fiber.stateNode,
              key = fiber.key,
              memoizedProps = fiber.memoizedProps,
              memoizedState = fiber.memoizedState,
              dependencies = fiber.dependencies,
              tag = fiber.tag,
              type = fiber.type;
          var elementType = getElementTypeForFiber(fiber);
          var usesHooks = (tag === FunctionComponent || tag === SimpleMemoComponent || tag === ForwardRef) && (!!memoizedState || !!dependencies);
          var showState = !usesHooks && tag !== CacheComponent;
          var typeSymbol = getTypeSymbol(type);
          var canViewSource = false;
          var context = null;

          if (tag === ClassComponent || tag === FunctionComponent || tag === IncompleteClassComponent || tag === IndeterminateComponent || tag === MemoComponent || tag === ForwardRef || tag === SimpleMemoComponent) {
            canViewSource = true;

            if (stateNode && stateNode.context != null) {
              var shouldHideContext = elementType === ElementTypeClass && !(type.contextTypes || type.contextType);

              if (!shouldHideContext) {
                context = stateNode.context;
              }
            }
          } else if (typeSymbol === CONTEXT_NUMBER || typeSymbol === CONTEXT_SYMBOL_STRING) {
            var consumerResolvedContext = type._context || type;
            context = consumerResolvedContext._currentValue || null;
            var _current = fiber.return;

            while (_current !== null) {
              var currentType = _current.type;
              var currentTypeSymbol = getTypeSymbol(currentType);

              if (currentTypeSymbol === PROVIDER_NUMBER || currentTypeSymbol === PROVIDER_SYMBOL_STRING) {
                var providerResolvedContext = currentType._context || currentType.context;

                if (providerResolvedContext === consumerResolvedContext) {
                  context = _current.memoizedProps.value;
                  break;
                }
              }

              _current = _current.return;
            }
          }

          var hasLegacyContext = false;

          if (context !== null) {
            hasLegacyContext = !!type.contextTypes;
            context = {
              value: context
            };
          }

          var owners = null;

          if (_debugOwner) {
            owners = [];
            var owner = _debugOwner;

            while (owner !== null) {
              owners.push(fiberToSerializedElement(owner));
              owner = owner._debugOwner || null;
            }
          }

          var isTimedOutSuspense = tag === SuspenseComponent && memoizedState !== null;
          var hooks = null;

          if (usesHooks) {
            var originalConsoleMethods = {};

            for (var method in console) {
              try {
                originalConsoleMethods[method] = console[method];

                console[method] = function () {};
              } catch (error) {}
            }

            try {
              hooks = Object(react_debug_tools["inspectHooksOfFiber"])(fiber, renderer.currentDispatcherRef);
            } finally {
              for (var _method in originalConsoleMethods) {
                try {
                  console[_method] = originalConsoleMethods[_method];
                } catch (error) {}
              }
            }
          }

          var rootType = null;
          var current = fiber;

          while (current.return !== null) {
            current = current.return;
          }

          var fiberRoot = current.stateNode;

          if (fiberRoot != null && fiberRoot._debugRootType !== null) {
            rootType = fiberRoot._debugRootType;
          }

          var errors = fiberIDToErrorsMap.get(id) || new Map();
          var warnings = fiberIDToWarningsMap.get(id) || new Map();
          return {
            id: id,
            canEditHooks: typeof overrideHookState === 'function',
            canEditFunctionProps: typeof overrideProps === 'function',
            canEditHooksAndDeletePaths: typeof overrideHookStateDeletePath === 'function',
            canEditHooksAndRenamePaths: typeof overrideHookStateRenamePath === 'function',
            canEditFunctionPropsDeletePaths: typeof overridePropsDeletePath === 'function',
            canEditFunctionPropsRenamePaths: typeof overridePropsRenamePath === 'function',
            canToggleSuspense: supportsTogglingSuspense && (!isTimedOutSuspense || forceFallbackForSuspenseIDs.has(id)),
            canViewSource: canViewSource,
            hasLegacyContext: hasLegacyContext,
            key: key != null ? key : null,
            displayName: getDisplayNameForFiber(fiber),
            type: elementType,
            context: context,
            hooks: hooks,
            props: memoizedProps,
            state: showState ? memoizedState : null,
            errors: Array.from(errors.entries()),
            warnings: Array.from(warnings.entries()),
            owners: owners,
            source: _debugSource || null,
            rootType: rootType,
            rendererPackageName: renderer.rendererPackageName,
            rendererVersion: renderer.version
          };
        }

        var mostRecentlyInspectedElement = null;
        var hasElementUpdatedSinceLastInspected = false;
        var currentlyInspectedPaths = {};

        function isMostRecentlyInspectedElement(id) {
          return mostRecentlyInspectedElement !== null && mostRecentlyInspectedElement.id === id;
        }

        function isMostRecentlyInspectedElementCurrent(id) {
          return isMostRecentlyInspectedElement(id) && !hasElementUpdatedSinceLastInspected;
        }

        function mergeInspectedPaths(path) {
          var current = currentlyInspectedPaths;
          path.forEach(function (key) {
            if (!current[key]) {
              current[key] = {};
            }

            current = current[key];
          });
        }

        function createIsPathAllowed(key, secondaryCategory) {
          return function isPathAllowed(path) {
            switch (secondaryCategory) {
              case 'hooks':
                if (path.length === 1) {
                  return true;
                }

                if (path[path.length - 1] === 'subHooks' || path[path.length - 2] === 'subHooks') {
                  return true;
                }

                break;

              default:
                break;
            }

            var current = key === null ? currentlyInspectedPaths : currentlyInspectedPaths[key];

            if (!current) {
              return false;
            }

            for (var i = 0; i < path.length; i++) {
              current = current[path[i]];

              if (!current) {
                return false;
              }
            }

            return true;
          };
        }

        function updateSelectedElement(inspectedElement) {
          var hooks = inspectedElement.hooks,
              id = inspectedElement.id,
              props = inspectedElement.props;
          var fiber = idToArbitraryFiberMap.get(id);

          if (fiber == null) {
            console.warn("Could not find Fiber with id \"".concat(id, "\""));
            return;
          }

          var elementType = fiber.elementType,
              stateNode = fiber.stateNode,
              tag = fiber.tag,
              type = fiber.type;

          switch (tag) {
            case ClassComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
              global.$r = stateNode;
              break;

            case FunctionComponent:
              global.$r = {
                hooks: hooks,
                props: props,
                type: type
              };
              break;

            case ForwardRef:
              global.$r = {
                hooks: hooks,
                props: props,
                type: type.render
              };
              break;

            case MemoComponent:
            case SimpleMemoComponent:
              global.$r = {
                hooks: hooks,
                props: props,
                type: elementType != null && elementType.type != null ? elementType.type : type
              };
              break;

            default:
              global.$r = null;
              break;
          }
        }

        function storeAsGlobal(id, path, count) {
          if (isMostRecentlyInspectedElement(id)) {
            var value = getInObject(mostRecentlyInspectedElement, path);
            var key = "$reactTemp".concat(count);
            window[key] = value;
            console.log(key);
            console.log(value);
          }
        }

        function copyElementPath(id, path) {
          if (isMostRecentlyInspectedElement(id)) {
            copyToClipboard(getInObject(mostRecentlyInspectedElement, path));
          }
        }

        function inspectElement(requestID, id, path) {
          if (path !== null) {
            mergeInspectedPaths(path);
          }

          if (isMostRecentlyInspectedElement(id)) {
            if (!hasElementUpdatedSinceLastInspected) {
              if (path !== null) {
                var secondaryCategory = null;

                if (path[0] === 'hooks') {
                  secondaryCategory = 'hooks';
                }

                return {
                  id: id,
                  responseID: requestID,
                  type: 'hydrated-path',
                  path: path,
                  value: cleanForBridge(getInObject(mostRecentlyInspectedElement, path), createIsPathAllowed(null, secondaryCategory), path)
                };
              } else {
                return {
                  id: id,
                  responseID: requestID,
                  type: 'no-change'
                };
              }
            }
          } else {
            currentlyInspectedPaths = {};
          }

          hasElementUpdatedSinceLastInspected = false;
          mostRecentlyInspectedElement = inspectElementRaw(id);

          if (mostRecentlyInspectedElement === null) {
            return {
              id: id,
              responseID: requestID,
              type: 'not-found'
            };
          }

          updateSelectedElement(mostRecentlyInspectedElement);
          var cleanedInspectedElement = renderer_objectSpread({}, mostRecentlyInspectedElement);
          cleanedInspectedElement.context = cleanForBridge(cleanedInspectedElement.context, createIsPathAllowed('context', null));
          cleanedInspectedElement.hooks = cleanForBridge(cleanedInspectedElement.hooks, createIsPathAllowed('hooks', 'hooks'));
          cleanedInspectedElement.props = cleanForBridge(cleanedInspectedElement.props, createIsPathAllowed('props', null));
          cleanedInspectedElement.state = cleanForBridge(cleanedInspectedElement.state, createIsPathAllowed('state', null));
          return {
            id: id,
            responseID: requestID,
            type: 'full-data',
            value: cleanedInspectedElement
          };
        }

        function logElementToConsole(id) {
          var result = isMostRecentlyInspectedElementCurrent(id) ? mostRecentlyInspectedElement : inspectElementRaw(id);

          if (result === null) {
            console.warn("Could not find Fiber with id \"".concat(id, "\""));
            return;
          }

          var supportsGroup = typeof console.groupCollapsed === 'function';

          if (supportsGroup) {
            console.groupCollapsed("[Click to expand] %c<".concat(result.displayName || 'Component', " />"), 'color: var(--dom-tag-name-color); font-weight: normal;');
          }

          if (result.props !== null) {
            console.log('Props:', result.props);
          }

          if (result.state !== null) {
            console.log('State:', result.state);
          }

          if (result.hooks !== null) {
            console.log('Hooks:', result.hooks);
          }

          var nativeNodes = findNativeNodesForFiberID(id);

          if (nativeNodes !== null) {
            console.log('Nodes:', nativeNodes);
          }

          if (result.source !== null) {
            console.log('Location:', result.source);
          }

          if (window.chrome || /firefox/i.test(navigator.userAgent)) {
            console.log('Right-click any value to save it as a global variable for further inspection.');
          }

          if (supportsGroup) {
            console.groupEnd();
          }
        }

        function deletePath(type, id, hookID, path) {
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber !== null) {
            var instance = fiber.stateNode;

            switch (type) {
              case 'context':
                path = path.slice(1);

                switch (fiber.tag) {
                  case ClassComponent:
                    if (path.length === 0) {} else {
                      deletePathInObject(instance.context, path);
                    }

                    instance.forceUpdate();
                    break;

                  case FunctionComponent:
                    break;
                }

                break;

              case 'hooks':
                if (typeof overrideHookStateDeletePath === 'function') {
                  overrideHookStateDeletePath(fiber, hookID, path);
                }

                break;

              case 'props':
                if (instance === null) {
                  if (typeof overridePropsDeletePath === 'function') {
                    overridePropsDeletePath(fiber, path);
                  }
                } else {
                  fiber.pendingProps = copyWithDelete(instance.props, path);
                  instance.forceUpdate();
                }

                break;

              case 'state':
                deletePathInObject(instance.state, path);
                instance.forceUpdate();
                break;
            }
          }
        }

        function renamePath(type, id, hookID, oldPath, newPath) {
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber !== null) {
            var instance = fiber.stateNode;

            switch (type) {
              case 'context':
                oldPath = oldPath.slice(1);
                newPath = newPath.slice(1);

                switch (fiber.tag) {
                  case ClassComponent:
                    if (oldPath.length === 0) {} else {
                      renamePathInObject(instance.context, oldPath, newPath);
                    }

                    instance.forceUpdate();
                    break;

                  case FunctionComponent:
                    break;
                }

                break;

              case 'hooks':
                if (typeof overrideHookStateRenamePath === 'function') {
                  overrideHookStateRenamePath(fiber, hookID, oldPath, newPath);
                }

                break;

              case 'props':
                if (instance === null) {
                  if (typeof overridePropsRenamePath === 'function') {
                    overridePropsRenamePath(fiber, oldPath, newPath);
                  }
                } else {
                  fiber.pendingProps = copyWithRename(instance.props, oldPath, newPath);
                  instance.forceUpdate();
                }

                break;

              case 'state':
                renamePathInObject(instance.state, oldPath, newPath);
                instance.forceUpdate();
                break;
            }
          }
        }

        function overrideValueAtPath(type, id, hookID, path, value) {
          var fiber = findCurrentFiberUsingSlowPathById(id);

          if (fiber !== null) {
            var instance = fiber.stateNode;

            switch (type) {
              case 'context':
                path = path.slice(1);

                switch (fiber.tag) {
                  case ClassComponent:
                    if (path.length === 0) {
                      instance.context = value;
                    } else {
                      setInObject(instance.context, path, value);
                    }

                    instance.forceUpdate();
                    break;

                  case FunctionComponent:
                    break;
                }

                break;

              case 'hooks':
                if (typeof overrideHookState === 'function') {
                  overrideHookState(fiber, hookID, path, value);
                }

                break;

              case 'props':
                switch (fiber.tag) {
                  case ClassComponent:
                    fiber.pendingProps = copyWithSet(instance.props, path, value);
                    instance.forceUpdate();
                    break;

                  default:
                    if (typeof overrideProps === 'function') {
                      overrideProps(fiber, path, value);
                    }

                    break;
                }

                break;

              case 'state':
                switch (fiber.tag) {
                  case ClassComponent:
                    setInObject(instance.state, path, value);
                    instance.forceUpdate();
                    break;
                }

                break;
            }
          }
        }

        var currentCommitProfilingMetadata = null;
        var displayNamesByRootID = null;
        var idToContextsMap = null;
        var initialTreeBaseDurationsMap = null;
        var initialIDToRootMap = null;
        var isProfiling = false;
        var profilingStartTime = 0;
        var recordChangeDescriptions = false;
        var rootToCommitProfilingMetadataMap = null;

        function getProfilingData() {
          var dataForRoots = [];

          if (rootToCommitProfilingMetadataMap === null) {
            throw Error('getProfilingData() called before any profiling data was recorded');
          }

          rootToCommitProfilingMetadataMap.forEach(function (commitProfilingMetadata, rootID) {
            var commitData = [];
            var initialTreeBaseDurations = [];
            var displayName = displayNamesByRootID !== null && displayNamesByRootID.get(rootID) || 'Unknown';

            if (initialTreeBaseDurationsMap != null) {
              initialTreeBaseDurationsMap.forEach(function (treeBaseDuration, id) {
                if (initialIDToRootMap != null && initialIDToRootMap.get(id) === rootID) {
                  initialTreeBaseDurations.push([id, treeBaseDuration]);
                }
              });
            }

            commitProfilingMetadata.forEach(function (commitProfilingData, commitIndex) {
              var changeDescriptions = commitProfilingData.changeDescriptions,
                  durations = commitProfilingData.durations,
                  effectDuration = commitProfilingData.effectDuration,
                  maxActualDuration = commitProfilingData.maxActualDuration,
                  passiveEffectDuration = commitProfilingData.passiveEffectDuration,
                  priorityLevel = commitProfilingData.priorityLevel,
                  commitTime = commitProfilingData.commitTime,
                  updaters = commitProfilingData.updaters;
              var fiberActualDurations = [];
              var fiberSelfDurations = [];

              for (var i = 0; i < durations.length; i += 3) {
                var fiberID = durations[i];
                fiberActualDurations.push([fiberID, durations[i + 1]]);
                fiberSelfDurations.push([fiberID, durations[i + 2]]);
              }

              commitData.push({
                changeDescriptions: changeDescriptions !== null ? Array.from(changeDescriptions.entries()) : null,
                duration: maxActualDuration,
                effectDuration: effectDuration,
                fiberActualDurations: fiberActualDurations,
                fiberSelfDurations: fiberSelfDurations,
                passiveEffectDuration: passiveEffectDuration,
                priorityLevel: priorityLevel,
                timestamp: commitTime,
                updaters: updaters
              });
            });
            dataForRoots.push({
              commitData: commitData,
              displayName: displayName,
              initialTreeBaseDurations: initialTreeBaseDurations,
              rootID: rootID
            });
          });
          return {
            dataForRoots: dataForRoots,
            rendererID: rendererID
          };
        }

        function startProfiling(shouldRecordChangeDescriptions) {
          if (isProfiling) {
            return;
          }

          recordChangeDescriptions = shouldRecordChangeDescriptions;
          displayNamesByRootID = new Map();
          initialTreeBaseDurationsMap = new Map(idToTreeBaseDurationMap);
          initialIDToRootMap = new Map(idToRootMap);
          idToContextsMap = new Map();
          hook.getFiberRoots(rendererID).forEach(function (root) {
            var rootID = getFiberIDThrows(root.current);
            displayNamesByRootID.set(rootID, getDisplayNameForRoot(root.current));

            if (shouldRecordChangeDescriptions) {
              crawlToInitializeContextsMap(root.current);
            }
          });
          isProfiling = true;
          profilingStartTime = renderer_getCurrentTime();
          rootToCommitProfilingMetadataMap = new Map();
        }

        function stopProfiling() {
          isProfiling = false;
          recordChangeDescriptions = false;
        }

        if (sessionStorageGetItem(SESSION_STORAGE_RELOAD_AND_PROFILE_KEY) === 'true') {
          startProfiling(sessionStorageGetItem(SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY) === 'true');
        }

        function shouldSuspendFiberAlwaysFalse() {
          return false;
        }

        var forceFallbackForSuspenseIDs = new Set();

        function shouldSuspendFiberAccordingToSet(fiber) {
          var maybeID = getFiberIDUnsafe(fiber);
          return maybeID !== null && forceFallbackForSuspenseIDs.has(maybeID);
        }

        function overrideSuspense(id, forceFallback) {
          if (typeof setSuspenseHandler !== 'function' || typeof scheduleUpdate !== 'function') {
            throw new Error('Expected overrideSuspense() to not get called for earlier React versions.');
          }

          if (forceFallback) {
            forceFallbackForSuspenseIDs.add(id);

            if (forceFallbackForSuspenseIDs.size === 1) {
              setSuspenseHandler(shouldSuspendFiberAccordingToSet);
            }
          } else {
            forceFallbackForSuspenseIDs.delete(id);

            if (forceFallbackForSuspenseIDs.size === 0) {
              setSuspenseHandler(shouldSuspendFiberAlwaysFalse);
            }
          }

          var fiber = idToArbitraryFiberMap.get(id);

          if (fiber != null) {
            scheduleUpdate(fiber);
          }
        }

        var trackedPath = null;
        var trackedPathMatchFiber = null;
        var trackedPathMatchDepth = -1;
        var mightBeOnTrackedPath = false;

        function setTrackedPath(path) {
          if (path === null) {
            trackedPathMatchFiber = null;
            trackedPathMatchDepth = -1;
            mightBeOnTrackedPath = false;
          }

          trackedPath = path;
        }

        function updateTrackedPathStateBeforeMount(fiber) {
          if (trackedPath === null || !mightBeOnTrackedPath) {
            return false;
          }

          var returnFiber = fiber.return;
          var returnAlternate = returnFiber !== null ? returnFiber.alternate : null;

          if (trackedPathMatchFiber === returnFiber || trackedPathMatchFiber === returnAlternate && returnAlternate !== null) {
            var actualFrame = getPathFrame(fiber);
            var expectedFrame = trackedPath[trackedPathMatchDepth + 1];

            if (expectedFrame === undefined) {
              throw new Error('Expected to see a frame at the next depth.');
            }

            if (actualFrame.index === expectedFrame.index && actualFrame.key === expectedFrame.key && actualFrame.displayName === expectedFrame.displayName) {
              trackedPathMatchFiber = fiber;
              trackedPathMatchDepth++;

              if (trackedPathMatchDepth === trackedPath.length - 1) {
                mightBeOnTrackedPath = false;
              } else {
                mightBeOnTrackedPath = true;
              }

              return false;
            }
          }

          mightBeOnTrackedPath = false;
          return true;
        }

        function updateTrackedPathStateAfterMount(mightSiblingsBeOnTrackedPath) {
          mightBeOnTrackedPath = mightSiblingsBeOnTrackedPath;
        }

        var rootPseudoKeys = new Map();
        var rootDisplayNameCounter = new Map();

        function setRootPseudoKey(id, fiber) {
          var name = getDisplayNameForRoot(fiber);
          var counter = rootDisplayNameCounter.get(name) || 0;
          rootDisplayNameCounter.set(name, counter + 1);
          var pseudoKey = "".concat(name, ":").concat(counter);
          rootPseudoKeys.set(id, pseudoKey);
        }

        function removeRootPseudoKey(id) {
          var pseudoKey = rootPseudoKeys.get(id);

          if (pseudoKey === undefined) {
            throw new Error('Expected root pseudo key to be known.');
          }

          var name = pseudoKey.substring(0, pseudoKey.lastIndexOf(':'));
          var counter = rootDisplayNameCounter.get(name);

          if (counter === undefined) {
            throw new Error('Expected counter to be known.');
          }

          if (counter > 1) {
            rootDisplayNameCounter.set(name, counter - 1);
          } else {
            rootDisplayNameCounter.delete(name);
          }

          rootPseudoKeys.delete(id);
        }

        function getDisplayNameForRoot(fiber) {
          var preferredDisplayName = null;
          var fallbackDisplayName = null;
          var child = fiber.child;

          for (var i = 0; i < 3; i++) {
            if (child === null) {
              break;
            }

            var displayName = getDisplayNameForFiber(child);

            if (displayName !== null) {
              if (typeof child.type === 'function') {
                preferredDisplayName = displayName;
              } else if (fallbackDisplayName === null) {
                fallbackDisplayName = displayName;
              }
            }

            if (preferredDisplayName !== null) {
              break;
            }

            child = child.child;
          }

          return preferredDisplayName || fallbackDisplayName || 'Anonymous';
        }

        function getPathFrame(fiber) {
          var key = fiber.key;
          var displayName = getDisplayNameForFiber(fiber);
          var index = fiber.index;

          switch (fiber.tag) {
            case HostRoot:
              var id = getFiberIDThrows(fiber);
              var pseudoKey = rootPseudoKeys.get(id);

              if (pseudoKey === undefined) {
                throw new Error('Expected mounted root to have known pseudo key.');
              }

              displayName = pseudoKey;
              break;

            case HostComponent:
              displayName = fiber.type;
              break;

            default:
              break;
          }

          return {
            displayName: displayName,
            key: key,
            index: index
          };
        }

        function getPathForElement(id) {
          var fiber = idToArbitraryFiberMap.get(id);

          if (fiber == null) {
            return null;
          }

          var keyPath = [];

          while (fiber !== null) {
            keyPath.push(getPathFrame(fiber));
            fiber = fiber.return;
          }

          keyPath.reverse();
          return keyPath;
        }

        function getBestMatchForTrackedPath() {
          if (trackedPath === null) {
            return null;
          }

          if (trackedPathMatchFiber === null) {
            return null;
          }

          var fiber = trackedPathMatchFiber;

          while (fiber !== null && shouldFilterFiber(fiber)) {
            fiber = fiber.return;
          }

          if (fiber === null) {
            return null;
          }

          return {
            id: getFiberIDThrows(fiber),
            isFullMatch: trackedPathMatchDepth === trackedPath.length - 1
          };
        }

        var formatPriorityLevel = function formatPriorityLevel(priorityLevel) {
          if (priorityLevel == null) {
            return 'Unknown';
          }

          switch (priorityLevel) {
            case ImmediatePriority:
              return 'Immediate';

            case UserBlockingPriority:
              return 'User-Blocking';

            case NormalPriority:
              return 'Normal';

            case LowPriority:
              return 'Low';

            case IdlePriority:
              return 'Idle';

            case NoPriority:
            default:
              return 'Unknown';
          }
        };

        function setTraceUpdatesEnabled(isEnabled) {
          traceUpdatesEnabled = isEnabled;
        }

        return {
          cleanup: cleanup,
          clearErrorsAndWarnings: clearErrorsAndWarnings,
          clearErrorsForFiberID: clearErrorsForFiberID,
          clearWarningsForFiberID: clearWarningsForFiberID,
          copyElementPath: copyElementPath,
          deletePath: deletePath,
          findNativeNodesForFiberID: findNativeNodesForFiberID,
          flushInitialOperations: flushInitialOperations,
          getBestMatchForTrackedPath: getBestMatchForTrackedPath,
          getDisplayNameForFiberID: getDisplayNameForFiberID,
          getFiberIDForNative: getFiberIDForNative,
          getInstanceAndStyle: getInstanceAndStyle,
          getOwnersList: getOwnersList,
          getPathForElement: getPathForElement,
          getProfilingData: getProfilingData,
          handleCommitFiberRoot: handleCommitFiberRoot,
          handleCommitFiberUnmount: handleCommitFiberUnmount,
          handlePostCommitFiberRoot: handlePostCommitFiberRoot,
          inspectElement: inspectElement,
          logElementToConsole: logElementToConsole,
          prepareViewAttributeSource: prepareViewAttributeSource,
          prepareViewElementSource: prepareViewElementSource,
          overrideSuspense: overrideSuspense,
          overrideValueAtPath: overrideValueAtPath,
          renamePath: renamePath,
          renderer: renderer,
          setTraceUpdatesEnabled: setTraceUpdatesEnabled,
          setTrackedPath: setTrackedPath,
          startProfiling: startProfiling,
          stopProfiling: stopProfiling,
          storeAsGlobal: storeAsGlobal,
          updateComponentFilters: updateComponentFilters
        };
      }

      function DevToolsConsolePatching_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function DevToolsConsolePatching_objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            DevToolsConsolePatching_ownKeys(Object(source), true).forEach(function (key) {
              DevToolsConsolePatching_defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            DevToolsConsolePatching_ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function DevToolsConsolePatching_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;

      function disabledLog() {}

      disabledLog.__reactDisabledLog = true;

      function disableLogs() {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }

        disabledDepth++;
      }

      function reenableLogs() {
        disabledDepth--;

        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
              value: prevLog
            }),
            info: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
              value: prevInfo
            }),
            warn: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
              value: prevWarn
            }),
            error: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
              value: prevError
            }),
            group: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
              value: prevGroup
            }),
            groupCollapsed: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
              value: prevGroupCollapsed
            }),
            groupEnd: DevToolsConsolePatching_objectSpread(DevToolsConsolePatching_objectSpread({}, props), {}, {
              value: prevGroupEnd
            })
          });
        }

        if (disabledDepth < 0) {
          console.error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }

      function DevToolsComponentStackFrame_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          DevToolsComponentStackFrame_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          DevToolsComponentStackFrame_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return DevToolsComponentStackFrame_typeof(obj);
      }

      var prefix;

      function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) {
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        }

        return '\n' + prefix + name;
      }

      var reentry = false;
      var componentFrameCache;

      if (false) {
        var PossiblyWeakMap;
      }

      function describeNativeComponentFrame(fn, construct, currentDispatcherRef) {
        if (!fn || reentry) {
          return '';
        }

        if (false) {
          var frame;
        }

        var control;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        reentry = true;
        var previousDispatcher = currentDispatcherRef.current;
        currentDispatcherRef.current = null;
        disableLogs();

        try {
          if (construct) {
            var Fake = function Fake() {
              throw Error();
            };

            Object.defineProperty(Fake.prototype, 'props', {
              set: function set() {
                throw Error();
              }
            });

            if ((typeof Reflect === "undefined" ? "undefined" : DevToolsComponentStackFrame_typeof(Reflect)) === 'object' && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }

              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }

              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }

            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === 'string') {
            var sampleLines = sample.stack.split('\n');
            var controlLines = control.stack.split('\n');
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;

            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }

            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;

                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                      if (false) {}

                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }

                break;
              }
            }
          }
        } finally {
          reentry = false;
          Error.prepareStackTrace = previousPrepareStackTrace;
          currentDispatcherRef.current = previousDispatcher;
          reenableLogs();
        }

        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

        if (false) {}

        return syntheticFrame;
      }

      function describeClassComponentFrame(ctor, source, ownerFn, currentDispatcherRef) {
        return describeNativeComponentFrame(ctor, true, currentDispatcherRef);
      }

      function describeFunctionComponentFrame(fn, source, ownerFn, currentDispatcherRef) {
        return describeNativeComponentFrame(fn, false, currentDispatcherRef);
      }

      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }

      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn, currentDispatcherRef) {
        if (true) {
          return '';
        }

        if (type == null) {
          return '';
        }

        if (typeof type === 'function') {
          return describeNativeComponentFrame(type, shouldConstruct(type), currentDispatcherRef);
        }

        if (typeof type === 'string') {
          return describeBuiltInComponentFrame(type, source, ownerFn);
        }

        switch (type) {
          case SUSPENSE_NUMBER:
          case SUSPENSE_SYMBOL_STRING:
            return describeBuiltInComponentFrame('Suspense', source, ownerFn);

          case SUSPENSE_LIST_NUMBER:
          case SUSPENSE_LIST_SYMBOL_STRING:
            return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);
        }

        if (DevToolsComponentStackFrame_typeof(type) === 'object') {
          switch (type.$$typeof) {
            case FORWARD_REF_NUMBER:
            case FORWARD_REF_SYMBOL_STRING:
              return describeFunctionComponentFrame(type.render, source, ownerFn, currentDispatcherRef);

            case MEMO_NUMBER:
            case MEMO_SYMBOL_STRING:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn, currentDispatcherRef);

            case LAZY_NUMBER:
            case LAZY_SYMBOL_STRING:
              {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;

                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn, currentDispatcherRef);
                } catch (x) {}
              }
          }
        }

        return '';
      }

      function describeFiber(workTagMap, workInProgress, currentDispatcherRef) {
        var HostComponent = workTagMap.HostComponent,
            LazyComponent = workTagMap.LazyComponent,
            SuspenseComponent = workTagMap.SuspenseComponent,
            SuspenseListComponent = workTagMap.SuspenseListComponent,
            FunctionComponent = workTagMap.FunctionComponent,
            IndeterminateComponent = workTagMap.IndeterminateComponent,
            SimpleMemoComponent = workTagMap.SimpleMemoComponent,
            ForwardRef = workTagMap.ForwardRef,
            ClassComponent = workTagMap.ClassComponent;
        var owner = false ? undefined : null;
        var source = false ? undefined : null;

        switch (workInProgress.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(workInProgress.type, source, owner);

          case LazyComponent:
            return describeBuiltInComponentFrame('Lazy', source, owner);

          case SuspenseComponent:
            return describeBuiltInComponentFrame('Suspense', source, owner);

          case SuspenseListComponent:
            return describeBuiltInComponentFrame('SuspenseList', source, owner);

          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(workInProgress.type, source, owner, currentDispatcherRef);

          case ForwardRef:
            return describeFunctionComponentFrame(workInProgress.type.render, source, owner, currentDispatcherRef);

          case ClassComponent:
            return describeClassComponentFrame(workInProgress.type, source, owner, currentDispatcherRef);

          default:
            return '';
        }
      }

      function getStackByFiberInDevAndProd(workTagMap, workInProgress, currentDispatcherRef) {
        try {
          var info = '';
          var node = workInProgress;

          do {
            info += describeFiber(workTagMap, node, currentDispatcherRef);
            node = node.return;
          } while (node);

          return info;
        } catch (x) {
          return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
      }

      function console_createForOfIteratorHelper(o, allowArrayLike) {
        var it;

        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (Array.isArray(o) || (it = console_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;

            var F = function F() {};

            return {
              s: F,
              n: function n() {
                if (i >= o.length) return {
                  done: true
                };
                return {
                  done: false,
                  value: o[i++]
                };
              },
              e: function e(_e) {
                throw _e;
              },
              f: F
            };
          }

          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        var normalCompletion = true,
            didErr = false,
            err;
        return {
          s: function s() {
            it = o[Symbol.iterator]();
          },
          n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          },
          e: function e(_e2) {
            didErr = true;
            err = _e2;
          },
          f: function f() {
            try {
              if (!normalCompletion && it.return != null) it.return();
            } finally {
              if (didErr) throw err;
            }
          }
        };
      }

      function console_unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return console_arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return console_arrayLikeToArray(o, minLen);
      }

      function console_arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      var APPEND_STACK_TO_METHODS = ['error', 'trace', 'warn'];
      var PREFIX_REGEX = /\s{4}(in|at)\s{1}/;
      var ROW_COLUMN_NUMBER_REGEX = /:\d+:\d+(\n|$)/;

      function isStringComponentStack(text) {
        return PREFIX_REGEX.test(text) || ROW_COLUMN_NUMBER_REGEX.test(text);
      }

      var injectedRenderers = new Map();
      var targetConsole = console;
      var targetConsoleMethods = {};

      for (var console_method in console) {
        targetConsoleMethods[console_method] = console[console_method];
      }

      var unpatchFn = null;

      function dangerous_setTargetConsoleForTesting(targetConsoleForTesting) {
        targetConsole = targetConsoleForTesting;
        targetConsoleMethods = {};

        for (var _method in targetConsole) {
          targetConsoleMethods[_method] = console[_method];
        }
      }

      function registerRenderer(renderer, onErrorOrWarning) {
        var currentDispatcherRef = renderer.currentDispatcherRef,
            getCurrentFiber = renderer.getCurrentFiber,
            findFiberByHostInstance = renderer.findFiberByHostInstance,
            version = renderer.version;

        if (typeof findFiberByHostInstance !== 'function') {
          return;
        }

        if (currentDispatcherRef != null && typeof getCurrentFiber === 'function') {
          var _getInternalReactCons = getInternalReactConstants(version),
              ReactTypeOfWork = _getInternalReactCons.ReactTypeOfWork;

          injectedRenderers.set(renderer, {
            currentDispatcherRef: currentDispatcherRef,
            getCurrentFiber: getCurrentFiber,
            workTagMap: ReactTypeOfWork,
            onErrorOrWarning: onErrorOrWarning
          });
        }
      }

      var consoleSettingsRef = {
        appendComponentStack: false,
        breakOnConsoleErrors: false,
        showInlineWarningsAndErrors: false
      };

      function patch(_ref) {
        var appendComponentStack = _ref.appendComponentStack,
            breakOnConsoleErrors = _ref.breakOnConsoleErrors,
            showInlineWarningsAndErrors = _ref.showInlineWarningsAndErrors;
        consoleSettingsRef.appendComponentStack = appendComponentStack;
        consoleSettingsRef.breakOnConsoleErrors = breakOnConsoleErrors;
        consoleSettingsRef.showInlineWarningsAndErrors = showInlineWarningsAndErrors;

        if (unpatchFn !== null) {
          return;
        }

        var originalConsoleMethods = {};

        unpatchFn = function unpatchFn() {
          for (var _method2 in originalConsoleMethods) {
            try {
              targetConsole[_method2] = originalConsoleMethods[_method2];
            } catch (error) {}
          }
        };

        APPEND_STACK_TO_METHODS.forEach(function (method) {
          try {
            var originalMethod = originalConsoleMethods[method] = targetConsole[method];

            var overrideMethod = function overrideMethod() {
              var shouldAppendWarningStack = false;

              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              if (consoleSettingsRef.appendComponentStack) {
                var lastArg = args.length > 0 ? args[args.length - 1] : null;
                var alreadyHasComponentStack = typeof lastArg === 'string' && isStringComponentStack(lastArg);
                shouldAppendWarningStack = !alreadyHasComponentStack;
              }

              var shouldShowInlineWarningsAndErrors = consoleSettingsRef.showInlineWarningsAndErrors && (method === 'error' || method === 'warn');

              if (shouldAppendWarningStack || shouldShowInlineWarningsAndErrors) {
                var _iterator = console_createForOfIteratorHelper(injectedRenderers.values()),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var _step$value = _step.value,
                        currentDispatcherRef = _step$value.currentDispatcherRef,
                        getCurrentFiber = _step$value.getCurrentFiber,
                        onErrorOrWarning = _step$value.onErrorOrWarning,
                        workTagMap = _step$value.workTagMap;
                    var current = getCurrentFiber();

                    if (current != null) {
                      try {
                        if (shouldShowInlineWarningsAndErrors) {
                          if (typeof onErrorOrWarning === 'function') {
                            onErrorOrWarning(current, method, args.slice());
                          }
                        }

                        if (shouldAppendWarningStack) {
                          var componentStack = getStackByFiberInDevAndProd(workTagMap, current, currentDispatcherRef);

                          if (componentStack !== '') {
                            args.push(componentStack);
                          }
                        }
                      } catch (error) {} finally {
                        break;
                      }
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
              }

              if (consoleSettingsRef.breakOnConsoleErrors) {
                debugger;
              }

              originalMethod.apply(void 0, args);
            };

            overrideMethod.__REACT_DEVTOOLS_ORIGINAL_METHOD__ = originalMethod;
            originalMethod.__REACT_DEVTOOLS_OVERRIDE_METHOD__ = overrideMethod;
            targetConsole[method] = overrideMethod;
          } catch (error) {}
        });
      }

      function unpatch() {
        if (unpatchFn !== null) {
          unpatchFn();
          unpatchFn = null;
        }
      }

      function bridge_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          bridge_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          bridge_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return bridge_typeof(obj);
      }

      function bridge_toConsumableArray(arr) {
        return bridge_arrayWithoutHoles(arr) || bridge_iterableToArray(arr) || bridge_unsupportedIterableToArray(arr) || bridge_nonIterableSpread();
      }

      function bridge_nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function bridge_unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return bridge_arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return bridge_arrayLikeToArray(o, minLen);
      }

      function bridge_iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
      }

      function bridge_arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return bridge_arrayLikeToArray(arr);
      }

      function bridge_arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      function bridge_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function bridge_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function bridge_createClass(Constructor, protoProps, staticProps) {
        if (protoProps) bridge_defineProperties(Constructor.prototype, protoProps);
        if (staticProps) bridge_defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (bridge_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function bridge_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      var BATCH_DURATION = 100;
      var BRIDGE_PROTOCOL = [{
        version: 0,
        minNpmVersion: '"<4.11.0"',
        maxNpmVersion: '"<4.11.0"'
      }, {
        version: 1,
        minNpmVersion: '4.13.0',
        maxNpmVersion: null
      }];
      var currentBridgeProtocol = BRIDGE_PROTOCOL[BRIDGE_PROTOCOL.length - 1];

      var Bridge = function (_EventEmitter) {
        _inherits(Bridge, _EventEmitter);

        var _super = _createSuper(Bridge);

        function Bridge(wall) {
          var _this;

          bridge_classCallCheck(this, Bridge);
          _this = _super.call(this);
          bridge_defineProperty(_assertThisInitialized(_this), "_isShutdown", false);
          bridge_defineProperty(_assertThisInitialized(_this), "_messageQueue", []);
          bridge_defineProperty(_assertThisInitialized(_this), "_timeoutID", null);
          bridge_defineProperty(_assertThisInitialized(_this), "_wallUnlisten", null);
          bridge_defineProperty(_assertThisInitialized(_this), "_flush", function () {
            if (_this._timeoutID !== null) {
              clearTimeout(_this._timeoutID);
              _this._timeoutID = null;
            }

            if (_this._messageQueue.length) {
              for (var i = 0; i < _this._messageQueue.length; i += 2) {
                var _this$_wall;

                (_this$_wall = _this._wall).send.apply(_this$_wall, [_this._messageQueue[i]].concat(bridge_toConsumableArray(_this._messageQueue[i + 1])));
              }

              _this._messageQueue.length = 0;
              _this._timeoutID = setTimeout(_this._flush, BATCH_DURATION);
            }
          });
          bridge_defineProperty(_assertThisInitialized(_this), "overrideValueAtPath", function (_ref) {
            var id = _ref.id,
                path = _ref.path,
                rendererID = _ref.rendererID,
                type = _ref.type,
                value = _ref.value;

            switch (type) {
              case 'context':
                _this.send('overrideContext', {
                  id: id,
                  path: path,
                  rendererID: rendererID,
                  wasForwarded: true,
                  value: value
                });

                break;

              case 'hooks':
                _this.send('overrideHookState', {
                  id: id,
                  path: path,
                  rendererID: rendererID,
                  wasForwarded: true,
                  value: value
                });

                break;

              case 'props':
                _this.send('overrideProps', {
                  id: id,
                  path: path,
                  rendererID: rendererID,
                  wasForwarded: true,
                  value: value
                });

                break;

              case 'state':
                _this.send('overrideState', {
                  id: id,
                  path: path,
                  rendererID: rendererID,
                  wasForwarded: true,
                  value: value
                });

                break;
            }
          });
          _this._wall = wall;
          _this._wallUnlisten = wall.listen(function (message) {
            _assertThisInitialized(_this).emit(message.event, message.payload);
          }) || null;

          _this.addListener('overrideValueAtPath', _this.overrideValueAtPath);

          return _this;
        }

        bridge_createClass(Bridge, [{
          key: "send",
          value: function send(event) {
            if (this._isShutdown) {
              console.warn("Cannot send message \"".concat(event, "\" through a Bridge that has been shutdown."));
              return;
            }

            for (var _len = arguments.length, payload = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              payload[_key - 1] = arguments[_key];
            }

            this._messageQueue.push(event, payload);

            if (!this._timeoutID) {
              this._timeoutID = setTimeout(this._flush, 0);
            }
          }
        }, {
          key: "shutdown",
          value: function shutdown() {
            if (this._isShutdown) {
              console.warn('Bridge was already shutdown.');
              return;
            }

            this.send('shutdown');
            this._isShutdown = true;

            this.addListener = function () {};

            this.emit = function () {};

            this.removeAllListeners();
            var wallUnlisten = this._wallUnlisten;

            if (wallUnlisten) {
              wallUnlisten();
            }

            do {
              this._flush();
            } while (this._messageQueue.length);

            if (this._timeoutID !== null) {
              clearTimeout(this._timeoutID);
              this._timeoutID = null;
            }
          }
        }, {
          key: "wall",
          get: function get() {
            return this._wall;
          }
        }]);
        return Bridge;
      }(EventEmitter);

      var src_bridge = Bridge;

      function agent_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          agent_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          agent_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return agent_typeof(obj);
      }

      function agent_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function agent_defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function agent_createClass(Constructor, protoProps, staticProps) {
        if (protoProps) agent_defineProperties(Constructor.prototype, protoProps);
        if (staticProps) agent_defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function agent_inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) agent_setPrototypeOf(subClass, superClass);
      }

      function agent_setPrototypeOf(o, p) {
        agent_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return agent_setPrototypeOf(o, p);
      }

      function agent_createSuper(Derived) {
        var hasNativeReflectConstruct = agent_isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = agent_getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = agent_getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return agent_possibleConstructorReturn(this, result);
        };
      }

      function agent_possibleConstructorReturn(self, call) {
        if (call && (agent_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return agent_assertThisInitialized(self);
      }

      function agent_assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function agent_isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function agent_getPrototypeOf(o) {
        agent_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return agent_getPrototypeOf(o);
      }

      function agent_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      var agent_debug = function debug(methodName) {
        if (__DEBUG__) {
          var _console;

          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          (_console = console).log.apply(_console, ["%cAgent %c".concat(methodName), 'color: purple; font-weight: bold;', 'font-weight: bold;'].concat(args));
        }
      };

      var agent_Agent = function (_EventEmitter) {
        agent_inherits(Agent, _EventEmitter);

        var _super = agent_createSuper(Agent);

        function Agent(bridge) {
          var _this;

          agent_classCallCheck(this, Agent);
          _this = _super.call(this);
          agent_defineProperty(agent_assertThisInitialized(_this), "_isProfiling", false);
          agent_defineProperty(agent_assertThisInitialized(_this), "_recordChangeDescriptions", false);
          agent_defineProperty(agent_assertThisInitialized(_this), "_rendererInterfaces", {});
          agent_defineProperty(agent_assertThisInitialized(_this), "_persistedSelection", null);
          agent_defineProperty(agent_assertThisInitialized(_this), "_persistedSelectionMatch", null);
          agent_defineProperty(agent_assertThisInitialized(_this), "_traceUpdatesEnabled", false);
          agent_defineProperty(agent_assertThisInitialized(_this), "clearErrorsAndWarnings", function (_ref) {
            var rendererID = _ref.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\""));
            } else {
              renderer.clearErrorsAndWarnings();
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "clearErrorsForFiberID", function (_ref2) {
            var id = _ref2.id,
                rendererID = _ref2.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\""));
            } else {
              renderer.clearErrorsForFiberID(id);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "clearWarningsForFiberID", function (_ref3) {
            var id = _ref3.id,
                rendererID = _ref3.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\""));
            } else {
              renderer.clearWarningsForFiberID(id);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "copyElementPath", function (_ref4) {
            var id = _ref4.id,
                path = _ref4.path,
                rendererID = _ref4.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.copyElementPath(id, path);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "deletePath", function (_ref5) {
            var hookID = _ref5.hookID,
                id = _ref5.id,
                path = _ref5.path,
                rendererID = _ref5.rendererID,
                type = _ref5.type;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.deletePath(type, id, hookID, path);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "getBridgeProtocol", function () {
            _this._bridge.send('bridgeProtocol', currentBridgeProtocol);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "getProfilingData", function (_ref6) {
            var rendererID = _ref6.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\""));
            }

            _this._bridge.send('profilingData', renderer.getProfilingData());
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "getProfilingStatus", function () {
            _this._bridge.send('profilingStatus', _this._isProfiling);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "getOwnersList", function (_ref7) {
            var id = _ref7.id,
                rendererID = _ref7.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              var owners = renderer.getOwnersList(id);

              _this._bridge.send('ownersList', {
                id: id,
                owners: owners
              });
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "inspectElement", function (_ref8) {
            var id = _ref8.id,
                path = _ref8.path,
                rendererID = _ref8.rendererID,
                requestID = _ref8.requestID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              _this._bridge.send('inspectedElement', renderer.inspectElement(requestID, id, path));

              if (_this._persistedSelectionMatch === null || _this._persistedSelectionMatch.id !== id) {
                _this._persistedSelection = null;
                _this._persistedSelectionMatch = null;
                renderer.setTrackedPath(null);

                _this._throttledPersistSelection(rendererID, id);
              }
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "logElementToConsole", function (_ref9) {
            var id = _ref9.id,
                rendererID = _ref9.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.logElementToConsole(id);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideSuspense", function (_ref10) {
            var id = _ref10.id,
                rendererID = _ref10.rendererID,
                forceFallback = _ref10.forceFallback;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.overrideSuspense(id, forceFallback);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideValueAtPath", function (_ref11) {
            var hookID = _ref11.hookID,
                id = _ref11.id,
                path = _ref11.path,
                rendererID = _ref11.rendererID,
                type = _ref11.type,
                value = _ref11.value;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.overrideValueAtPath(type, id, hookID, path, value);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideContext", function (_ref12) {
            var id = _ref12.id,
                path = _ref12.path,
                rendererID = _ref12.rendererID,
                wasForwarded = _ref12.wasForwarded,
                value = _ref12.value;

            if (!wasForwarded) {
              _this.overrideValueAtPath({
                id: id,
                path: path,
                rendererID: rendererID,
                type: 'context',
                value: value
              });
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideHookState", function (_ref13) {
            var id = _ref13.id,
                hookID = _ref13.hookID,
                path = _ref13.path,
                rendererID = _ref13.rendererID,
                wasForwarded = _ref13.wasForwarded,
                value = _ref13.value;

            if (!wasForwarded) {
              _this.overrideValueAtPath({
                id: id,
                path: path,
                rendererID: rendererID,
                type: 'hooks',
                value: value
              });
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideProps", function (_ref14) {
            var id = _ref14.id,
                path = _ref14.path,
                rendererID = _ref14.rendererID,
                wasForwarded = _ref14.wasForwarded,
                value = _ref14.value;

            if (!wasForwarded) {
              _this.overrideValueAtPath({
                id: id,
                path: path,
                rendererID: rendererID,
                type: 'props',
                value: value
              });
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "overrideState", function (_ref15) {
            var id = _ref15.id,
                path = _ref15.path,
                rendererID = _ref15.rendererID,
                wasForwarded = _ref15.wasForwarded,
                value = _ref15.value;

            if (!wasForwarded) {
              _this.overrideValueAtPath({
                id: id,
                path: path,
                rendererID: rendererID,
                type: 'state',
                value: value
              });
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "reloadAndProfile", function (recordChangeDescriptions) {
            sessionStorageSetItem(SESSION_STORAGE_RELOAD_AND_PROFILE_KEY, 'true');
            sessionStorageSetItem(SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY, recordChangeDescriptions ? 'true' : 'false');

            _this._bridge.send('reloadAppForProfiling');
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "renamePath", function (_ref16) {
            var hookID = _ref16.hookID,
                id = _ref16.id,
                newPath = _ref16.newPath,
                oldPath = _ref16.oldPath,
                rendererID = _ref16.rendererID,
                type = _ref16.type;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.renamePath(type, id, hookID, oldPath, newPath);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "setTraceUpdatesEnabled", function (traceUpdatesEnabled) {
            _this._traceUpdatesEnabled = traceUpdatesEnabled;
            toggleEnabled(traceUpdatesEnabled);

            for (var rendererID in _this._rendererInterfaces) {
              var renderer = _this._rendererInterfaces[rendererID];
              renderer.setTraceUpdatesEnabled(traceUpdatesEnabled);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "syncSelectionFromNativeElementsPanel", function () {
            var target = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;

            if (target == null) {
              return;
            }

            _this.selectNode(target);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "shutdown", function () {
            _this.emit('shutdown');
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "startProfiling", function (recordChangeDescriptions) {
            _this._recordChangeDescriptions = recordChangeDescriptions;
            _this._isProfiling = true;

            for (var rendererID in _this._rendererInterfaces) {
              var renderer = _this._rendererInterfaces[rendererID];
              renderer.startProfiling(recordChangeDescriptions);
            }

            _this._bridge.send('profilingStatus', _this._isProfiling);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "stopProfiling", function () {
            _this._isProfiling = false;
            _this._recordChangeDescriptions = false;

            for (var rendererID in _this._rendererInterfaces) {
              var renderer = _this._rendererInterfaces[rendererID];
              renderer.stopProfiling();
            }

            _this._bridge.send('profilingStatus', _this._isProfiling);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "storeAsGlobal", function (_ref17) {
            var count = _ref17.count,
                id = _ref17.id,
                path = _ref17.path,
                rendererID = _ref17.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.storeAsGlobal(id, path, count);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "updateConsolePatchSettings", function (_ref18) {
            var appendComponentStack = _ref18.appendComponentStack,
                breakOnConsoleErrors = _ref18.breakOnConsoleErrors,
                showInlineWarningsAndErrors = _ref18.showInlineWarningsAndErrors;

            if (appendComponentStack || breakOnConsoleErrors || showInlineWarningsAndErrors) {
              patch({
                appendComponentStack: appendComponentStack,
                breakOnConsoleErrors: breakOnConsoleErrors,
                showInlineWarningsAndErrors: showInlineWarningsAndErrors
              });
            } else {
              unpatch();
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "updateComponentFilters", function (componentFilters) {
            for (var rendererID in _this._rendererInterfaces) {
              var renderer = _this._rendererInterfaces[rendererID];
              renderer.updateComponentFilters(componentFilters);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "viewAttributeSource", function (_ref19) {
            var id = _ref19.id,
                path = _ref19.path,
                rendererID = _ref19.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.prepareViewAttributeSource(id, path);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "viewElementSource", function (_ref20) {
            var id = _ref20.id,
                rendererID = _ref20.rendererID;
            var renderer = _this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\" for element \"").concat(id, "\""));
            } else {
              renderer.prepareViewElementSource(id);
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "onTraceUpdates", function (nodes) {
            _this.emit('traceUpdates', nodes);
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "onHookOperations", function (operations) {
            if (__DEBUG__) {
              agent_debug('onHookOperations', "(".concat(operations.length, ") [").concat(operations.join(', '), "]"));
            }

            _this._bridge.send('operations', operations);

            if (_this._persistedSelection !== null) {
              var rendererID = operations[0];

              if (_this._persistedSelection.rendererID === rendererID) {
                var renderer = _this._rendererInterfaces[rendererID];

                if (renderer == null) {
                  console.warn("Invalid renderer id \"".concat(rendererID, "\""));
                } else {
                  var prevMatch = _this._persistedSelectionMatch;
                  var nextMatch = renderer.getBestMatchForTrackedPath();
                  _this._persistedSelectionMatch = nextMatch;
                  var prevMatchID = prevMatch !== null ? prevMatch.id : null;
                  var nextMatchID = nextMatch !== null ? nextMatch.id : null;

                  if (prevMatchID !== nextMatchID) {
                    if (nextMatchID !== null) {
                      _this._bridge.send('selectFiber', nextMatchID);
                    }
                  }

                  if (nextMatch !== null && nextMatch.isFullMatch) {
                    _this._persistedSelection = null;
                    _this._persistedSelectionMatch = null;
                    renderer.setTrackedPath(null);
                  }
                }
              }
            }
          });
          agent_defineProperty(agent_assertThisInitialized(_this), "_throttledPersistSelection", lodash_throttle_default()(function (rendererID, id) {
            var renderer = _this._rendererInterfaces[rendererID];
            var path = renderer != null ? renderer.getPathForElement(id) : null;

            if (path !== null) {
              sessionStorageSetItem(SESSION_STORAGE_LAST_SELECTION_KEY, JSON.stringify({
                rendererID: rendererID,
                path: path
              }));
            } else {
              sessionStorageRemoveItem(SESSION_STORAGE_LAST_SELECTION_KEY);
            }
          }, 1000));

          if (sessionStorageGetItem(SESSION_STORAGE_RELOAD_AND_PROFILE_KEY) === 'true') {
            _this._recordChangeDescriptions = sessionStorageGetItem(SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY) === 'true';
            _this._isProfiling = true;
            sessionStorageRemoveItem(SESSION_STORAGE_RECORD_CHANGE_DESCRIPTIONS_KEY);
            sessionStorageRemoveItem(SESSION_STORAGE_RELOAD_AND_PROFILE_KEY);
          }

          var persistedSelectionString = sessionStorageGetItem(SESSION_STORAGE_LAST_SELECTION_KEY);

          if (persistedSelectionString != null) {
            _this._persistedSelection = JSON.parse(persistedSelectionString);
          }

          _this._bridge = bridge;
          bridge.addListener('clearErrorsAndWarnings', _this.clearErrorsAndWarnings);
          bridge.addListener('clearErrorsForFiberID', _this.clearErrorsForFiberID);
          bridge.addListener('clearWarningsForFiberID', _this.clearWarningsForFiberID);
          bridge.addListener('copyElementPath', _this.copyElementPath);
          bridge.addListener('deletePath', _this.deletePath);
          bridge.addListener('getBridgeProtocol', _this.getBridgeProtocol);
          bridge.addListener('getProfilingData', _this.getProfilingData);
          bridge.addListener('getProfilingStatus', _this.getProfilingStatus);
          bridge.addListener('getOwnersList', _this.getOwnersList);
          bridge.addListener('inspectElement', _this.inspectElement);
          bridge.addListener('logElementToConsole', _this.logElementToConsole);
          bridge.addListener('overrideSuspense', _this.overrideSuspense);
          bridge.addListener('overrideValueAtPath', _this.overrideValueAtPath);
          bridge.addListener('reloadAndProfile', _this.reloadAndProfile);
          bridge.addListener('renamePath', _this.renamePath);
          bridge.addListener('setTraceUpdatesEnabled', _this.setTraceUpdatesEnabled);
          bridge.addListener('startProfiling', _this.startProfiling);
          bridge.addListener('stopProfiling', _this.stopProfiling);
          bridge.addListener('storeAsGlobal', _this.storeAsGlobal);
          bridge.addListener('syncSelectionFromNativeElementsPanel', _this.syncSelectionFromNativeElementsPanel);
          bridge.addListener('shutdown', _this.shutdown);
          bridge.addListener('updateConsolePatchSettings', _this.updateConsolePatchSettings);
          bridge.addListener('updateComponentFilters', _this.updateComponentFilters);
          bridge.addListener('viewAttributeSource', _this.viewAttributeSource);
          bridge.addListener('viewElementSource', _this.viewElementSource);
          bridge.addListener('overrideContext', _this.overrideContext);
          bridge.addListener('overrideHookState', _this.overrideHookState);
          bridge.addListener('overrideProps', _this.overrideProps);
          bridge.addListener('overrideState', _this.overrideState);

          if (_this._isProfiling) {
            bridge.send('profilingStatus', true);
          }

          var isBackendStorageAPISupported = false;

          try {
            localStorage.getItem('test');
            isBackendStorageAPISupported = true;
          } catch (error) {}

          bridge.send('isBackendStorageAPISupported', isBackendStorageAPISupported);
          bridge.send('isSynchronousXHRSupported', isSynchronousXHRSupported());
          setupHighlighter(bridge, agent_assertThisInitialized(_this));
          TraceUpdates_initialize(agent_assertThisInitialized(_this));
          return _this;
        }

        agent_createClass(Agent, [{
          key: "getInstanceAndStyle",
          value: function getInstanceAndStyle(_ref21) {
            var id = _ref21.id,
                rendererID = _ref21.rendererID;
            var renderer = this._rendererInterfaces[rendererID];

            if (renderer == null) {
              console.warn("Invalid renderer id \"".concat(rendererID, "\""));
              return null;
            }

            return renderer.getInstanceAndStyle(id);
          }
        }, {
          key: "getIDForNode",
          value: function getIDForNode(node) {
            for (var rendererID in this._rendererInterfaces) {
              var renderer = this._rendererInterfaces[rendererID];

              try {
                var id = renderer.getFiberIDForNative(node, true);

                if (id !== null) {
                  return id;
                }
              } catch (error) {}
            }

            return null;
          }
        }, {
          key: "selectNode",
          value: function selectNode(target) {
            var id = this.getIDForNode(target);

            if (id !== null) {
              this._bridge.send('selectFiber', id);
            }
          }
        }, {
          key: "setRendererInterface",
          value: function setRendererInterface(rendererID, rendererInterface) {
            this._rendererInterfaces[rendererID] = rendererInterface;

            if (this._isProfiling) {
              rendererInterface.startProfiling(this._recordChangeDescriptions);
            }

            rendererInterface.setTraceUpdatesEnabled(this._traceUpdatesEnabled);
            var selection = this._persistedSelection;

            if (selection !== null && selection.rendererID === rendererID) {
              rendererInterface.setTrackedPath(selection.path);
            }
          }
        }, {
          key: "onUnsupportedRenderer",
          value: function onUnsupportedRenderer(rendererID) {
            this._bridge.send('unsupportedRendererVersion', rendererID);
          }
        }, {
          key: "rendererInterfaces",
          get: function get() {
            return this._rendererInterfaces;
          }
        }]);
        return Agent;
      }(EventEmitter);

      function installHook(target) {
        if (target.hasOwnProperty('__REACT_DEVTOOLS_GLOBAL_HOOK__')) {
          return null;
        }

        function detectReactBuildType(renderer) {
          try {
            if (typeof renderer.version === 'string') {
              if (renderer.bundleType > 0) {
                return 'development';
              }

              return 'production';
            }

            var _toString = Function.prototype.toString;

            if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
              var renderRootCode = _toString.call(renderer.Mount._renderNewRootComponent);

              if (renderRootCode.indexOf('function') !== 0) {
                return 'production';
              }

              if (renderRootCode.indexOf('storedMeasure') !== -1) {
                return 'development';
              }

              if (renderRootCode.indexOf('should be a pure function') !== -1) {
                if (renderRootCode.indexOf('NODE_ENV') !== -1) {
                  return 'development';
                }

                if (renderRootCode.indexOf('development') !== -1) {
                  return 'development';
                }

                if (renderRootCode.indexOf('true') !== -1) {
                  return 'development';
                }

                if (renderRootCode.indexOf('nextElement') !== -1 || renderRootCode.indexOf('nextComponent') !== -1) {
                  return 'unminified';
                } else {
                  return 'development';
                }
              }

              if (renderRootCode.indexOf('nextElement') !== -1 || renderRootCode.indexOf('nextComponent') !== -1) {
                return 'unminified';
              }

              return 'outdated';
            }
          } catch (err) {}

          return 'production';
        }

        function checkDCE(fn) {
          try {
            var _toString2 = Function.prototype.toString;

            var code = _toString2.call(fn);

            if (code.indexOf('^_^') > -1) {
              hasDetectedBadDCE = true;
              setTimeout(function () {
                throw new Error('React is running in production mode, but dead code ' + 'elimination has not been applied. Read how to correctly ' + 'configure React for production: ' + 'https://reactjs.org/link/perf-use-production-build');
              });
            }
          } catch (err) {}
        }

        var uidCounter = 0;

        function inject(renderer) {
          var id = ++uidCounter;
          renderers.set(id, renderer);
          var reactBuildType = hasDetectedBadDCE ? 'deadcode' : detectReactBuildType(renderer);

          if (true) {
            try {
              var appendComponentStack = window.__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__ !== false;
              var breakOnConsoleErrors = window.__REACT_DEVTOOLS_BREAK_ON_CONSOLE_ERRORS__ === true;
              var showInlineWarningsAndErrors = window.__REACT_DEVTOOLS_SHOW_INLINE_WARNINGS_AND_ERRORS__ !== false;

              if (appendComponentStack || breakOnConsoleErrors || showInlineWarningsAndErrors) {
                registerRenderer(renderer);
                patch({
                  appendComponentStack: appendComponentStack,
                  breakOnConsoleErrors: breakOnConsoleErrors,
                  showInlineWarningsAndErrors: showInlineWarningsAndErrors
                });
              }
            } catch (error) {}
          }

          var attach = target.__REACT_DEVTOOLS_ATTACH__;

          if (typeof attach === 'function') {
            var rendererInterface = attach(hook, id, renderer, target);
            hook.rendererInterfaces.set(id, rendererInterface);
          }

          hook.emit('renderer', {
            id: id,
            renderer: renderer,
            reactBuildType: reactBuildType
          });
          return id;
        }

        var hasDetectedBadDCE = false;

        function sub(event, fn) {
          hook.on(event, fn);
          return function () {
            return hook.off(event, fn);
          };
        }

        function on(event, fn) {
          if (!listeners[event]) {
            listeners[event] = [];
          }

          listeners[event].push(fn);
        }

        function off(event, fn) {
          if (!listeners[event]) {
            return;
          }

          var index = listeners[event].indexOf(fn);

          if (index !== -1) {
            listeners[event].splice(index, 1);
          }

          if (!listeners[event].length) {
            delete listeners[event];
          }
        }

        function emit(event, data) {
          if (listeners[event]) {
            listeners[event].map(function (fn) {
              return fn(data);
            });
          }
        }

        function getFiberRoots(rendererID) {
          var roots = fiberRoots;

          if (!roots[rendererID]) {
            roots[rendererID] = new Set();
          }

          return roots[rendererID];
        }

        function onCommitFiberUnmount(rendererID, fiber) {
          var rendererInterface = rendererInterfaces.get(rendererID);

          if (rendererInterface != null) {
            rendererInterface.handleCommitFiberUnmount(fiber);
          }
        }

        function onCommitFiberRoot(rendererID, root, priorityLevel) {
          var mountedRoots = hook.getFiberRoots(rendererID);
          var current = root.current;
          var isKnownRoot = mountedRoots.has(root);
          var isUnmounting = current.memoizedState == null || current.memoizedState.element == null;

          if (!isKnownRoot && !isUnmounting) {
            mountedRoots.add(root);
          } else if (isKnownRoot && isUnmounting) {
            mountedRoots.delete(root);
          }

          var rendererInterface = rendererInterfaces.get(rendererID);

          if (rendererInterface != null) {
            rendererInterface.handleCommitFiberRoot(root, priorityLevel);
          }
        }

        function onPostCommitFiberRoot(rendererID, root) {
          var rendererInterface = rendererInterfaces.get(rendererID);

          if (rendererInterface != null) {
            rendererInterface.handlePostCommitFiberRoot(root);
          }
        }

        var fiberRoots = {};
        var rendererInterfaces = new Map();
        var listeners = {};
        var renderers = new Map();
        var hook = {
          rendererInterfaces: rendererInterfaces,
          listeners: listeners,
          renderers: renderers,
          emit: emit,
          getFiberRoots: getFiberRoots,
          inject: inject,
          on: on,
          off: off,
          sub: sub,
          supportsFiber: true,
          checkDCE: checkDCE,
          onCommitFiberUnmount: onCommitFiberUnmount,
          onCommitFiberRoot: onCommitFiberRoot,
          onPostCommitFiberRoot: onPostCommitFiberRoot
        };
        Object.defineProperty(target, '__REACT_DEVTOOLS_GLOBAL_HOOK__', {
          configurable: false,
          enumerable: false,
          get: function get() {
            return hook;
          }
        });
        return hook;
      }

      function decorate(object, attr, fn) {
        var old = object[attr];

        object[attr] = function (instance) {
          return fn.call(this, old, arguments);
        };

        return old;
      }

      function decorateMany(source, fns) {
        var olds = {};

        for (var name in fns) {
          olds[name] = decorate(source, name, fns[name]);
        }

        return olds;
      }

      function restoreMany(source, olds) {
        for (var name in olds) {
          source[name] = olds[name];
        }
      }

      function forceUpdate(instance) {
        if (typeof instance.forceUpdate === 'function') {
          instance.forceUpdate();
        } else if (instance.updater != null && typeof instance.updater.enqueueForceUpdate === 'function') {
          instance.updater.enqueueForceUpdate(this, function () {}, 'forceUpdate');
        }
      }

      function legacy_renderer_ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function legacy_renderer_objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            legacy_renderer_ownKeys(Object(source), true).forEach(function (key) {
              legacy_renderer_defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            legacy_renderer_ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function legacy_renderer_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function legacy_renderer_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          legacy_renderer_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          legacy_renderer_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return legacy_renderer_typeof(obj);
      }

      function getData(internalInstance) {
        var displayName = null;
        var key = null;

        if (internalInstance._currentElement != null) {
          if (internalInstance._currentElement.key) {
            key = '' + internalInstance._currentElement.key;
          }

          var elementType = internalInstance._currentElement.type;

          if (typeof elementType === 'string') {
            displayName = elementType;
          } else if (typeof elementType === 'function') {
            displayName = getDisplayName(elementType);
          }
        }

        return {
          displayName: displayName,
          key: key
        };
      }

      function getElementType(internalInstance) {
        if (internalInstance._currentElement != null) {
          var elementType = internalInstance._currentElement.type;

          if (typeof elementType === 'function') {
            var publicInstance = internalInstance.getPublicInstance();

            if (publicInstance !== null) {
              return ElementTypeClass;
            } else {
              return ElementTypeFunction;
            }
          } else if (typeof elementType === 'string') {
            return ElementTypeHostComponent;
          }
        }

        return ElementTypeOtherOrUnknown;
      }

      function getChildren(internalInstance) {
        var children = [];

        if (legacy_renderer_typeof(internalInstance) !== 'object') {} else if (internalInstance._currentElement === null || internalInstance._currentElement === false) {} else if (internalInstance._renderedComponent) {
          var child = internalInstance._renderedComponent;

          if (getElementType(child) !== ElementTypeOtherOrUnknown) {
            children.push(child);
          }
        } else if (internalInstance._renderedChildren) {
          var renderedChildren = internalInstance._renderedChildren;

          for (var name in renderedChildren) {
            var _child = renderedChildren[name];

            if (getElementType(_child) !== ElementTypeOtherOrUnknown) {
              children.push(_child);
            }
          }
        }

        return children;
      }

      function legacy_renderer_attach(hook, rendererID, renderer, global) {
        var idToInternalInstanceMap = new Map();
        var internalInstanceToIDMap = new WeakMap();
        var internalInstanceToRootIDMap = new WeakMap();
        var getInternalIDForNative = null;
        var findNativeNodeForInternalID;

        if (renderer.ComponentTree) {
          getInternalIDForNative = function getInternalIDForNative(node, findNearestUnfilteredAncestor) {
            var internalInstance = renderer.ComponentTree.getClosestInstanceFromNode(node);
            return internalInstanceToIDMap.get(internalInstance) || null;
          };

          findNativeNodeForInternalID = function findNativeNodeForInternalID(id) {
            var internalInstance = idToInternalInstanceMap.get(id);
            return renderer.ComponentTree.getNodeFromInstance(internalInstance);
          };
        } else if (renderer.Mount.getID && renderer.Mount.getNode) {
          getInternalIDForNative = function getInternalIDForNative(node, findNearestUnfilteredAncestor) {
            return null;
          };

          findNativeNodeForInternalID = function findNativeNodeForInternalID(id) {
            return null;
          };
        }

        function getDisplayNameForFiberID(id) {
          var internalInstance = idToInternalInstanceMap.get(id);
          return internalInstance ? getData(internalInstance).displayName : null;
        }

        function getID(internalInstance) {
          if (legacy_renderer_typeof(internalInstance) !== 'object' || internalInstance === null) {
            throw new Error('Invalid internal instance: ' + internalInstance);
          }

          if (!internalInstanceToIDMap.has(internalInstance)) {
            var _id = getUID();

            internalInstanceToIDMap.set(internalInstance, _id);
            idToInternalInstanceMap.set(_id, internalInstance);
          }

          return internalInstanceToIDMap.get(internalInstance);
        }

        function areEqualArrays(a, b) {
          if (a.length !== b.length) {
            return false;
          }

          for (var i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
              return false;
            }
          }

          return true;
        }

        var parentIDStack = [];
        var oldReconcilerMethods = null;

        if (renderer.Reconciler) {
          oldReconcilerMethods = decorateMany(renderer.Reconciler, {
            mountComponent: function mountComponent(fn, args) {
              var internalInstance = args[0];
              var hostContainerInfo = args[3];

              if (getElementType(internalInstance) === ElementTypeOtherOrUnknown) {
                return fn.apply(this, args);
              }

              if (hostContainerInfo._topLevelWrapper === undefined) {
                return fn.apply(this, args);
              }

              var id = getID(internalInstance);
              var parentID = parentIDStack.length > 0 ? parentIDStack[parentIDStack.length - 1] : 0;
              recordMount(internalInstance, id, parentID);
              parentIDStack.push(id);
              internalInstanceToRootIDMap.set(internalInstance, getID(hostContainerInfo._topLevelWrapper));

              try {
                var result = fn.apply(this, args);
                parentIDStack.pop();
                return result;
              } catch (err) {
                parentIDStack = [];
                throw err;
              } finally {
                if (parentIDStack.length === 0) {
                  var rootID = internalInstanceToRootIDMap.get(internalInstance);

                  if (rootID === undefined) {
                    throw new Error('Expected to find root ID.');
                  }

                  flushPendingEvents(rootID);
                }
              }
            },
            performUpdateIfNecessary: function performUpdateIfNecessary(fn, args) {
              var internalInstance = args[0];

              if (getElementType(internalInstance) === ElementTypeOtherOrUnknown) {
                return fn.apply(this, args);
              }

              var id = getID(internalInstance);
              parentIDStack.push(id);
              var prevChildren = getChildren(internalInstance);

              try {
                var result = fn.apply(this, args);
                var nextChildren = getChildren(internalInstance);

                if (!areEqualArrays(prevChildren, nextChildren)) {
                  recordReorder(internalInstance, id, nextChildren);
                }

                parentIDStack.pop();
                return result;
              } catch (err) {
                parentIDStack = [];
                throw err;
              } finally {
                if (parentIDStack.length === 0) {
                  var rootID = internalInstanceToRootIDMap.get(internalInstance);

                  if (rootID === undefined) {
                    throw new Error('Expected to find root ID.');
                  }

                  flushPendingEvents(rootID);
                }
              }
            },
            receiveComponent: function receiveComponent(fn, args) {
              var internalInstance = args[0];

              if (getElementType(internalInstance) === ElementTypeOtherOrUnknown) {
                return fn.apply(this, args);
              }

              var id = getID(internalInstance);
              parentIDStack.push(id);
              var prevChildren = getChildren(internalInstance);

              try {
                var result = fn.apply(this, args);
                var nextChildren = getChildren(internalInstance);

                if (!areEqualArrays(prevChildren, nextChildren)) {
                  recordReorder(internalInstance, id, nextChildren);
                }

                parentIDStack.pop();
                return result;
              } catch (err) {
                parentIDStack = [];
                throw err;
              } finally {
                if (parentIDStack.length === 0) {
                  var rootID = internalInstanceToRootIDMap.get(internalInstance);

                  if (rootID === undefined) {
                    throw new Error('Expected to find root ID.');
                  }

                  flushPendingEvents(rootID);
                }
              }
            },
            unmountComponent: function unmountComponent(fn, args) {
              var internalInstance = args[0];

              if (getElementType(internalInstance) === ElementTypeOtherOrUnknown) {
                return fn.apply(this, args);
              }

              var id = getID(internalInstance);
              parentIDStack.push(id);

              try {
                var result = fn.apply(this, args);
                parentIDStack.pop();
                recordUnmount(internalInstance, id);
                return result;
              } catch (err) {
                parentIDStack = [];
                throw err;
              } finally {
                if (parentIDStack.length === 0) {
                  var rootID = internalInstanceToRootIDMap.get(internalInstance);

                  if (rootID === undefined) {
                    throw new Error('Expected to find root ID.');
                  }

                  flushPendingEvents(rootID);
                }
              }
            }
          });
        }

        function cleanup() {
          if (oldReconcilerMethods !== null) {
            if (renderer.Component) {
              restoreMany(renderer.Component.Mixin, oldReconcilerMethods);
            } else {
              restoreMany(renderer.Reconciler, oldReconcilerMethods);
            }
          }

          oldReconcilerMethods = null;
        }

        function recordMount(internalInstance, id, parentID) {
          var isRoot = parentID === 0;

          if (__DEBUG__) {
            console.log('%crecordMount()', 'color: green; font-weight: bold;', id, getData(internalInstance).displayName);
          }

          if (isRoot) {
            var hasOwnerMetadata = internalInstance._currentElement != null && internalInstance._currentElement._owner != null;
            pushOperation(TREE_OPERATION_ADD);
            pushOperation(id);
            pushOperation(ElementTypeRoot);
            pushOperation(0);
            pushOperation(hasOwnerMetadata ? 1 : 0);
          } else {
            var type = getElementType(internalInstance);

            var _getData = getData(internalInstance),
                displayName = _getData.displayName,
                key = _getData.key;

            var ownerID = internalInstance._currentElement != null && internalInstance._currentElement._owner != null ? getID(internalInstance._currentElement._owner) : 0;
            var displayNameStringID = getStringID(displayName);
            var keyStringID = getStringID(key);
            pushOperation(TREE_OPERATION_ADD);
            pushOperation(id);
            pushOperation(type);
            pushOperation(parentID);
            pushOperation(ownerID);
            pushOperation(displayNameStringID);
            pushOperation(keyStringID);
          }
        }

        function recordReorder(internalInstance, id, nextChildren) {
          pushOperation(TREE_OPERATION_REORDER_CHILDREN);
          pushOperation(id);
          var nextChildIDs = nextChildren.map(getID);
          pushOperation(nextChildIDs.length);

          for (var i = 0; i < nextChildIDs.length; i++) {
            pushOperation(nextChildIDs[i]);
          }
        }

        function recordUnmount(internalInstance, id) {
          pendingUnmountedIDs.push(id);
          idToInternalInstanceMap.delete(id);
        }

        function crawlAndRecordInitialMounts(id, parentID, rootID) {
          if (__DEBUG__) {
            console.group('crawlAndRecordInitialMounts() id:', id);
          }

          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance != null) {
            internalInstanceToRootIDMap.set(internalInstance, rootID);
            recordMount(internalInstance, id, parentID);
            getChildren(internalInstance).forEach(function (child) {
              return crawlAndRecordInitialMounts(getID(child), id, rootID);
            });
          }

          if (__DEBUG__) {
            console.groupEnd();
          }
        }

        function flushInitialOperations() {
          var roots = renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID;

          for (var key in roots) {
            var internalInstance = roots[key];

            var _id2 = getID(internalInstance);

            crawlAndRecordInitialMounts(_id2, 0, _id2);
            flushPendingEvents(_id2);
          }
        }

        var pendingOperations = [];
        var pendingStringTable = new Map();
        var pendingUnmountedIDs = [];
        var pendingStringTableLength = 0;
        var pendingUnmountedRootID = null;

        function flushPendingEvents(rootID) {
          if (pendingOperations.length === 0 && pendingUnmountedIDs.length === 0 && pendingUnmountedRootID === null) {
            return;
          }

          var numUnmountIDs = pendingUnmountedIDs.length + (pendingUnmountedRootID === null ? 0 : 1);
          var operations = new Array(2 + 1 + pendingStringTableLength + (numUnmountIDs > 0 ? 2 + numUnmountIDs : 0) + pendingOperations.length);
          var i = 0;
          operations[i++] = rendererID;
          operations[i++] = rootID;
          operations[i++] = pendingStringTableLength;
          pendingStringTable.forEach(function (value, key) {
            operations[i++] = key.length;
            var encodedKey = utfEncodeString(key);

            for (var j = 0; j < encodedKey.length; j++) {
              operations[i + j] = encodedKey[j];
            }

            i += key.length;
          });

          if (numUnmountIDs > 0) {
            operations[i++] = TREE_OPERATION_REMOVE;
            operations[i++] = numUnmountIDs;

            for (var j = 0; j < pendingUnmountedIDs.length; j++) {
              operations[i++] = pendingUnmountedIDs[j];
            }

            if (pendingUnmountedRootID !== null) {
              operations[i] = pendingUnmountedRootID;
              i++;
            }
          }

          for (var _j = 0; _j < pendingOperations.length; _j++) {
            operations[i + _j] = pendingOperations[_j];
          }

          i += pendingOperations.length;

          if (__DEBUG__) {
            printOperationsArray(operations);
          }

          hook.emit('operations', operations);
          pendingOperations.length = 0;
          pendingUnmountedIDs = [];
          pendingUnmountedRootID = null;
          pendingStringTable.clear();
          pendingStringTableLength = 0;
        }

        function pushOperation(op) {
          if (false) {}

          pendingOperations.push(op);
        }

        function getStringID(str) {
          if (str === null) {
            return 0;
          }

          var existingID = pendingStringTable.get(str);

          if (existingID !== undefined) {
            return existingID;
          }

          var stringID = pendingStringTable.size + 1;
          pendingStringTable.set(str, stringID);
          pendingStringTableLength += str.length + 1;
          return stringID;
        }

        var currentlyInspectedElementID = null;
        var currentlyInspectedPaths = {};

        function mergeInspectedPaths(path) {
          var current = currentlyInspectedPaths;
          path.forEach(function (key) {
            if (!current[key]) {
              current[key] = {};
            }

            current = current[key];
          });
        }

        function createIsPathAllowed(key) {
          return function isPathAllowed(path) {
            var current = currentlyInspectedPaths[key];

            if (!current) {
              return false;
            }

            for (var i = 0; i < path.length; i++) {
              current = current[path[i]];

              if (!current) {
                return false;
              }
            }

            return true;
          };
        }

        function getInstanceAndStyle(id) {
          var instance = null;
          var style = null;
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance != null) {
            instance = internalInstance._instance || null;
            var element = internalInstance._currentElement;

            if (element != null && element.props != null) {
              style = element.props.style || null;
            }
          }

          return {
            instance: instance,
            style: style
          };
        }

        function updateSelectedElement(id) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance == null) {
            console.warn("Could not find instance with id \"".concat(id, "\""));
            return;
          }

          switch (getElementType(internalInstance)) {
            case ElementTypeClass:
              global.$r = internalInstance._instance;
              break;

            case ElementTypeFunction:
              var element = internalInstance._currentElement;

              if (element == null) {
                console.warn("Could not find element with id \"".concat(id, "\""));
                return;
              }

              global.$r = {
                props: element.props,
                type: element.type
              };
              break;

            default:
              global.$r = null;
              break;
          }
        }

        function storeAsGlobal(id, path, count) {
          var inspectedElement = inspectElementRaw(id);

          if (inspectedElement !== null) {
            var value = getInObject(inspectedElement, path);
            var key = "$reactTemp".concat(count);
            window[key] = value;
            console.log(key);
            console.log(value);
          }
        }

        function copyElementPath(id, path) {
          var inspectedElement = inspectElementRaw(id);

          if (inspectedElement !== null) {
            copyToClipboard(getInObject(inspectedElement, path));
          }
        }

        function inspectElement(requestID, id, path) {
          if (currentlyInspectedElementID !== id) {
            currentlyInspectedElementID = id;
            currentlyInspectedPaths = {};
          }

          var inspectedElement = inspectElementRaw(id);

          if (inspectedElement === null) {
            return {
              id: id,
              responseID: requestID,
              type: 'not-found'
            };
          }

          if (path !== null) {
            mergeInspectedPaths(path);
          }

          updateSelectedElement(id);
          inspectedElement.context = cleanForBridge(inspectedElement.context, createIsPathAllowed('context'));
          inspectedElement.props = cleanForBridge(inspectedElement.props, createIsPathAllowed('props'));
          inspectedElement.state = cleanForBridge(inspectedElement.state, createIsPathAllowed('state'));
          return {
            id: id,
            responseID: requestID,
            type: 'full-data',
            value: inspectedElement
          };
        }

        function inspectElementRaw(id) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance == null) {
            return null;
          }

          var _getData2 = getData(internalInstance),
              displayName = _getData2.displayName,
              key = _getData2.key;

          var type = getElementType(internalInstance);
          var context = null;
          var owners = null;
          var props = null;
          var state = null;
          var source = null;
          var element = internalInstance._currentElement;

          if (element !== null) {
            props = element.props;
            source = element._source != null ? element._source : null;
            var owner = element._owner;

            if (owner) {
              owners = [];

              while (owner != null) {
                owners.push({
                  displayName: getData(owner).displayName || 'Unknown',
                  id: getID(owner),
                  key: element.key,
                  type: getElementType(owner)
                });

                if (owner._currentElement) {
                  owner = owner._currentElement._owner;
                }
              }
            }
          }

          var publicInstance = internalInstance._instance;

          if (publicInstance != null) {
            context = publicInstance.context || null;
            state = publicInstance.state || null;
          }

          var errors = [];
          var warnings = [];
          return {
            id: id,
            canEditHooks: false,
            canEditFunctionProps: false,
            canEditHooksAndDeletePaths: false,
            canEditHooksAndRenamePaths: false,
            canEditFunctionPropsDeletePaths: false,
            canEditFunctionPropsRenamePaths: false,
            canToggleSuspense: false,
            canViewSource: type === ElementTypeClass || type === ElementTypeFunction,
            hasLegacyContext: true,
            displayName: displayName,
            type: type,
            key: key != null ? key : null,
            context: context,
            hooks: null,
            props: props,
            state: state,
            errors: errors,
            warnings: warnings,
            owners: owners,
            source: source,
            rootType: null,
            rendererPackageName: null,
            rendererVersion: null
          };
        }

        function logElementToConsole(id) {
          var result = inspectElementRaw(id);

          if (result === null) {
            console.warn("Could not find element with id \"".concat(id, "\""));
            return;
          }

          var supportsGroup = typeof console.groupCollapsed === 'function';

          if (supportsGroup) {
            console.groupCollapsed("[Click to expand] %c<".concat(result.displayName || 'Component', " />"), 'color: var(--dom-tag-name-color); font-weight: normal;');
          }

          if (result.props !== null) {
            console.log('Props:', result.props);
          }

          if (result.state !== null) {
            console.log('State:', result.state);
          }

          if (result.context !== null) {
            console.log('Context:', result.context);
          }

          var nativeNode = findNativeNodeForInternalID(id);

          if (nativeNode !== null) {
            console.log('Node:', nativeNode);
          }

          if (window.chrome || /firefox/i.test(navigator.userAgent)) {
            console.log('Right-click any value to save it as a global variable for further inspection.');
          }

          if (supportsGroup) {
            console.groupEnd();
          }
        }

        function prepareViewAttributeSource(id, path) {
          var inspectedElement = inspectElementRaw(id);

          if (inspectedElement !== null) {
            window.$attribute = getInObject(inspectedElement, path);
          }
        }

        function prepareViewElementSource(id) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance == null) {
            console.warn("Could not find instance with id \"".concat(id, "\""));
            return;
          }

          var element = internalInstance._currentElement;

          if (element == null) {
            console.warn("Could not find element with id \"".concat(id, "\""));
            return;
          }

          global.$type = element.type;
        }

        function deletePath(type, id, hookID, path) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance != null) {
            var publicInstance = internalInstance._instance;

            if (publicInstance != null) {
              switch (type) {
                case 'context':
                  deletePathInObject(publicInstance.context, path);
                  forceUpdate(publicInstance);
                  break;

                case 'hooks':
                  throw new Error('Hooks not supported by this renderer');

                case 'props':
                  var element = internalInstance._currentElement;
                  internalInstance._currentElement = legacy_renderer_objectSpread(legacy_renderer_objectSpread({}, element), {}, {
                    props: copyWithDelete(element.props, path)
                  });
                  forceUpdate(publicInstance);
                  break;

                case 'state':
                  deletePathInObject(publicInstance.state, path);
                  forceUpdate(publicInstance);
                  break;
              }
            }
          }
        }

        function renamePath(type, id, hookID, oldPath, newPath) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance != null) {
            var publicInstance = internalInstance._instance;

            if (publicInstance != null) {
              switch (type) {
                case 'context':
                  renamePathInObject(publicInstance.context, oldPath, newPath);
                  forceUpdate(publicInstance);
                  break;

                case 'hooks':
                  throw new Error('Hooks not supported by this renderer');

                case 'props':
                  var element = internalInstance._currentElement;
                  internalInstance._currentElement = legacy_renderer_objectSpread(legacy_renderer_objectSpread({}, element), {}, {
                    props: copyWithRename(element.props, oldPath, newPath)
                  });
                  forceUpdate(publicInstance);
                  break;

                case 'state':
                  renamePathInObject(publicInstance.state, oldPath, newPath);
                  forceUpdate(publicInstance);
                  break;
              }
            }
          }
        }

        function overrideValueAtPath(type, id, hookID, path, value) {
          var internalInstance = idToInternalInstanceMap.get(id);

          if (internalInstance != null) {
            var publicInstance = internalInstance._instance;

            if (publicInstance != null) {
              switch (type) {
                case 'context':
                  setInObject(publicInstance.context, path, value);
                  forceUpdate(publicInstance);
                  break;

                case 'hooks':
                  throw new Error('Hooks not supported by this renderer');

                case 'props':
                  var element = internalInstance._currentElement;
                  internalInstance._currentElement = legacy_renderer_objectSpread(legacy_renderer_objectSpread({}, element), {}, {
                    props: copyWithSet(element.props, path, value)
                  });
                  forceUpdate(publicInstance);
                  break;

                case 'state':
                  setInObject(publicInstance.state, path, value);
                  forceUpdate(publicInstance);
                  break;
              }
            }
          }
        }

        var getProfilingData = function getProfilingData() {
          throw new Error('getProfilingData not supported by this renderer');
        };

        var handleCommitFiberRoot = function handleCommitFiberRoot() {
          throw new Error('handleCommitFiberRoot not supported by this renderer');
        };

        var handleCommitFiberUnmount = function handleCommitFiberUnmount() {
          throw new Error('handleCommitFiberUnmount not supported by this renderer');
        };

        var handlePostCommitFiberRoot = function handlePostCommitFiberRoot() {
          throw new Error('handlePostCommitFiberRoot not supported by this renderer');
        };

        var overrideSuspense = function overrideSuspense() {
          throw new Error('overrideSuspense not supported by this renderer');
        };

        var startProfiling = function startProfiling() {};

        var stopProfiling = function stopProfiling() {};

        function getBestMatchForTrackedPath() {
          return null;
        }

        function getPathForElement(id) {
          return null;
        }

        function updateComponentFilters(componentFilters) {}

        function setTraceUpdatesEnabled(enabled) {}

        function setTrackedPath(path) {}

        function getOwnersList(id) {
          return null;
        }

        function clearErrorsAndWarnings() {}

        function clearErrorsForFiberID(id) {}

        function clearWarningsForFiberID(id) {}

        return {
          clearErrorsAndWarnings: clearErrorsAndWarnings,
          clearErrorsForFiberID: clearErrorsForFiberID,
          clearWarningsForFiberID: clearWarningsForFiberID,
          cleanup: cleanup,
          copyElementPath: copyElementPath,
          deletePath: deletePath,
          flushInitialOperations: flushInitialOperations,
          getBestMatchForTrackedPath: getBestMatchForTrackedPath,
          getDisplayNameForFiberID: getDisplayNameForFiberID,
          getFiberIDForNative: getInternalIDForNative,
          getInstanceAndStyle: getInstanceAndStyle,
          findNativeNodesForFiberID: function findNativeNodesForFiberID(id) {
            var nativeNode = findNativeNodeForInternalID(id);
            return nativeNode == null ? null : [nativeNode];
          },
          getOwnersList: getOwnersList,
          getPathForElement: getPathForElement,
          getProfilingData: getProfilingData,
          handleCommitFiberRoot: handleCommitFiberRoot,
          handleCommitFiberUnmount: handleCommitFiberUnmount,
          handlePostCommitFiberRoot: handlePostCommitFiberRoot,
          inspectElement: inspectElement,
          logElementToConsole: logElementToConsole,
          overrideSuspense: overrideSuspense,
          overrideValueAtPath: overrideValueAtPath,
          renamePath: renamePath,
          prepareViewAttributeSource: prepareViewAttributeSource,
          prepareViewElementSource: prepareViewElementSource,
          renderer: renderer,
          setTraceUpdatesEnabled: setTraceUpdatesEnabled,
          setTrackedPath: setTrackedPath,
          startProfiling: startProfiling,
          stopProfiling: stopProfiling,
          storeAsGlobal: storeAsGlobal,
          updateComponentFilters: updateComponentFilters
        };
      }

      function initBackend(hook, agent, global) {
        if (hook == null) {
          return function () {};
        }

        var subs = [hook.sub('renderer-attached', function (_ref) {
          var id = _ref.id,
              renderer = _ref.renderer,
              rendererInterface = _ref.rendererInterface;
          agent.setRendererInterface(id, rendererInterface);
          rendererInterface.flushInitialOperations();
        }), hook.sub('unsupported-renderer-version', function (id) {
          agent.onUnsupportedRenderer(id);
        }), hook.sub('operations', agent.onHookOperations), hook.sub('traceUpdates', agent.onTraceUpdates)];

        var attachRenderer = function attachRenderer(id, renderer) {
          var rendererInterface = hook.rendererInterfaces.get(id);

          if (rendererInterface == null) {
            if (typeof renderer.findFiberByHostInstance === 'function') {
              rendererInterface = renderer_attach(hook, id, renderer, global);
            } else if (renderer.ComponentTree) {
              rendererInterface = legacy_renderer_attach(hook, id, renderer, global);
            } else {}

            if (rendererInterface != null) {
              hook.rendererInterfaces.set(id, rendererInterface);
            }
          }

          if (rendererInterface != null) {
            hook.emit('renderer-attached', {
              id: id,
              renderer: renderer,
              rendererInterface: rendererInterface
            });
          } else {
            hook.emit('unsupported-renderer-version', id);
          }
        };

        hook.renderers.forEach(function (renderer, id) {
          attachRenderer(id, renderer);
        });
        subs.push(hook.sub('renderer', function (_ref2) {
          var id = _ref2.id,
              renderer = _ref2.renderer;
          attachRenderer(id, renderer);
        }));
        hook.emit('react-devtools', agent);
        hook.reactDevtoolsAgent = agent;

        var onAgentShutdown = function onAgentShutdown() {
          subs.forEach(function (fn) {
            return fn();
          });
          hook.rendererInterfaces.forEach(function (rendererInterface) {
            rendererInterface.cleanup();
          });
          hook.reactDevtoolsAgent = null;
        };

        agent.addListener('shutdown', onAgentShutdown);
        subs.push(function () {
          agent.removeListener('shutdown', onAgentShutdown);
        });
        return function () {
          subs.forEach(function (fn) {
            return fn();
          });
        };
      }

      function resolveBoxStyle(prefix, style) {
        var hasParts = false;
        var result = {
          bottom: 0,
          left: 0,
          right: 0,
          top: 0
        };
        var styleForAll = style[prefix];

        if (styleForAll != null) {
          for (var _i = 0, _Object$keys = Object.keys(result); _i < _Object$keys.length; _i++) {
            var key = _Object$keys[_i];
            result[key] = styleForAll;
          }

          hasParts = true;
        }

        var styleForHorizontal = style[prefix + 'Horizontal'];

        if (styleForHorizontal != null) {
          result.left = styleForHorizontal;
          result.right = styleForHorizontal;
          hasParts = true;
        } else {
          var styleForLeft = style[prefix + 'Left'];

          if (styleForLeft != null) {
            result.left = styleForLeft;
            hasParts = true;
          }

          var styleForRight = style[prefix + 'Right'];

          if (styleForRight != null) {
            result.right = styleForRight;
            hasParts = true;
          }

          var styleForEnd = style[prefix + 'End'];

          if (styleForEnd != null) {
            result.right = styleForEnd;
            hasParts = true;
          }

          var styleForStart = style[prefix + 'Start'];

          if (styleForStart != null) {
            result.left = styleForStart;
            hasParts = true;
          }
        }

        var styleForVertical = style[prefix + 'Vertical'];

        if (styleForVertical != null) {
          result.bottom = styleForVertical;
          result.top = styleForVertical;
          hasParts = true;
        } else {
          var styleForBottom = style[prefix + 'Bottom'];

          if (styleForBottom != null) {
            result.bottom = styleForBottom;
            hasParts = true;
          }

          var styleForTop = style[prefix + 'Top'];

          if (styleForTop != null) {
            result.top = styleForTop;
            hasParts = true;
          }
        }

        return hasParts ? result : null;
      }

      function setupNativeStyleEditor_typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          setupNativeStyleEditor_typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          setupNativeStyleEditor_typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return setupNativeStyleEditor_typeof(obj);
      }

      function setupNativeStyleEditor_defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function setupNativeStyleEditor(bridge, agent, resolveNativeStyle, validAttributes) {
        bridge.addListener('NativeStyleEditor_measure', function (_ref) {
          var id = _ref.id,
              rendererID = _ref.rendererID;
          measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
        });
        bridge.addListener('NativeStyleEditor_renameAttribute', function (_ref2) {
          var id = _ref2.id,
              rendererID = _ref2.rendererID,
              oldName = _ref2.oldName,
              newName = _ref2.newName,
              value = _ref2.value;
          renameStyle(agent, id, rendererID, oldName, newName, value);
          setTimeout(function () {
            return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
          });
        });
        bridge.addListener('NativeStyleEditor_setValue', function (_ref3) {
          var id = _ref3.id,
              rendererID = _ref3.rendererID,
              name = _ref3.name,
              value = _ref3.value;
          setStyle(agent, id, rendererID, name, value);
          setTimeout(function () {
            return measureStyle(agent, bridge, resolveNativeStyle, id, rendererID);
          });
        });
        bridge.send('isNativeStyleEditorSupported', {
          isSupported: true,
          validAttributes: validAttributes
        });
      }

      var EMPTY_BOX_STYLE = {
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      };
      var componentIDToStyleOverrides = new Map();

      function measureStyle(agent, bridge, resolveNativeStyle, id, rendererID) {
        var data = agent.getInstanceAndStyle({
          id: id,
          rendererID: rendererID
        });

        if (!data || !data.style) {
          bridge.send('NativeStyleEditor_styleAndLayout', {
            id: id,
            layout: null,
            style: null
          });
          return;
        }

        var instance = data.instance,
            style = data.style;
        var resolvedStyle = resolveNativeStyle(style);
        var styleOverrides = componentIDToStyleOverrides.get(id);

        if (styleOverrides != null) {
          resolvedStyle = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/extends")({}, resolvedStyle, styleOverrides);
        }

        if (!instance || typeof instance.measure !== 'function') {
          bridge.send('NativeStyleEditor_styleAndLayout', {
            id: id,
            layout: null,
            style: resolvedStyle || null
          });
          return;
        }

        instance.measure(function (x, y, width, height, left, top) {
          if (typeof x !== 'number') {
            bridge.send('NativeStyleEditor_styleAndLayout', {
              id: id,
              layout: null,
              style: resolvedStyle || null
            });
            return;
          }

          var margin = resolvedStyle != null && resolveBoxStyle('margin', resolvedStyle) || EMPTY_BOX_STYLE;
          var padding = resolvedStyle != null && resolveBoxStyle('padding', resolvedStyle) || EMPTY_BOX_STYLE;
          bridge.send('NativeStyleEditor_styleAndLayout', {
            id: id,
            layout: {
              x: x,
              y: y,
              width: width,
              height: height,
              left: left,
              top: top,
              margin: margin,
              padding: padding
            },
            style: resolvedStyle || null
          });
        });
      }

      function shallowClone(object) {
        var cloned = {};

        for (var n in object) {
          cloned[n] = object[n];
        }

        return cloned;
      }

      function renameStyle(agent, id, rendererID, oldName, newName, value) {
        var _ref4;

        var data = agent.getInstanceAndStyle({
          id: id,
          rendererID: rendererID
        });

        if (!data || !data.style) {
          return;
        }

        var instance = data.instance,
            style = data.style;
        var newStyle = newName ? (_ref4 = {}, setupNativeStyleEditor_defineProperty(_ref4, oldName, undefined), setupNativeStyleEditor_defineProperty(_ref4, newName, value), _ref4) : setupNativeStyleEditor_defineProperty({}, oldName, undefined);
        var customStyle;

        if (instance !== null && typeof instance.setNativeProps === 'function') {
          var styleOverrides = componentIDToStyleOverrides.get(id);

          if (!styleOverrides) {
            componentIDToStyleOverrides.set(id, newStyle);
          } else {
            _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/extends")(styleOverrides, newStyle);
          }

          instance.setNativeProps({
            style: newStyle
          });
        } else if (Array.isArray(style)) {
          var lastIndex = style.length - 1;

          if (setupNativeStyleEditor_typeof(style[lastIndex]) === 'object' && !Array.isArray(style[lastIndex])) {
            customStyle = shallowClone(style[lastIndex]);
            delete customStyle[oldName];

            if (newName) {
              customStyle[newName] = value;
            } else {
              customStyle[oldName] = undefined;
            }

            agent.overrideValueAtPath({
              type: 'props',
              id: id,
              rendererID: rendererID,
              path: ['style', lastIndex],
              value: customStyle
            });
          } else {
            agent.overrideValueAtPath({
              type: 'props',
              id: id,
              rendererID: rendererID,
              path: ['style'],
              value: style.concat([newStyle])
            });
          }
        } else if (setupNativeStyleEditor_typeof(style) === 'object') {
          customStyle = shallowClone(style);
          delete customStyle[oldName];

          if (newName) {
            customStyle[newName] = value;
          } else {
            customStyle[oldName] = undefined;
          }

          agent.overrideValueAtPath({
            type: 'props',
            id: id,
            rendererID: rendererID,
            path: ['style'],
            value: customStyle
          });
        } else {
          agent.overrideValueAtPath({
            type: 'props',
            id: id,
            rendererID: rendererID,
            path: ['style'],
            value: [style, newStyle]
          });
        }

        agent.emit('hideNativeHighlight');
      }

      function setStyle(agent, id, rendererID, name, value) {
        var data = agent.getInstanceAndStyle({
          id: id,
          rendererID: rendererID
        });

        if (!data || !data.style) {
          return;
        }

        var instance = data.instance,
            style = data.style;
        var newStyle = setupNativeStyleEditor_defineProperty({}, name, value);

        if (instance !== null && typeof instance.setNativeProps === 'function') {
          var styleOverrides = componentIDToStyleOverrides.get(id);

          if (!styleOverrides) {
            componentIDToStyleOverrides.set(id, newStyle);
          } else {
            _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/extends")(styleOverrides, newStyle);
          }

          instance.setNativeProps({
            style: newStyle
          });
        } else if (Array.isArray(style)) {
          var lastLength = style.length - 1;

          if (setupNativeStyleEditor_typeof(style[lastLength]) === 'object' && !Array.isArray(style[lastLength])) {
            agent.overrideValueAtPath({
              type: 'props',
              id: id,
              rendererID: rendererID,
              path: ['style', lastLength, name],
              value: value
            });
          } else {
            agent.overrideValueAtPath({
              type: 'props',
              id: id,
              rendererID: rendererID,
              path: ['style'],
              value: style.concat([newStyle])
            });
          }
        } else {
          agent.overrideValueAtPath({
            type: 'props',
            id: id,
            rendererID: rendererID,
            path: ['style'],
            value: [style, newStyle]
          });
        }

        agent.emit('hideNativeHighlight');
      }

      installHook(window);
      var backend_hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
      var savedComponentFilters = getDefaultComponentFilters();

      function backend_debug(methodName) {
        if (__DEBUG__) {
          var _console;

          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          (_console = console).log.apply(_console, ["%c[core/backend] %c".concat(methodName), 'color: teal; font-weight: bold;', 'font-weight: bold;'].concat(args));
        }
      }

      function connectToDevTools(options) {
        if (backend_hook == null) {
          return;
        }

        var _ref = options || {},
            _ref$host = _ref.host,
            host = _ref$host === void 0 ? 'localhost' : _ref$host,
            nativeStyleEditorValidAttributes = _ref.nativeStyleEditorValidAttributes,
            _ref$useHttps = _ref.useHttps,
            useHttps = _ref$useHttps === void 0 ? false : _ref$useHttps,
            _ref$port = _ref.port,
            port = _ref$port === void 0 ? 8097 : _ref$port,
            websocket = _ref.websocket,
            _ref$resolveRNStyle = _ref.resolveRNStyle,
            resolveRNStyle = _ref$resolveRNStyle === void 0 ? null : _ref$resolveRNStyle,
            _ref$retryConnectionD = _ref.retryConnectionDelay,
            retryConnectionDelay = _ref$retryConnectionD === void 0 ? 2000 : _ref$retryConnectionD,
            _ref$isAppActive = _ref.isAppActive,
            isAppActive = _ref$isAppActive === void 0 ? function () {
          return true;
        } : _ref$isAppActive;

        var protocol = useHttps ? 'wss' : 'ws';
        var retryTimeoutID = null;

        function scheduleRetry() {
          if (retryTimeoutID === null) {
            retryTimeoutID = setTimeout(function () {
              return connectToDevTools(options);
            }, retryConnectionDelay);
          }
        }

        if (!isAppActive()) {
          scheduleRetry();
          return;
        }

        var bridge = null;
        var messageListeners = [];
        var uri = protocol + '://' + host + ':' + port;
        var ws = websocket ? websocket : new window.WebSocket(uri);
        ws.onclose = handleClose;
        ws.onerror = handleFailed;
        ws.onmessage = handleMessage;

        ws.onopen = function () {
          bridge = new src_bridge({
            listen: function listen(fn) {
              messageListeners.push(fn);
              return function () {
                var index = messageListeners.indexOf(fn);

                if (index >= 0) {
                  messageListeners.splice(index, 1);
                }
              };
            },
            send: function send(event, payload, transferable) {
              if (ws.readyState === ws.OPEN) {
                if (__DEBUG__) {
                  backend_debug('wall.send()', event, payload);
                }

                ws.send(JSON.stringify({
                  event: event,
                  payload: payload
                }));
              } else {
                if (__DEBUG__) {
                  backend_debug('wall.send()', 'Shutting down bridge because of closed WebSocket connection');
                }

                if (bridge !== null) {
                  bridge.shutdown();
                }

                scheduleRetry();
              }
            }
          });
          bridge.addListener('inspectElement', function (_ref2) {
            var id = _ref2.id,
                rendererID = _ref2.rendererID;
            var renderer = agent.rendererInterfaces[rendererID];

            if (renderer != null) {
              var nodes = renderer.findNativeNodesForFiberID(id);

              if (nodes != null && nodes[0] != null) {
                agent.emit('showNativeHighlight', nodes[0]);
              }
            }
          });
          bridge.addListener('updateComponentFilters', function (componentFilters) {
            savedComponentFilters = componentFilters;
          });

          if (window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ == null) {
            bridge.send('overrideComponentFilters', savedComponentFilters);
          }

          var agent = new agent_Agent(bridge);
          agent.addListener('shutdown', function () {
            backend_hook.emit('shutdown');
          });
          initBackend(backend_hook, agent, window);

          if (resolveRNStyle != null || backend_hook.resolveRNStyle != null) {
            setupNativeStyleEditor(bridge, agent, resolveRNStyle || backend_hook.resolveRNStyle, nativeStyleEditorValidAttributes || backend_hook.nativeStyleEditorValidAttributes || null);
          } else {
            var lazyResolveRNStyle;
            var lazyNativeStyleEditorValidAttributes;

            var initAfterTick = function initAfterTick() {
              if (bridge !== null) {
                setupNativeStyleEditor(bridge, agent, lazyResolveRNStyle, lazyNativeStyleEditorValidAttributes);
              }
            };

            if (!backend_hook.hasOwnProperty('resolveRNStyle')) {
              Object.defineProperty(backend_hook, 'resolveRNStyle', {
                enumerable: false,
                get: function get() {
                  return lazyResolveRNStyle;
                },
                set: function set(value) {
                  lazyResolveRNStyle = value;
                  initAfterTick();
                }
              });
            }

            if (!backend_hook.hasOwnProperty('nativeStyleEditorValidAttributes')) {
              Object.defineProperty(backend_hook, 'nativeStyleEditorValidAttributes', {
                enumerable: false,
                get: function get() {
                  return lazyNativeStyleEditorValidAttributes;
                },
                set: function set(value) {
                  lazyNativeStyleEditorValidAttributes = value;
                  initAfterTick();
                }
              });
            }
          }
        };

        function handleClose() {
          if (__DEBUG__) {
            backend_debug('WebSocket.onclose');
          }

          if (bridge !== null) {
            bridge.emit('shutdown');
          }

          scheduleRetry();
        }

        function handleFailed() {
          if (__DEBUG__) {
            backend_debug('WebSocket.onerror');
          }

          scheduleRetry();
        }

        function handleMessage(event) {
          var data;

          try {
            if (typeof event.data === 'string') {
              data = JSON.parse(event.data);

              if (__DEBUG__) {
                backend_debug('WebSocket.onmessage', data);
              }
            } else {
              throw Error();
            }
          } catch (e) {
            console.error('[React DevTools] Failed to parse JSON: ' + event.data);
            return;
          }

          messageListeners.forEach(function (fn) {
            try {
              fn(data);
            } catch (error) {
              console.log('[React DevTools] Error calling listener', data);
              console.log('error:', error);
              throw error;
            }
          });
        }
      }
    }]);
  });
},428,[4,273],"node_modules/react-devtools-core/dist/backend.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var JSInspector = {
    registerAgent: function registerAgent(type) {
      if (global.__registerInspectorAgent) {
        global.__registerInspectorAgent(type);
      }
    },
    getTimestamp: function getTimestamp() {
      return global.__inspectorTimestamp();
    }
  };
  module.exports = JSInspector;
},429,[],"node_modules/react-native/Libraries/JSInspector/JSInspector.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var Interceptor = function () {
    function Interceptor(agent) {
      _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck")(this, Interceptor);

      this._agent = agent;
      this._requests = new Map();
    }

    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass")(Interceptor, [{
      key: "getData",
      value: function getData(requestId) {
        return this._requests.get(requestId);
      }
    }, {
      key: "requestSent",
      value: function requestSent(id, url, method, headers) {
        var requestId = String(id);

        this._requests.set(requestId, '');

        var request = {
          url: url,
          method: method,
          headers: headers,
          initialPriority: 'Medium'
        };
        var event = {
          requestId: requestId,
          documentURL: '',
          frameId: '1',
          loaderId: '1',
          request: request,
          timestamp: _$$_REQUIRE(_dependencyMap[4], "./JSInspector").getTimestamp(),
          initiator: {
            type: 'other'
          },
          type: 'Other'
        };

        this._agent.sendEvent('requestWillBeSent', event);
      }
    }, {
      key: "responseReceived",
      value: function responseReceived(id, url, status, headers) {
        var requestId = String(id);
        var response = {
          url: url,
          status: status,
          statusText: String(status),
          headers: headers,
          requestHeaders: {},
          mimeType: this._getMimeType(headers),
          connectionReused: false,
          connectionId: -1,
          encodedDataLength: 0,
          securityState: 'unknown'
        };
        var event = {
          requestId: requestId,
          frameId: '1',
          loaderId: '1',
          timestamp: _$$_REQUIRE(_dependencyMap[4], "./JSInspector").getTimestamp(),
          type: 'Other',
          response: response
        };

        this._agent.sendEvent('responseReceived', event);
      }
    }, {
      key: "dataReceived",
      value: function dataReceived(id, data) {
        var requestId = String(id);
        var existingData = this._requests.get(requestId) || '';

        this._requests.set(requestId, existingData.concat(data));

        var event = {
          requestId: requestId,
          timestamp: _$$_REQUIRE(_dependencyMap[4], "./JSInspector").getTimestamp(),
          dataLength: data.length,
          encodedDataLength: data.length
        };

        this._agent.sendEvent('dataReceived', event);
      }
    }, {
      key: "loadingFinished",
      value: function loadingFinished(id, encodedDataLength) {
        var event = {
          requestId: String(id),
          timestamp: _$$_REQUIRE(_dependencyMap[4], "./JSInspector").getTimestamp(),
          encodedDataLength: encodedDataLength
        };

        this._agent.sendEvent('loadingFinished', event);
      }
    }, {
      key: "loadingFailed",
      value: function loadingFailed(id, error) {
        var event = {
          requestId: String(id),
          timestamp: _$$_REQUIRE(_dependencyMap[4], "./JSInspector").getTimestamp(),
          type: 'Other',
          errorText: error
        };

        this._agent.sendEvent('loadingFailed', event);
      }
    }, {
      key: "_getMimeType",
      value: function _getMimeType(headers) {
        var contentType = headers['Content-Type'] || '';
        return contentType.split(';')[0];
      }
    }]);

    return Interceptor;
  }();

  var NetworkAgent = function (_InspectorAgent) {
    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/inherits")(NetworkAgent, _InspectorAgent);

    var _super = _createSuper(NetworkAgent);

    function NetworkAgent() {
      _$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/classCallCheck")(this, NetworkAgent);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/createClass")(NetworkAgent, [{
      key: "enable",
      value: function enable(_ref) {
        var maxResourceBufferSize = _ref.maxResourceBufferSize,
            maxTotalBufferSize = _ref.maxTotalBufferSize;
        this._interceptor = new Interceptor(this);

        _$$_REQUIRE(_dependencyMap[6], "../Network/XMLHttpRequest").setInterceptor(this._interceptor);
      }
    }, {
      key: "disable",
      value: function disable() {
        _$$_REQUIRE(_dependencyMap[6], "../Network/XMLHttpRequest").setInterceptor(null);

        this._interceptor = null;
      }
    }, {
      key: "getResponseBody",
      value: function getResponseBody(_ref2) {
        var requestId = _ref2.requestId;
        return {
          body: this.interceptor().getData(requestId),
          base64Encoded: false
        };
      }
    }, {
      key: "interceptor",
      value: function interceptor() {
        if (this._interceptor) {
          return this._interceptor;
        } else {
          throw Error('_interceptor can not be null');
        }
      }
    }]);

    return NetworkAgent;
  }(_$$_REQUIRE(_dependencyMap[7], "./InspectorAgent"));

  NetworkAgent.DOMAIN = 'Network';
  module.exports = NetworkAgent;
},430,[13,16,9,10,429,14,91,431],"node_modules/react-native/Libraries/JSInspector/NetworkAgent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var InspectorAgent = function () {
    function InspectorAgent(eventSender) {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, InspectorAgent);

      this._eventSender = eventSender;
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(InspectorAgent, [{
      key: "sendEvent",
      value: function sendEvent(name, params) {
        this._eventSender(name, params);
      }
    }]);

    return InspectorAgent;
  }();

  module.exports = InspectorAgent;
},431,[9,10],"node_modules/react-native/Libraries/JSInspector/InspectorAgent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (__DEV__) {
    var DevSettings = _$$_REQUIRE(_dependencyMap[0], "../Utilities/DevSettings");

    if (typeof DevSettings.reload !== 'function') {
      throw new Error('Could not find the reload() implementation.');
    }

    var ReactRefreshRuntime = _$$_REQUIRE(_dependencyMap[1], "react-refresh/runtime");

    ReactRefreshRuntime.injectIntoGlobalHook(global);
    var Refresh = {
      performFullRefresh: function performFullRefresh(reason) {
        DevSettings.reload(reason);
      },
      createSignatureFunctionForTransform: ReactRefreshRuntime.createSignatureFunctionForTransform,
      isLikelyComponentType: ReactRefreshRuntime.isLikelyComponentType,
      getFamilyByType: ReactRefreshRuntime.getFamilyByType,
      register: ReactRefreshRuntime.register,
      performReactRefresh: function performReactRefresh() {
        if (ReactRefreshRuntime.hasUnrecoverableErrors()) {
          DevSettings.reload('Fast Refresh - Unrecoverable');
          return;
        }

        ReactRefreshRuntime.performReactRefresh();
        DevSettings.onFastRefresh();
      }
    };
    _$$_REQUIRE.Refresh = Refresh;
  }
},432,[356,433],"node_modules/react-native/Libraries/Core/setUpReactRefresh.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _$$_REQUIRE(_dependencyMap[0], "./cjs/react-refresh-runtime.production.min.js");
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1], "./cjs/react-refresh-runtime.development.js");
  }
},433,[434,435],"node_modules/react-refresh/runtime.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React vundefined
   * react-refresh-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  throw Error("React Refresh runtime should not be included in the production bundle.");
},434,[],"node_modules/react-refresh/cjs/react-refresh-runtime.production.min.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React vundefined
   * react-refresh-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var hasSymbol = typeof Symbol === 'function' && Symbol.for;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      var allFamiliesByID = new Map();
      var allFamiliesByType = new PossiblyWeakMap();
      var allSignaturesByType = new PossiblyWeakMap();
      var updatedFamiliesByType = new PossiblyWeakMap();
      var pendingUpdates = [];
      var helpersByRendererID = new Map();
      var helpersByRoot = new Map();
      var mountedRoots = new Set();
      var failedRoots = new Map();
      var didSomeRootFailOnMount = false;

      function computeFullKey(signature) {
        if (signature.fullKey !== null) {
          return signature.fullKey;
        }

        var fullKey = signature.ownKey;
        var hooks;

        try {
          hooks = signature.getCustomHooks();
        } catch (err) {
          signature.forceReset = true;
          signature.fullKey = fullKey;
          return fullKey;
        }

        for (var i = 0; i < hooks.length; i++) {
          var hook = hooks[i];

          if (typeof hook !== 'function') {
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
          }

          var nestedHookSignature = allSignaturesByType.get(hook);

          if (nestedHookSignature === undefined) {
            continue;
          }

          var nestedHookKey = computeFullKey(nestedHookSignature);

          if (nestedHookSignature.forceReset) {
            signature.forceReset = true;
          }

          fullKey += '\n---\n' + nestedHookKey;
        }

        signature.fullKey = fullKey;
        return fullKey;
      }

      function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);

        if (prevSignature === undefined && nextSignature === undefined) {
          return true;
        }

        if (prevSignature === undefined || nextSignature === undefined) {
          return false;
        }

        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {
          return false;
        }

        if (nextSignature.forceReset) {
          return false;
        }

        return true;
      }

      function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
      }

      function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) {
          return false;
        }

        if (haveEqualSignatures(prevType, nextType)) {
          return true;
        }

        return false;
      }

      function resolveFamily(type) {
        return updatedFamiliesByType.get(type);
      }

      function performReactRefresh() {
        {
          if (pendingUpdates.length === 0) {
            return null;
          }

          var staleFamilies = new Set();
          var updatedFamilies = new Set();
          var updates = pendingUpdates;
          pendingUpdates = [];
          updates.forEach(function (_ref) {
            var family = _ref[0],
                nextType = _ref[1];
            var prevType = family.current;
            updatedFamiliesByType.set(prevType, family);
            updatedFamiliesByType.set(nextType, family);
            family.current = nextType;

            if (canPreserveStateBetween(prevType, nextType)) {
              updatedFamilies.add(family);
            } else {
              staleFamilies.add(family);
            }
          });
          var update = {
            updatedFamilies: updatedFamilies,
            staleFamilies: staleFamilies
          };
          helpersByRendererID.forEach(function (helpers) {
            helpers.setRefreshHandler(resolveFamily);
          });
          var didError = false;
          var firstError = null;
          failedRoots.forEach(function (element, root) {
            var helpers = helpersByRoot.get(root);

            if (helpers === undefined) {
              throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            }

            try {
              helpers.scheduleRoot(root, element);
            } catch (err) {
              if (!didError) {
                didError = true;
                firstError = err;
              }
            }
          });
          mountedRoots.forEach(function (root) {
            var helpers = helpersByRoot.get(root);

            if (helpers === undefined) {
              throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            }

            try {
              helpers.scheduleRefresh(root, update);
            } catch (err) {
              if (!didError) {
                didError = true;
                firstError = err;
              }
            }
          });

          if (didError) {
            throw firstError;
          }

          return update;
        }
      }

      function register(type, id) {
        {
          if (type === null) {
            return;
          }

          if (typeof type !== 'function' && typeof type !== 'object') {
            return;
          }

          if (allFamiliesByType.has(type)) {
            return;
          }

          var family = allFamiliesByID.get(id);

          if (family === undefined) {
            family = {
              current: type
            };
            allFamiliesByID.set(id, family);
          } else {
            pendingUpdates.push([family, type]);
          }

          allFamiliesByType.set(type, family);

          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;

              case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
            }
          }
        }
      }

      function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        {
          allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function () {
              return [];
            }
          });
        }
      }

      function collectCustomHooksForSignature(type) {
        {
          var signature = allSignaturesByType.get(type);

          if (signature !== undefined) {
            computeFullKey(signature);
          }
        }
      }

      function getFamilyByID(id) {
        {
          return allFamiliesByID.get(id);
        }
      }

      function getFamilyByType(type) {
        {
          return allFamiliesByType.get(type);
        }
      }

      function findAffectedHostInstances(families) {
        {
          var affectedInstances = new Set();
          mountedRoots.forEach(function (root) {
            var helpers = helpersByRoot.get(root);

            if (helpers === undefined) {
              throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            }

            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function (inst) {
              affectedInstances.add(inst);
            });
          });
          return affectedInstances;
        }
      }

      function injectIntoGlobalHook(globalObject) {
        {
          var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;

          if (hook === undefined) {
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
              supportsFiber: true,
              inject: function inject(injected) {
                return nextID++;
              },
              onCommitFiberRoot: function onCommitFiberRoot(id, root, maybePriorityLevel, didError) {},
              onCommitFiberUnmount: function onCommitFiberUnmount() {}
            };
          }

          var oldInject = hook.inject;

          hook.inject = function (injected) {
            var id = oldInject.apply(this, arguments);

            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {
              helpersByRendererID.set(id, injected);
            }

            return id;
          };

          var oldOnCommitFiberRoot = hook.onCommitFiberRoot;

          hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);

            if (helpers === undefined) {
              return;
            }

            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate;

            if (alternate !== null) {
              var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
              var isMounted = current.memoizedState != null && current.memoizedState.element != null;

              if (!wasMounted && isMounted) {
                mountedRoots.add(root);
                failedRoots.delete(root);
              } else if (wasMounted && isMounted) {} else if (wasMounted && !isMounted) {
                mountedRoots.delete(root);

                if (didError) {
                  failedRoots.set(root, alternate.memoizedState.element);
                } else {
                  helpersByRoot.delete(root);
                }
              } else if (!wasMounted && !isMounted) {
                if (didError && !failedRoots.has(root)) {
                  didSomeRootFailOnMount = true;
                }
              }
            } else {
              mountedRoots.add(root);
            }

            return oldOnCommitFiberRoot.apply(this, arguments);
          };
        }
      }

      function hasUnrecoverableErrors() {
        return didSomeRootFailOnMount;
      }

      function _getMountedRootCount() {
        {
          return mountedRoots.size;
        }
      }

      function createSignatureFunctionForTransform() {
        {
          var status = 'needsSignature';
          var savedType;
          var hasCustomHooks;
          return function (type, key, forceReset, getCustomHooks) {
            switch (status) {
              case 'needsSignature':
                if (type !== undefined) {
                  savedType = type;
                  hasCustomHooks = typeof getCustomHooks === 'function';
                  setSignature(type, key, forceReset, getCustomHooks);
                  status = 'needsCustomHooks';
                }

                break;

              case 'needsCustomHooks':
                if (hasCustomHooks) {
                  collectCustomHooksForSignature(savedType);
                }

                status = 'resolved';
                break;

              case 'resolved':
                break;
            }

            return type;
          };
        }
      }

      function isLikelyComponentType(type) {
        {
          switch (typeof type) {
            case 'function':
              {
                if (type.prototype != null) {
                  if (type.prototype.isReactComponent) {
                    return true;
                  }

                  var ownNames = Object.getOwnPropertyNames(type.prototype);

                  if (ownNames.length > 1 || ownNames[0] !== 'constructor') {
                    return false;
                  }

                  if (type.prototype.__proto__ !== Object.prototype) {
                    return false;
                  }
                }

                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
              }

            case 'object':
              {
                if (type != null) {
                  switch (type.$$typeof) {
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                      return true;

                    default:
                      return false;
                  }
                }

                return false;
              }

            default:
              {
                return false;
              }
          }
        }
      }

      var ReactFreshRuntime = Object.freeze({
        performReactRefresh: performReactRefresh,
        register: register,
        setSignature: setSignature,
        collectCustomHooksForSignature: collectCustomHooksForSignature,
        getFamilyByID: getFamilyByID,
        getFamilyByType: getFamilyByType,
        findAffectedHostInstances: findAffectedHostInstances,
        injectIntoGlobalHook: injectIntoGlobalHook,
        hasUnrecoverableErrors: hasUnrecoverableErrors,
        _getMountedRootCount: _getMountedRootCount,
        createSignatureFunctionForTransform: createSignatureFunctionForTransform,
        isLikelyComponentType: isLikelyComponentType
      });
      var runtime = ReactFreshRuntime.default || ReactFreshRuntime;
      module.exports = runtime;
    })();
  }
},435,[],"node_modules/react-refresh/cjs/react-refresh-runtime.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v0.20.2
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var enableSchedulerDebugging = false;
      var enableProfiling = false;

      var _requestHostCallback;

      var requestHostTimeout;
      var cancelHostTimeout;
      var requestPaint;
      var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

      if (hasPerformanceNow) {
        var localPerformance = performance;

        exports.unstable_now = function () {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();

        exports.unstable_now = function () {
          return localDate.now() - initialTime;
        };
      }

      if (typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        var _callback = null;
        var _timeoutID = null;

        var _flushCallback = function _flushCallback() {
          if (_callback !== null) {
            try {
              var currentTime = exports.unstable_now();
              var hasRemainingTime = true;

              _callback(hasRemainingTime, currentTime);

              _callback = null;
            } catch (e) {
              setTimeout(_flushCallback, 0);
              throw e;
            }
          }
        };

        _requestHostCallback = function requestHostCallback(cb) {
          if (_callback !== null) {
            setTimeout(_requestHostCallback, 0, cb);
          } else {
            _callback = cb;
            setTimeout(_flushCallback, 0);
          }
        };

        requestHostTimeout = function requestHostTimeout(cb, ms) {
          _timeoutID = setTimeout(cb, ms);
        };

        cancelHostTimeout = function cancelHostTimeout() {
          clearTimeout(_timeoutID);
        };

        exports.unstable_shouldYield = function () {
          return false;
        };

        requestPaint = exports.unstable_forceFrameRate = function () {};
      } else {
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;

        if (typeof console !== 'undefined') {
          var requestAnimationFrame = window.requestAnimationFrame;
          var cancelAnimationFrame = window.cancelAnimationFrame;

          if (typeof requestAnimationFrame !== 'function') {
            console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
          }

          if (typeof cancelAnimationFrame !== 'function') {
            console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
          }
        }

        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var yieldInterval = 5;
        var deadline = 0;
        {
          exports.unstable_shouldYield = function () {
            return exports.unstable_now() >= deadline;
          };

          requestPaint = function requestPaint() {};
        }

        exports.unstable_forceFrameRate = function (fps) {
          if (fps < 0 || fps > 125) {
            console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
            return;
          }

          if (fps > 0) {
            yieldInterval = Math.floor(1000 / fps);
          } else {
            yieldInterval = 5;
          }
        };

        var performWorkUntilDeadline = function performWorkUntilDeadline() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            deadline = currentTime + yieldInterval;
            var hasTimeRemaining = true;

            try {
              var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

              if (!hasMoreWork) {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              } else {
                port.postMessage(null);
              }
            } catch (error) {
              port.postMessage(null);
              throw error;
            }
          } else {
            isMessageLoopRunning = false;
          }
        };

        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;

        _requestHostCallback = function _requestHostCallback(callback) {
          scheduledHostCallback = callback;

          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            port.postMessage(null);
          }
        };

        requestHostTimeout = function requestHostTimeout(callback, ms) {
          taskTimeoutID = _setTimeout(function () {
            callback(exports.unstable_now());
          }, ms);
        };

        cancelHostTimeout = function cancelHostTimeout() {
          _clearTimeout(taskTimeoutID);

          taskTimeoutID = -1;
        };
      }

      function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
      }

      function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
      }

      function pop(heap) {
        var first = heap[0];

        if (first !== undefined) {
          var last = heap.pop();

          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }

          return first;
        } else {
          return null;
        }
      }

      function siftUp(heap, node, i) {
        var index = i;

        while (true) {
          var parentIndex = index - 1 >>> 1;
          var parent = heap[parentIndex];

          if (parent !== undefined && compare(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index] = parent;
            index = parentIndex;
          } else {
            return;
          }
        }
      }

      function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;

        while (index < length) {
          var leftIndex = (index + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];

          if (left !== undefined && compare(left, node) < 0) {
            if (right !== undefined && compare(right, left) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              heap[index] = left;
              heap[leftIndex] = node;
              index = leftIndex;
            }
          } else if (right !== undefined && compare(right, node) < 0) {
            heap[index] = right;
            heap[rightIndex] = node;
            index = rightIndex;
          } else {
            return;
          }
        }
      }

      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }

      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;

      function markTaskErrored(task, ms) {}

      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5000;
      var LOW_PRIORITY_TIMEOUT = 10000;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;

      function advanceTimers(currentTime) {
        var timer = peek(timerQueue);

        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
          } else {
            return;
          }

          timer = peek(timerQueue);
        }
      }

      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);

        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;

            _requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);

            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }

      function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;

        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }

        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;

        try {
          if (enableProfiling) {
            try {
              return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                markTaskErrored(currentTask, currentTime);
                currentTask.isQueued = false;
              }

              throw error;
            }
          } else {
            return workLoop(hasTimeRemaining, initialTime);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
        }
      }

      function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);

        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
            break;
          }

          var callback = currentTask.callback;

          if (typeof callback === 'function') {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();

            if (typeof continuationCallback === 'function') {
              currentTask.callback = continuationCallback;
            } else {
              if (currentTask === peek(taskQueue)) {
                pop(taskQueue);
              }
            }

            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }

          currentTask = peek(taskQueue);
        }

        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);

          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }

          return false;
        }
      }

      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;

          default:
            priorityLevel = NormalPriority;
        }

        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;

        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }

      function unstable_next(eventHandler) {
        var priorityLevel;

        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;

          default:
            priorityLevel = currentPriorityLevel;
            break;
        }

        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;

        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }

      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function () {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;

          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }

      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;

        if (typeof options === 'object' && options !== null) {
          var delay = options.delay;

          if (typeof delay === 'number' && delay > 0) {
            startTime = currentTime + delay;
          } else {
            startTime = currentTime;
          }
        } else {
          startTime = currentTime;
        }

        var timeout;

        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;

          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;

          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;

          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;

          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }

        var expirationTime = startTime + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback: callback,
          priorityLevel: priorityLevel,
          startTime: startTime,
          expirationTime: expirationTime,
          sortIndex: -1
        };

        if (startTime > currentTime) {
          newTask.sortIndex = startTime;
          push(timerQueue, newTask);

          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }

            requestHostTimeout(handleTimeout, startTime - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);

          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;

            _requestHostCallback(flushWork);
          }
        }

        return newTask;
      }

      function unstable_pauseExecution() {}

      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;

          _requestHostCallback(flushWork);
        }
      }

      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }

      function unstable_cancelCallback(task) {
        task.callback = null;
      }

      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }

      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_Profiling = unstable_Profiling;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_next = unstable_next;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_requestPaint = unstable_requestPaint;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_wrapCallback = unstable_wrapCallback;
    })();
  }
},436,[],"node_modules/scheduler/cjs/scheduler.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _$$_REQUIRE(_dependencyMap[0], "./cjs/scheduler-tracing.production.min.js");
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1], "./cjs/scheduler-tracing.development.js");
  }
},437,[438,439],"node_modules/scheduler/tracing.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v0.20.2
   * scheduler-tracing.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var b = 0;
  exports.__interactionsRef = null;
  exports.__subscriberRef = null;

  exports.unstable_clear = function (a) {
    return a();
  };

  exports.unstable_getCurrent = function () {
    return null;
  };

  exports.unstable_getThreadID = function () {
    return ++b;
  };

  exports.unstable_subscribe = function () {};

  exports.unstable_trace = function (a, d, c) {
    return c();
  };

  exports.unstable_unsubscribe = function () {};

  exports.unstable_wrap = function (a) {
    return a;
  };
},438,[],"node_modules/scheduler/cjs/scheduler-tracing.production.min.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v0.20.2
   * scheduler-tracing.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var DEFAULT_THREAD_ID = 0;
      var interactionIDCounter = 0;
      var threadIDCounter = 0;
      exports.__interactionsRef = null;
      exports.__subscriberRef = null;
      {
        exports.__interactionsRef = {
          current: new Set()
        };
        exports.__subscriberRef = {
          current: null
        };
      }

      function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();

        try {
          return callback();
        } finally {
          exports.__interactionsRef.current = prevInteractions;
        }
      }

      function unstable_getCurrent() {
        {
          return exports.__interactionsRef.current;
        }
      }

      function unstable_getThreadID() {
        return ++threadIDCounter;
      }

      function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
          __count: 1,
          id: interactionIDCounter++,
          name: name,
          timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current;
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;

        try {
          if (subscriber !== null) {
            subscriber.onInteractionTraced(interaction);
          }
        } finally {
          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(interactions, threadID);
            }
          } finally {
            try {
              returnValue = callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;

              try {
                if (subscriber !== null) {
                  subscriber.onWorkStopped(interactions, threadID);
                }
              } finally {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              }
            }
          }
        }

        return returnValue;
      }

      function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;

        if (subscriber !== null) {
          subscriber.onWorkScheduled(wrappedInteractions, threadID);
        }

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count++;
        });
        var hasRun = false;

        function wrapped() {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = wrappedInteractions;
          subscriber = exports.__subscriberRef.current;

          try {
            var returnValue;

            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(wrappedInteractions, threadID);
              }
            } finally {
              try {
                returnValue = callback.apply(undefined, arguments);
              } finally {
                exports.__interactionsRef.current = prevInteractions;

                if (subscriber !== null) {
                  subscriber.onWorkStopped(wrappedInteractions, threadID);
                }
              }
            }

            return returnValue;
          } finally {
            if (!hasRun) {
              hasRun = true;
              wrappedInteractions.forEach(function (interaction) {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          }
        }

        wrapped.cancel = function cancel() {
          subscriber = exports.__subscriberRef.current;

          try {
            if (subscriber !== null) {
              subscriber.onWorkCanceled(wrappedInteractions, threadID);
            }
          } finally {
            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        };

        return wrapped;
      }

      var subscribers = null;
      {
        subscribers = new Set();
      }

      function unstable_subscribe(subscriber) {
        {
          subscribers.add(subscriber);

          if (subscribers.size === 1) {
            exports.__subscriberRef.current = {
              onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
              onInteractionTraced: onInteractionTraced,
              onWorkCanceled: onWorkCanceled,
              onWorkScheduled: onWorkScheduled,
              onWorkStarted: onWorkStarted,
              onWorkStopped: onWorkStopped
            };
          }
        }
      }

      function unstable_unsubscribe(subscriber) {
        {
          subscribers.delete(subscriber);

          if (subscribers.size === 0) {
            exports.__subscriberRef.current = null;
          }
        }
      }

      function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onInteractionTraced(interaction);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkScheduled(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkStopped(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function (subscriber) {
          try {
            subscriber.onWorkCanceled(interactions, threadID);
          } catch (error) {
            if (!didCatchError) {
              didCatchError = true;
              caughtError = error;
            }
          }
        });

        if (didCatchError) {
          throw caughtError;
        }
      }

      exports.unstable_clear = unstable_clear;
      exports.unstable_getCurrent = unstable_getCurrent;
      exports.unstable_getThreadID = unstable_getThreadID;
      exports.unstable_subscribe = unstable_subscribe;
      exports.unstable_trace = unstable_trace;
      exports.unstable_unsubscribe = unstable_unsubscribe;
      exports.unstable_wrap = unstable_wrap;
    })();
  }
},439,[],"node_modules/scheduler/cjs/scheduler-tracing.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var _requireNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../ReactNative/requireNativeComponent"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/codegenNativeCommands"));

  var _RCTSinglelineTextInputViewConfig = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "./RCTSinglelineTextInputViewConfig"));

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  exports.Commands = Commands;
  var SinglelineTextInputNativeComponent;

  if (global.RN$Bridgeless) {
    _$$_REQUIRE(_dependencyMap[4], "../../Renderer/shims/ReactNativeViewConfigRegistry").register('RCTSinglelineTextInputView', function () {
      return _RCTSinglelineTextInputViewConfig.default;
    });

    SinglelineTextInputNativeComponent = 'RCTSinglelineTextInputView';
  } else {
    SinglelineTextInputNativeComponent = (0, _requireNativeComponent.default)('RCTSinglelineTextInputView');
  }

  var _default = SinglelineTextInputNativeComponent;
  exports.default = _default;
},440,[7,53,138,441,68],"node_modules/react-native/Libraries/Components/TextInput/RCTSingelineTextInputNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _extends2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/extends"));

  var _ReactNativeViewViewConfig = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Components/View/ReactNativeViewViewConfig"));

  var RCTSinglelineTextInputViewConfig = {
    uiViewClassName: 'RCTSinglelineTextInputView',
    bubblingEventTypes: {
      topBlur: {
        phasedRegistrationNames: {
          bubbled: 'onBlur',
          captured: 'onBlurCapture'
        }
      },
      topChange: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        }
      },
      topEndEditing: {
        phasedRegistrationNames: {
          bubbled: 'onEndEditing',
          captured: 'onEndEditingCapture'
        }
      },
      topFocus: {
        phasedRegistrationNames: {
          bubbled: 'onFocus',
          captured: 'onFocusCapture'
        }
      },
      topKeyPress: {
        phasedRegistrationNames: {
          bubbled: 'onKeyPress',
          captured: 'onKeyPressCapture'
        }
      },
      topSubmitEditing: {
        phasedRegistrationNames: {
          bubbled: 'onSubmitEditing',
          captured: 'onSubmitEditingCapture'
        }
      },
      topTouchCancel: {
        phasedRegistrationNames: {
          bubbled: 'onTouchCancel',
          captured: 'onTouchCancelCapture'
        }
      },
      topTouchEnd: {
        phasedRegistrationNames: {
          bubbled: 'onTouchEnd',
          captured: 'onTouchEndCapture'
        }
      },
      topTouchMove: {
        phasedRegistrationNames: {
          bubbled: 'onTouchMove',
          captured: 'onTouchMoveCapture'
        }
      }
    },
    directEventTypes: {},
    validAttributes: (0, _extends2.default)({}, _ReactNativeViewViewConfig.default.validAttributes, {
      fontSize: true,
      fontWeight: true,
      fontVariant: true,
      textShadowOffset: {
        diff: _$$_REQUIRE(_dependencyMap[3], "../../Utilities/differ/sizesDiffer")
      },
      allowFontScaling: true,
      fontStyle: true,
      textTransform: true,
      textAlign: true,
      fontFamily: true,
      lineHeight: true,
      isHighlighted: true,
      writingDirection: true,
      textDecorationLine: true,
      textShadowRadius: true,
      letterSpacing: true,
      textDecorationStyle: true,
      textDecorationColor: {
        process: _$$_REQUIRE(_dependencyMap[4], "../../StyleSheet/processColor")
      },
      color: {
        process: _$$_REQUIRE(_dependencyMap[4], "../../StyleSheet/processColor")
      },
      maxFontSizeMultiplier: true,
      textShadowColor: {
        process: _$$_REQUIRE(_dependencyMap[4], "../../StyleSheet/processColor")
      },
      editable: true,
      inputAccessoryViewID: true,
      caretHidden: true,
      enablesReturnKeyAutomatically: true,
      placeholderTextColor: {
        process: _$$_REQUIRE(_dependencyMap[4], "../../StyleSheet/processColor")
      },
      onSelectionChange: true,
      clearButtonMode: true,
      onContentSizeChange: true,
      keyboardType: true,
      selection: true,
      returnKeyType: true,
      blurOnSubmit: true,
      mostRecentEventCount: true,
      onChange: true,
      scrollEnabled: true,
      selectionColor: {
        process: _$$_REQUIRE(_dependencyMap[4], "../../StyleSheet/processColor")
      },
      contextMenuHidden: true,
      secureTextEntry: true,
      onTextInput: true,
      placeholder: true,
      autoCorrect: true,
      onScroll: true,
      multiline: true,
      textContentType: true,
      maxLength: true,
      autoCapitalize: true,
      keyboardAppearance: true,
      passwordRules: true,
      spellCheck: true,
      selectTextOnFocus: true,
      text: true,
      clearTextOnFocus: true
    })
  };
  module.exports = RCTSinglelineTextInputViewConfig;
},441,[7,4,140,147,142],"node_modules/react-native/Libraries/Components/TextInput/RCTSinglelineTextInputViewConfig.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (process.env.NODE_ENV === 'production') {
    module.exports = _$$_REQUIRE(_dependencyMap[0], "./cjs/react-is.production.min.js");
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1], "./cjs/react-is.development.js");
  }
},442,[443,444],"node_modules/prop-types/node_modules/react-is/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  var b = "function" === typeof Symbol && Symbol.for,
      c = b ? Symbol.for("react.element") : 60103,
      d = b ? Symbol.for("react.portal") : 60106,
      e = b ? Symbol.for("react.fragment") : 60107,
      f = b ? Symbol.for("react.strict_mode") : 60108,
      g = b ? Symbol.for("react.profiler") : 60114,
      h = b ? Symbol.for("react.provider") : 60109,
      k = b ? Symbol.for("react.context") : 60110,
      l = b ? Symbol.for("react.async_mode") : 60111,
      m = b ? Symbol.for("react.concurrent_mode") : 60111,
      n = b ? Symbol.for("react.forward_ref") : 60112,
      p = b ? Symbol.for("react.suspense") : 60113,
      q = b ? Symbol.for("react.suspense_list") : 60120,
      r = b ? Symbol.for("react.memo") : 60115,
      t = b ? Symbol.for("react.lazy") : 60116,
      v = b ? Symbol.for("react.block") : 60121,
      w = b ? Symbol.for("react.fundamental") : 60117,
      x = b ? Symbol.for("react.responder") : 60118,
      y = b ? Symbol.for("react.scope") : 60119;

  function z(a) {
    if ("object" === typeof a && null !== a) {
      var u = a.$$typeof;

      switch (u) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;

            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case t:
                case r:
                case h:
                  return a;

                default:
                  return u;
              }

          }

        case d:
          return u;
      }
    }
  }

  function A(a) {
    return z(a) === m;
  }

  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Lazy = t;
  exports.Memo = r;
  exports.Portal = d;
  exports.Profiler = g;
  exports.StrictMode = f;
  exports.Suspense = p;

  exports.isAsyncMode = function (a) {
    return A(a) || z(a) === l;
  };

  exports.isConcurrentMode = A;

  exports.isContextConsumer = function (a) {
    return z(a) === k;
  };

  exports.isContextProvider = function (a) {
    return z(a) === h;
  };

  exports.isElement = function (a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };

  exports.isForwardRef = function (a) {
    return z(a) === n;
  };

  exports.isFragment = function (a) {
    return z(a) === e;
  };

  exports.isLazy = function (a) {
    return z(a) === t;
  };

  exports.isMemo = function (a) {
    return z(a) === r;
  };

  exports.isPortal = function (a) {
    return z(a) === d;
  };

  exports.isProfiler = function (a) {
    return z(a) === g;
  };

  exports.isStrictMode = function (a) {
    return z(a) === f;
  };

  exports.isSuspense = function (a) {
    return z(a) === p;
  };

  exports.isValidElementType = function (a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
  };

  exports.typeOf = z;
},443,[],"node_modules/prop-types/node_modules/react-is/cjs/react-is.production.min.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var hasSymbol = typeof Symbol === 'function' && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }

      function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
          var $$typeof = object.$$typeof;

          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;

              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;

                default:
                  var $$typeofType = type && type.$$typeof;

                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;

                    default:
                      return $$typeof;
                  }

              }

            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }

        return undefined;
      }

      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }

      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }

      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }

      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }

      function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }

      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }

      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }

      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }

      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }

      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }

      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }

      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }

      exports.AsyncMode = AsyncMode;
      exports.ConcurrentMode = ConcurrentMode;
      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
      exports.isValidElementType = isValidElementType;
      exports.typeOf = typeOf;
    })();
  }
},444,[],"node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  var printWarning = function printWarning() {};

  if (process.env.NODE_ENV !== 'production') {
    printWarning = function printWarning(text) {
      var message = 'Warning: ' + text;

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        throw new Error(message);
      } catch (x) {}
    };
  }

  function emptyFunctionThatReturnsNull() {
    return null;
  }

  module.exports = function (isValidElement, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    var ANONYMOUS = '<<anonymous>>';
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };

    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }

    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }

    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      if (process.env.NODE_ENV !== 'production') {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }

      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret")) {
          if (throwOnDirectAccess) {
            var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
            err.name = 'Invariant Violation';
            throw err;
          } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
            var cacheKey = componentName + ':' + propName;

            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
              printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }

        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }

            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }

          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }

        var propValue = props[propName];

        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }

        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret"));

          if (error instanceof Error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        if (!_$$_REQUIRE(_dependencyMap[1], "react-is").isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        if (process.env.NODE_ENV !== 'production') {
          if (arguments.length > 1) {
            printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
          } else {
            printWarning('Invalid argument supplied to oneOf, expected an array.');
          }
        }

        return emptyFunctionThatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];

        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type = getPreciseType(value);

          if (type === 'symbol') {
            return String(value);
          }

          return value;
        });
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }

        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }

        for (var key in propValue) {
          if (has(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret"));

            if (error instanceof Error) {
              return error;
            }
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
        return emptyFunctionThatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (typeof checker !== 'function') {
          printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
          return emptyFunctionThatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];

          if (checker(props, propName, componentName, location, propFullName, _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret")) == null) {
            return null;
          }
        }

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }

      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        for (var key in shapeTypes) {
          var checker = shapeTypes[key];

          if (!checker) {
            continue;
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret"));

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);

        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }

        var allKeys = _$$_REQUIRE(_dependencyMap[2], "object-assign")({}, props[propName], shapeTypes);

        for (var key in allKeys) {
          var checker = shapeTypes[key];

          if (!checker) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
          }

          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret"));

          if (error) {
            return error;
          }
        }

        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;

        case 'boolean':
          return !propValue;

        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }

          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);

          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;

            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;

                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;

        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      if (propType === 'symbol') {
        return true;
      }

      if (!propValue) {
        return false;
      }

      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    function getPropType(propValue) {
      var propType = typeof propValue;

      if (Array.isArray(propValue)) {
        return 'array';
      }

      if (propValue instanceof RegExp) {
        return 'object';
      }

      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }

      return propType;
    }

    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }

      var propType = getPropType(propValue);

      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }

      return propType;
    }

    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);

      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;

        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;

        default:
          return type;
      }
    }

    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }

      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = _$$_REQUIRE(_dependencyMap[3], "./checkPropTypes");
    ReactPropTypes.resetWarningCache = _$$_REQUIRE(_dependencyMap[3], "./checkPropTypes").resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
},445,[161,442,3,446],"node_modules/prop-types/factoryWithTypeCheckers.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var printWarning = function printWarning() {};

  if (process.env.NODE_ENV !== 'production') {
    var ReactPropTypesSecret = _$$_REQUIRE(_dependencyMap[0], "./lib/ReactPropTypesSecret");

    var loggedTypeFailures = {};
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    printWarning = function printWarning(text) {
      var message = 'Warning: ' + text;

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        throw new Error(message);
      } catch (x) {}
    };
  }

  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (process.env.NODE_ENV !== 'production') {
      for (var typeSpecName in typeSpecs) {
        if (has(typeSpecs, typeSpecName)) {
          var error;

          try {
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
              err.name = 'Invariant Violation';
              throw err;
            }

            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }

          if (error && !(error instanceof Error)) {
            printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
          }

          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
          }
        }
      }
    }
  }

  checkPropTypes.resetWarningCache = function () {
    if (process.env.NODE_ENV !== 'production') {
      loggedTypeFailures = {};
    }
  };

  module.exports = checkPropTypes;
},446,[161],"node_modules/prop-types/checkPropTypes.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _codegenNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Utilities/codegenNativeComponent"));

  var _default = (0, _codegenNativeComponent.default)('ActivityIndicatorView', {
    paperComponentName: 'RCTActivityIndicatorView'
  });

  exports.default = _default;
},447,[7,52],"node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicatorViewNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var StyleSheetValidation = function () {
    function StyleSheetValidation() {
      _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/classCallCheck")(this, StyleSheetValidation);
    }

    _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/createClass")(StyleSheetValidation, null, [{
      key: "validateStyleProp",
      value: function validateStyleProp(prop, style, caller) {
        if (!__DEV__ || global.__RCTProfileIsProfiling) {
          return;
        }

        if (allStylePropTypes[prop] === undefined) {
          var message1 = '"' + prop + '" is not a valid style property.';
          var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
          styleError(message1, style, caller, message2);
        }

        var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

        if (error) {
          styleError(error.message, style, caller);
        }
      }
    }, {
      key: "validateStyle",
      value: function validateStyle(name, styles) {
        if (!__DEV__ || global.__RCTProfileIsProfiling) {
          return;
        }

        if (!styles[name]) {
          return;
        }

        var styleProps = Object.keys(styles[name]);

        for (var _i = 0, _styleProps = styleProps; _i < _styleProps.length; _i++) {
          var prop = _styleProps[_i];
          StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
        }
      }
    }, {
      key: "addValidStylePropTypes",
      value: function addValidStylePropTypes(stylePropTypes) {
        if (!__DEV__ || global.__RCTProfileIsProfiling) {
          return;
        }

        for (var key in stylePropTypes) {
          allStylePropTypes[key] = stylePropTypes[key];
        }
      }
    }]);

    return StyleSheetValidation;
  }();

  var styleError = function styleError(message1, style, caller, message2) {
    _$$_REQUIRE(_dependencyMap[2], "invariant")(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
  };

  var allStylePropTypes = {};

  if (__DEV__ && !global.__RCTProfileIsProfiling) {
    StyleSheetValidation.addValidStylePropTypes(_$$_REQUIRE(_dependencyMap[3], "../DeprecatedPropTypes/DeprecatedImageStylePropTypes"));
    StyleSheetValidation.addValidStylePropTypes(_$$_REQUIRE(_dependencyMap[4], "../DeprecatedPropTypes/DeprecatedTextStylePropTypes"));
    StyleSheetValidation.addValidStylePropTypes(_$$_REQUIRE(_dependencyMap[5], "../DeprecatedPropTypes/DeprecatedViewStylePropTypes"));
  }

  module.exports = StyleSheetValidation;
},448,[9,10,24,167,166,157],"node_modules/react-native/Libraries/StyleSheet/StyleSheetValidation.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PressabilityDebugView = PressabilityDebugView;
  exports.isEnabled = isEnabled;

  var _normalizeColor = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../StyleSheet/normalizeColor"));

  var _Touchable = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../Components/Touchable/Touchable"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../Components/View/View"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], "react"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/Pressability/PressabilityDebug.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function PressabilityDebugView(_ref) {
    var color = _ref.color,
        hitSlop = _ref.hitSlop;

    if (__DEV__) {
      if (isEnabled()) {
        var _hitSlop$bottom, _hitSlop$left, _hitSlop$right, _hitSlop$top;

        var normalizedColor = (0, _normalizeColor.default)(color);

        if (typeof normalizedColor !== 'number') {
          return null;
        }

        var baseColor = '#' + (normalizedColor != null ? normalizedColor : 0).toString(16).padStart(8, '0');
        return React.createElement(_View.default, {
          pointerEvents: "none",
          style: {
            backgroundColor: baseColor.slice(0, -2) + '0F',
            borderColor: baseColor.slice(0, -2) + '55',
            borderStyle: 'dashed',
            borderWidth: 1,
            bottom: -((_hitSlop$bottom = hitSlop == null ? void 0 : hitSlop.bottom) != null ? _hitSlop$bottom : 0),
            left: -((_hitSlop$left = hitSlop == null ? void 0 : hitSlop.left) != null ? _hitSlop$left : 0),
            position: 'absolute',
            right: -((_hitSlop$right = hitSlop == null ? void 0 : hitSlop.right) != null ? _hitSlop$right : 0),
            top: -((_hitSlop$top = hitSlop == null ? void 0 : hitSlop.top) != null ? _hitSlop$top : 0)
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 56,
            columnNumber: 9
          }
        });
      }
    }

    return null;
  }

  function isEnabled() {
    if (__DEV__) {
      return _Touchable.default.TOUCH_TARGET_DEBUG;
    }

    return false;
  }
},449,[7,143,193,178,1],"node_modules/react-native/Libraries/Pressability/PressabilityDebug.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/Inspector/Inspector.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  var renderers = findRenderers();
  hook.resolveRNStyle = _$$_REQUIRE(_dependencyMap[3], "../StyleSheet/flattenStyle");
  hook.nativeStyleEditorValidAttributes = Object.keys(_$$_REQUIRE(_dependencyMap[4], "../Components/View/ReactNativeViewViewConfig").validAttributes.style);

  function findRenderers() {
    var allRenderers = Array.from(hook.renderers.values());

    _$$_REQUIRE(_dependencyMap[5], "invariant")(allRenderers.length >= 1, 'Expected to find at least one React Native renderer on DevTools hook.');

    return allRenderers;
  }

  function getInspectorDataForViewAtPoint(inspectedView, locationX, locationY, callback) {
    for (var i = 0; i < renderers.length; i++) {
      var _renderer$rendererCon;

      var renderer = renderers[i];

      if ((renderer == null ? void 0 : (_renderer$rendererCon = renderer.rendererConfig) == null ? void 0 : _renderer$rendererCon.getInspectorDataForViewAtPoint) != null) {
        renderer.rendererConfig.getInspectorDataForViewAtPoint(inspectedView, locationX, locationY, function (viewData) {
          if (viewData && viewData.hierarchy.length > 0) {
            callback(viewData);
          }
        });
      }
    }
  }

  var Inspector = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/inherits")(Inspector, _React$Component);

    var _super = _createSuper(Inspector);

    function Inspector(props) {
      var _this;

      _$$_REQUIRE(_dependencyMap[7], "@babel/runtime/helpers/classCallCheck")(this, Inspector);

      _this = _super.call(this, props);
      _this._hideTimeoutID = null;

      _this._attachToDevtools = function (agent) {
        agent.addListener('hideNativeHighlight', _this._onAgentHideNativeHighlight);
        agent.addListener('showNativeHighlight', _this._onAgentShowNativeHighlight);
        agent.addListener('shutdown', _this._onAgentShutdown);

        _this.setState({
          devtoolsAgent: agent
        });
      };

      _this._onAgentHideNativeHighlight = function () {
        if (_this.state.inspected === null) {
          return;
        }

        _this._hideTimeoutID = setTimeout(function () {
          _this.setState({
            inspected: null
          });
        }, 100);
      };

      _this._onAgentShowNativeHighlight = function (node) {
        clearTimeout(_this._hideTimeoutID);
        node.measure(function (x, y, width, height, left, top) {
          _this.setState({
            hierarchy: [],
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              }
            }
          });
        });
      };

      _this._onAgentShutdown = function () {
        var agent = _this.state.devtoolsAgent;

        if (agent != null) {
          agent.removeListener('hideNativeHighlight', _this._onAgentHideNativeHighlight);
          agent.removeListener('showNativeHighlight', _this._onAgentShowNativeHighlight);
          agent.removeListener('shutdown', _this._onAgentShutdown);

          _this.setState({
            devtoolsAgent: null
          });
        }
      };

      _this.state = {
        devtoolsAgent: null,
        hierarchy: null,
        panelPos: 'bottom',
        inspecting: true,
        perfing: false,
        inspected: null,
        selection: null,
        inspectedView: _this.props.inspectedView,
        networking: false
      };
      return _this;
    }

    _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/createClass")(Inspector, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        hook.on('react-devtools', this._attachToDevtools);

        if (hook.reactDevtoolsAgent) {
          this._attachToDevtools(hook.reactDevtoolsAgent);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._subs) {
          this._subs.map(function (fn) {
            return fn();
          });
        }

        hook.off('react-devtools', this._attachToDevtools);
        this._setTouchedViewData = null;
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        this.setState({
          inspectedView: newProps.inspectedView
        });
      }
    }, {
      key: "setSelection",
      value: function setSelection(i) {
        var _this2 = this;

        var hierarchyItem = this.state.hierarchy[i];

        var _hierarchyItem$getIns = hierarchyItem.getInspectorData(_$$_REQUIRE(_dependencyMap[9], "../Renderer/shims/ReactNative").findNodeHandle),
            measure = _hierarchyItem$getIns.measure,
            props = _hierarchyItem$getIns.props,
            source = _hierarchyItem$getIns.source;

        measure(function (x, y, width, height, left, top) {
          _this2.setState({
            inspected: {
              frame: {
                left: left,
                top: top,
                width: width,
                height: height
              },
              style: props.style,
              source: source
            },
            selection: i
          });
        });
      }
    }, {
      key: "onTouchPoint",
      value: function onTouchPoint(locationX, locationY) {
        var _this3 = this;

        this._setTouchedViewData = function (viewData) {
          var hierarchy = viewData.hierarchy,
              props = viewData.props,
              selectedIndex = viewData.selectedIndex,
              source = viewData.source,
              frame = viewData.frame,
              pointerY = viewData.pointerY,
              touchedViewTag = viewData.touchedViewTag;

          if (_this3.state.devtoolsAgent && touchedViewTag) {
            _this3.state.devtoolsAgent.selectNode(_$$_REQUIRE(_dependencyMap[9], "../Renderer/shims/ReactNative").findNodeHandle(touchedViewTag));
          }

          _this3.setState({
            panelPos: pointerY > _$$_REQUIRE(_dependencyMap[10], "../Utilities/Dimensions").get('window').height / 2 ? 'top' : 'bottom',
            selection: selectedIndex,
            hierarchy: hierarchy,
            inspected: {
              style: props.style,
              frame: frame,
              source: source
            }
          });
        };

        getInspectorDataForViewAtPoint(this.state.inspectedView, locationX, locationY, function (viewData) {
          if (_this3._setTouchedViewData != null) {
            _this3._setTouchedViewData(viewData);

            _this3._setTouchedViewData = null;
          }
        });
      }
    }, {
      key: "setPerfing",
      value: function setPerfing(val) {
        this.setState({
          perfing: val,
          inspecting: false,
          inspected: null,
          networking: false
        });
      }
    }, {
      key: "setInspecting",
      value: function setInspecting(val) {
        this.setState({
          inspecting: val,
          inspected: null
        });
      }
    }, {
      key: "setTouchTargeting",
      value: function setTouchTargeting(val) {
        var _this4 = this;

        _$$_REQUIRE(_dependencyMap[11], "../Components/Touchable/Touchable").TOUCH_TARGET_DEBUG = val;
        this.props.onRequestRerenderApp(function (inspectedView) {
          _this4.setState({
            inspectedView: inspectedView
          });
        });
      }
    }, {
      key: "setNetworking",
      value: function setNetworking(val) {
        this.setState({
          networking: val,
          perfing: false,
          inspecting: false,
          inspected: null
        });
      }
    }, {
      key: "render",
      value: function render() {
        var panelContainerStyle = this.state.panelPos === 'bottom' ? {
          bottom: 0
        } : {
          top: "android" === 'ios' ? 20 : 0
        };
        return React.createElement(_$$_REQUIRE(_dependencyMap[12], "../Components/View/View"), {
          style: styles.container,
          pointerEvents: "box-none",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 303,
            columnNumber: 7
          }
        }, this.state.inspecting && React.createElement(_$$_REQUIRE(_dependencyMap[13], "./InspectorOverlay"), {
          inspected: this.state.inspected,
          onTouchPoint: this.onTouchPoint.bind(this),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 305,
            columnNumber: 11
          }
        }), React.createElement(_$$_REQUIRE(_dependencyMap[12], "../Components/View/View"), {
          style: [styles.panelContainer, panelContainerStyle],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 310,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[14], "./InspectorPanel"), {
          devtoolsIsOpen: !!this.state.devtoolsAgent,
          inspecting: this.state.inspecting,
          perfing: this.state.perfing,
          setPerfing: this.setPerfing.bind(this),
          setInspecting: this.setInspecting.bind(this),
          inspected: this.state.inspected,
          hierarchy: this.state.hierarchy,
          selection: this.state.selection,
          setSelection: this.setSelection.bind(this),
          touchTargeting: _$$_REQUIRE(_dependencyMap[11], "../Components/Touchable/Touchable").TOUCH_TARGET_DEBUG,
          setTouchTargeting: this.setTouchTargeting.bind(this),
          networking: this.state.networking,
          setNetworking: this.setNetworking.bind(this),
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 311,
            columnNumber: 11
          }
        })));
      }
    }]);

    return Inspector;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[15], "../StyleSheet/StyleSheet").create({
    container: {
      position: 'absolute',
      backgroundColor: 'transparent',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    panelContainer: {
      position: 'absolute',
      left: 0,
      right: 0
    }
  });

  module.exports = Inspector;
},450,[13,16,1,153,140,24,14,9,10,70,175,193,178,451,455,183],"node_modules/react-native/Libraries/Inspector/Inspector.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var InspectorOverlay = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(InspectorOverlay, _React$Component);

    var _super = _createSuper(InspectorOverlay);

    function InspectorOverlay() {
      var _this;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, InspectorOverlay);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _this.findViewForTouchEvent = function (e) {
        var _e$nativeEvent$touche = e.nativeEvent.touches[0],
            locationX = _e$nativeEvent$touche.locationX,
            locationY = _e$nativeEvent$touche.locationY;

        _this.props.onTouchPoint(locationX, locationY);
      };

      _this.shouldSetResponser = function (e) {
        _this.findViewForTouchEvent(e);

        return true;
      };

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(InspectorOverlay, [{
      key: "render",
      value: function render() {
        var content = null;

        if (this.props.inspected) {
          content = React.createElement(_$$_REQUIRE(_dependencyMap[6], "./ElementBox"), {
            frame: this.props.inspected.frame,
            style: this.props.inspected.style,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 48,
              columnNumber: 9
            }
          });
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          onStartShouldSetResponder: this.shouldSetResponser,
          onResponderMove: this.findViewForTouchEvent,
          nativeID: "inspectorOverlay",
          style: [styles.inspector, {
            height: _$$_REQUIRE(_dependencyMap[8], "../Utilities/Dimensions").get('window').height
          }],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 56,
            columnNumber: 7
          }
        }, content);
      }
    }]);

    return InspectorOverlay;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/StyleSheet").create({
    inspector: {
      backgroundColor: 'transparent',
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });

  module.exports = InspectorOverlay;
},451,[13,16,1,14,9,10,452,178,175,183],"node_modules/react-native/Libraries/Inspector/InspectorOverlay.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/Inspector/ElementBox.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var ElementBox = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(ElementBox, _React$Component);

    var _super = _createSuper(ElementBox);

    function ElementBox() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, ElementBox);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(ElementBox, [{
      key: "render",
      value: function render() {
        var style = _$$_REQUIRE(_dependencyMap[6], "../StyleSheet/flattenStyle")(this.props.style) || {};

        var margin = _$$_REQUIRE(_dependencyMap[7], "./resolveBoxStyle")('margin', style);

        var padding = _$$_REQUIRE(_dependencyMap[7], "./resolveBoxStyle")('padding', style);

        var frameStyle = _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/extends")({}, this.props.frame);

        var contentStyle = {
          width: this.props.frame.width,
          height: this.props.frame.height
        };

        if (margin != null) {
          margin = resolveRelativeSizes(margin);
          frameStyle.top -= margin.top;
          frameStyle.left -= margin.left;
          frameStyle.height += margin.top + margin.bottom;
          frameStyle.width += margin.left + margin.right;

          if (margin.top < 0) {
            contentStyle.height += margin.top;
          }

          if (margin.bottom < 0) {
            contentStyle.height += margin.bottom;
          }

          if (margin.left < 0) {
            contentStyle.width += margin.left;
          }

          if (margin.right < 0) {
            contentStyle.width += margin.right;
          }
        }

        if (padding != null) {
          padding = resolveRelativeSizes(padding);
          contentStyle.width -= padding.left + padding.right;
          contentStyle.height -= padding.top + padding.bottom;
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Components/View/View"), {
          style: [styles.frame, frameStyle],
          pointerEvents: "none",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 64,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[10], "./BorderBox"), {
          box: margin,
          style: styles.margin,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 65,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[10], "./BorderBox"), {
          box: padding,
          style: styles.padding,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66,
            columnNumber: 11
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Components/View/View"), {
          style: [styles.content, contentStyle],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 67,
            columnNumber: 13
          }
        }))));
      }
    }]);

    return ElementBox;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[11], "../StyleSheet/StyleSheet").create({
    frame: {
      position: 'absolute'
    },
    content: {
      backgroundColor: 'rgba(200, 230, 255, 0.8)'
    },
    padding: {
      borderColor: 'rgba(77, 255, 0, 0.3)'
    },
    margin: {
      borderColor: 'rgba(255, 132, 0, 0.3)'
    }
  });

  function resolveRelativeSizes(style) {
    var resolvedStyle = _$$_REQUIRE(_dependencyMap[8], "@babel/runtime/helpers/extends")({}, style);

    resolveSizeInPlace(resolvedStyle, 'top', 'height');
    resolveSizeInPlace(resolvedStyle, 'right', 'width');
    resolveSizeInPlace(resolvedStyle, 'bottom', 'height');
    resolveSizeInPlace(resolvedStyle, 'left', 'width');
    return resolvedStyle;
  }

  function resolveSizeInPlace(style, direction, dimension) {
    if (style[direction] !== null && typeof style[direction] === 'string') {
      if (style[direction].indexOf('%') !== -1) {
        style[direction] = parseFloat(style[direction]) / 100.0 * _$$_REQUIRE(_dependencyMap[12], "../Utilities/Dimensions").get('window')[dimension];
      }

      if (style[direction] === 'auto') {
        style[direction] = 0;
      }
    }
  }

  module.exports = ElementBox;
},452,[13,16,1,14,9,10,153,453,4,178,454,183,175],"node_modules/react-native/Libraries/Inspector/ElementBox.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function resolveBoxStyle(prefix, style) {
    var hasParts = false;
    var result = {
      bottom: 0,
      left: 0,
      right: 0,
      top: 0
    };
    var styleForAll = style[prefix];

    if (styleForAll != null) {
      for (var _i = 0, _Object$keys = Object.keys(result); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        result[key] = styleForAll;
      }

      hasParts = true;
    }

    var styleForHorizontal = style[prefix + 'Horizontal'];

    if (styleForHorizontal != null) {
      result.left = styleForHorizontal;
      result.right = styleForHorizontal;
      hasParts = true;
    } else {
      var styleForLeft = style[prefix + 'Left'];

      if (styleForLeft != null) {
        result.left = styleForLeft;
        hasParts = true;
      }

      var styleForRight = style[prefix + 'Right'];

      if (styleForRight != null) {
        result.right = styleForRight;
        hasParts = true;
      }

      var styleForEnd = style[prefix + 'End'];

      if (styleForEnd != null) {
        var constants = _$$_REQUIRE(_dependencyMap[0], "../ReactNative/I18nManager").getConstants();

        if (constants.isRTL && constants.doLeftAndRightSwapInRTL) {
          result.left = styleForEnd;
        } else {
          result.right = styleForEnd;
        }

        hasParts = true;
      }

      var styleForStart = style[prefix + 'Start'];

      if (styleForStart != null) {
        var _constants = _$$_REQUIRE(_dependencyMap[0], "../ReactNative/I18nManager").getConstants();

        if (_constants.isRTL && _constants.doLeftAndRightSwapInRTL) {
          result.right = styleForStart;
        } else {
          result.left = styleForStart;
        }

        hasParts = true;
      }
    }

    var styleForVertical = style[prefix + 'Vertical'];

    if (styleForVertical != null) {
      result.bottom = styleForVertical;
      result.top = styleForVertical;
      hasParts = true;
    } else {
      var styleForBottom = style[prefix + 'Bottom'];

      if (styleForBottom != null) {
        result.bottom = styleForBottom;
        hasParts = true;
      }

      var styleForTop = style[prefix + 'Top'];

      if (styleForTop != null) {
        result.top = styleForTop;
        hasParts = true;
      }
    }

    return hasParts ? result : null;
  }

  module.exports = resolveBoxStyle;
},453,[291],"node_modules/react-native/Libraries/Inspector/resolveBoxStyle.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/Inspector/BorderBox.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var BorderBox = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(BorderBox, _React$Component);

    var _super = _createSuper(BorderBox);

    function BorderBox() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, BorderBox);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(BorderBox, [{
      key: "render",
      value: function render() {
        var box = this.props.box;

        if (!box) {
          return this.props.children;
        }

        var style = {
          borderTopWidth: box.top,
          borderBottomWidth: box.bottom,
          borderLeftWidth: box.left,
          borderRightWidth: box.right
        };
        return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Components/View/View"), {
          style: [style, this.props.style],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 28,
            columnNumber: 12
          }
        }, this.props.children);
      }
    }]);

    return BorderBox;
  }(React.Component);

  module.exports = BorderBox;
},454,[13,16,1,14,9,10,178],"node_modules/react-native/Libraries/Inspector/BorderBox.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/Inspector/InspectorPanel.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var InspectorPanel = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(InspectorPanel, _React$Component);

    var _super = _createSuper(InspectorPanel);

    function InspectorPanel() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, InspectorPanel);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(InspectorPanel, [{
      key: "renderWaiting",
      value: function renderWaiting() {
        if (this.props.inspecting) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
            style: styles.waitingText,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 57,
              columnNumber: 9
            }
          }, "Tap something to inspect it");
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
          style: styles.waitingText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 60,
            columnNumber: 12
          }
        }, "Nothing is inspected");
      }
    }, {
      key: "render",
      value: function render() {
        var contents;

        if (this.props.inspected) {
          contents = React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/ScrollView/ScrollView"), {
            style: styles.properties,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 67,
              columnNumber: 9
            }
          }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "./ElementProperties"), {
            style: this.props.inspected.style,
            frame: this.props.inspected.frame,
            source: this.props.inspected.source,
            hierarchy: this.props.hierarchy,
            selection: this.props.selection,
            setSelection: this.props.setSelection,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68,
              columnNumber: 11
            }
          }));
        } else if (this.props.perfing) {
          contents = React.createElement(_$$_REQUIRE(_dependencyMap[9], "./PerformanceOverlay"), {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 80,
              columnNumber: 18
            }
          });
        } else if (this.props.networking) {
          contents = React.createElement(_$$_REQUIRE(_dependencyMap[10], "./NetworkOverlay"), {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 82,
              columnNumber: 18
            }
          });
        } else {
          contents = React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
            style: styles.waiting,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 84,
              columnNumber: 18
            }
          }, this.renderWaiting());
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.container,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 87,
            columnNumber: 7
          }
        }, !this.props.devtoolsIsOpen && contents, React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.buttonRow,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 89,
            columnNumber: 9
          }
        }, React.createElement(InspectorPanelButton, {
          title: 'Inspect',
          pressed: this.props.inspecting,
          onClick: this.props.setInspecting,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 90,
            columnNumber: 11
          }
        }), React.createElement(InspectorPanelButton, {
          title: 'Perf',
          pressed: this.props.perfing,
          onClick: this.props.setPerfing,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 95,
            columnNumber: 11
          }
        }), React.createElement(InspectorPanelButton, {
          title: 'Network',
          pressed: this.props.networking,
          onClick: this.props.setNetworking,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 100,
            columnNumber: 11
          }
        }), React.createElement(InspectorPanelButton, {
          title: 'Touchables',
          pressed: this.props.touchTargeting,
          onClick: this.props.setTouchTargeting,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 105,
            columnNumber: 11
          }
        })));
      }
    }]);

    return InspectorPanel;
  }(React.Component);

  var InspectorPanelButton = function (_React$Component2) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(InspectorPanelButton, _React$Component2);

    var _super2 = _createSuper(InspectorPanelButton);

    function InspectorPanelButton() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, InspectorPanelButton);

      return _super2.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(InspectorPanelButton, [{
      key: "render",
      value: function render() {
        var _this = this;

        return React.createElement(_$$_REQUIRE(_dependencyMap[12], "../Components/Touchable/TouchableHighlight"), {
          onPress: function onPress() {
            return _this.props.onClick(!_this.props.pressed);
          },
          style: [styles.button, this.props.pressed && styles.buttonPressed],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 125,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
          style: styles.buttonText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 128,
            columnNumber: 9
          }
        }, this.props.title));
      }
    }]);

    return InspectorPanelButton;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[13], "../StyleSheet/StyleSheet").create({
    buttonRow: {
      flexDirection: 'row'
    },
    button: {
      backgroundColor: 'rgba(0, 0, 0, 0.3)',
      margin: 2,
      height: 30,
      justifyContent: 'center',
      alignItems: 'center'
    },
    buttonPressed: {
      backgroundColor: 'rgba(255, 255, 255, 0.3)'
    },
    buttonText: {
      textAlign: 'center',
      color: 'white',
      margin: 5
    },
    container: {
      backgroundColor: 'rgba(0, 0, 0, 0.7)'
    },
    properties: {
      height: 200
    },
    waiting: {
      height: 100
    },
    waitingText: {
      fontSize: 20,
      textAlign: 'center',
      marginVertical: 20,
      color: 'white'
    }
  });

  module.exports = InspectorPanel;
},455,[13,16,1,14,9,10,191,215,456,461,462,178,316,183],"node_modules/react-native/Libraries/Inspector/InspectorPanel.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/Inspector/ElementProperties.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var ElementProperties = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(ElementProperties, _React$Component);

    var _super = _createSuper(ElementProperties);

    function ElementProperties() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, ElementProperties);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(ElementProperties, [{
      key: "render",
      value: function render() {
        var _this = this;

        var style = _$$_REQUIRE(_dependencyMap[6], "../StyleSheet/flattenStyle")(this.props.style);

        var selection = this.props.selection;
        var openFileButton;
        var source = this.props.source;

        var _ref = source || {},
            fileName = _ref.fileName,
            lineNumber = _ref.lineNumber;

        if (fileName && lineNumber) {
          var parts = fileName.split('/');
          var fileNameShort = parts[parts.length - 1];
          openFileButton = React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/Touchable/TouchableHighlight"), {
            style: styles.openButton,
            onPress: _$$_REQUIRE(_dependencyMap[8], "../Core/Devtools/openFileInEditor").bind(null, fileName, lineNumber),
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 52,
              columnNumber: 9
            }
          }, React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Text/Text"), {
            style: styles.openButtonTitle,
            numberOfLines: 1,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 55,
              columnNumber: 11
            }
          }, fileNameShort, ":", lineNumber));
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[10], "../Components/Touchable/TouchableWithoutFeedback"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 64,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.info,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 65,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.breadcrumb,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66,
            columnNumber: 11
          }
        }, _$$_REQUIRE(_dependencyMap[12], "../Utilities/mapWithSeparator")(this.props.hierarchy, function (hierarchyItem, i) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/Touchable/TouchableHighlight"), {
            key: 'item-' + i,
            style: [styles.breadItem, i === selection && styles.selected],
            onPress: function onPress() {
              return _this.props.setSelection(i);
            },
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 70,
              columnNumber: 17
            }
          }, React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Text/Text"), {
            style: styles.breadItemText,
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 75,
              columnNumber: 19
            }
          }, hierarchyItem.name));
        }, function (i) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[9], "../Text/Text"), {
            key: 'sep-' + i,
            style: styles.breadSep,
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 79,
              columnNumber: 17
            }
          }, "\u25B8");
        })), React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.row,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 85,
            columnNumber: 11
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[11], "../Components/View/View"), {
          style: styles.col,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 86,
            columnNumber: 13
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[13], "./StyleInspector"), {
          style: style,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 87,
            columnNumber: 15
          }
        }), openFileButton), React.createElement(_$$_REQUIRE(_dependencyMap[14], "./BoxInspector"), {
          style: style,
          frame: this.props.frame,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 90,
            columnNumber: 14
          }
        }))));
      }
    }]);

    return ElementProperties;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[15], "../StyleSheet/StyleSheet").create({
    breadSep: {
      fontSize: 8,
      color: 'white'
    },
    breadcrumb: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      alignItems: 'flex-start',
      marginBottom: 5
    },
    selected: {
      borderColor: 'white',
      borderRadius: 5
    },
    breadItem: {
      borderWidth: 1,
      borderColor: 'transparent',
      marginHorizontal: 2
    },
    breadItemText: {
      fontSize: 10,
      color: 'white',
      marginHorizontal: 5
    },
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between'
    },
    col: {
      flex: 1
    },
    info: {
      padding: 10
    },
    openButton: {
      padding: 10,
      backgroundColor: '#000',
      marginVertical: 5,
      marginRight: 5,
      borderRadius: 2
    },
    openButtonTitle: {
      color: 'white',
      fontSize: 8
    }
  });

  module.exports = ElementProperties;
},456,[13,16,1,14,9,10,153,316,457,191,314,178,458,459,460,183],"node_modules/react-native/Libraries/Inspector/ElementProperties.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function openFileInEditor(file, lineNumber) {
    fetch(_$$_REQUIRE(_dependencyMap[0], "./getDevServer")().url + 'open-stack-frame', {
      method: 'POST',
      body: JSON.stringify({
        file: file,
        lineNumber: lineNumber
      })
    });
  }

  module.exports = openFileInEditor;
},457,[393],"node_modules/react-native/Libraries/Core/Devtools/openFileInEditor.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function mapWithSeparator(items, itemRenderer, spacerRenderer) {
    var mapped = [];

    if (items.length > 0) {
      mapped.push(itemRenderer(items[0], 0, items));

      for (var ii = 1; ii < items.length; ii++) {
        mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
      }
    }

    return mapped;
  }

  module.exports = mapWithSeparator;
},458,[],"node_modules/react-native/Libraries/Utilities/mapWithSeparator.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/Inspector/StyleInspector.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var StyleInspector = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(StyleInspector, _React$Component);

    var _super = _createSuper(StyleInspector);

    function StyleInspector() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, StyleInspector);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(StyleInspector, [{
      key: "render",
      value: function render() {
        var _this = this;

        if (!this.props.style) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
            style: styles.noStyle,
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 21,
              columnNumber: 14
            }
          }, "No style");
        }

        var names = Object.keys(this.props.style);
        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.container,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 25,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 26,
            columnNumber: 9
          }
        }, names.map(function (name) {
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
            key: name,
            style: styles.attr,
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 28,
              columnNumber: 13
            }
          }, name, ":");
        })), React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 34,
            columnNumber: 9
          }
        }, names.map(function (name) {
          var value = _this.props.style[name];
          return React.createElement(_$$_REQUIRE(_dependencyMap[6], "../Text/Text"), {
            key: name,
            style: styles.value,
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 38,
              columnNumber: 15
            }
          }, typeof value !== 'string' && typeof value !== 'number' ? JSON.stringify(value) : value);
        })));
      }
    }]);

    return StyleInspector;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[8], "../StyleSheet/StyleSheet").create({
    container: {
      flexDirection: 'row'
    },
    attr: {
      fontSize: 10,
      color: '#ccc'
    },
    value: {
      fontSize: 10,
      color: 'white',
      marginLeft: 10
    },
    noStyle: {
      color: 'white',
      fontSize: 10
    }
  });

  module.exports = StyleInspector;
},459,[13,16,1,14,9,10,191,178,183],"node_modules/react-native/Libraries/Inspector/StyleInspector.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/Inspector/BoxInspector.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var blank = {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  };

  var BoxInspector = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(BoxInspector, _React$Component);

    var _super = _createSuper(BoxInspector);

    function BoxInspector() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, BoxInspector);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(BoxInspector, [{
      key: "render",
      value: function render() {
        var frame = this.props.frame;
        var style = this.props.style;
        var margin = style && _$$_REQUIRE(_dependencyMap[6], "./resolveBoxStyle")('margin', style) || blank;
        var padding = style && _$$_REQUIRE(_dependencyMap[6], "./resolveBoxStyle")('padding', style) || blank;
        return React.createElement(BoxContainer, {
          title: "margin",
          titleStyle: styles.marginLabel,
          box: margin,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 34,
            columnNumber: 7
          }
        }, React.createElement(BoxContainer, {
          title: "padding",
          box: padding,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 35,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 36,
            columnNumber: 11
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.innerText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 37,
            columnNumber: 13
          }
        }, "(", (frame.left || 0).toFixed(1), ", ", (frame.top || 0).toFixed(1), ")"), React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.innerText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 40,
            columnNumber: 13
          }
        }, (frame.width || 0).toFixed(1), " \xD7", ' ', (frame.height || 0).toFixed(1)))));
      }
    }]);

    return BoxInspector;
  }(React.Component);

  var BoxContainer = function (_React$Component2) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(BoxContainer, _React$Component2);

    var _super2 = _createSuper(BoxContainer);

    function BoxContainer() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, BoxContainer);

      return _super2.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(BoxContainer, [{
      key: "render",
      value: function render() {
        var box = this.props.box;
        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.box,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 55,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.row,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 56,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: [this.props.titleStyle, styles.label],
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 58,
            columnNumber: 11
          }
        }, this.props.title), React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.boxText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 61,
            columnNumber: 11
          }
        }, box.top)), React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.row,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 63,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.boxText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 64,
            columnNumber: 11
          }
        }, box.left), this.props.children, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.boxText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66,
            columnNumber: 11
          }
        }, box.right)), React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.boxText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68,
            columnNumber: 9
          }
        }, box.bottom));
      }
    }]);

    return BoxContainer;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/StyleSheet").create({
    row: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    marginLabel: {
      width: 60
    },
    label: {
      fontSize: 10,
      color: 'rgb(255,100,0)',
      marginLeft: 5,
      flex: 1,
      textAlign: 'left',
      top: -3
    },
    innerText: {
      color: 'yellow',
      fontSize: 12,
      textAlign: 'center',
      width: 70
    },
    box: {
      borderWidth: 1,
      borderColor: 'grey'
    },
    boxText: {
      color: 'white',
      fontSize: 12,
      marginHorizontal: 3,
      marginVertical: 2,
      textAlign: 'center'
    }
  });

  module.exports = BoxInspector;
},460,[13,16,1,14,9,10,453,178,191,183],"node_modules/react-native/Libraries/Inspector/BoxInspector.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var PerformanceOverlay = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(PerformanceOverlay, _React$Component);

    var _super = _createSuper(PerformanceOverlay);

    function PerformanceOverlay() {
      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, PerformanceOverlay);

      return _super.apply(this, arguments);
    }

    _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/createClass")(PerformanceOverlay, [{
      key: "render",
      value: function render() {
        var perfLogs = _$$_REQUIRE(_dependencyMap[6], "../Utilities/GlobalPerformanceLogger").getTimespans();

        var items = [];

        for (var key in perfLogs) {
          var _perfLogs$key;

          if ((_perfLogs$key = perfLogs[key]) != null && _perfLogs$key.totalTime) {
            var unit = key === 'BundleSize' ? 'b' : 'ms';
            items.push(React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
              style: styles.row,
              key: key,
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 28,
                columnNumber: 11
              }
            }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
              style: [styles.text, styles.label],
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 29,
                columnNumber: 13
              }
            }, key), React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
              style: [styles.text, styles.totalTime],
              __self: this,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 30,
                columnNumber: 13
              }
            }, perfLogs[key].totalTime + unit)));
          }
        }

        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.container,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 38,
            columnNumber: 12
          }
        }, items);
      }
    }]);

    return PerformanceOverlay;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[9], "../StyleSheet/StyleSheet").create({
    container: {
      height: 100,
      paddingTop: 10
    },
    label: {
      flex: 1
    },
    row: {
      flexDirection: 'row',
      paddingHorizontal: 10
    },
    text: {
      color: 'white',
      fontSize: 12
    },
    totalTime: {
      paddingRight: 100
    }
  });

  module.exports = PerformanceOverlay;
},461,[13,16,1,14,9,10,97,178,191,183],"node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js";

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/getPrototypeOf")(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/possibleConstructorReturn")(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var React = _$$_REQUIRE(_dependencyMap[2], "react");

  var LISTVIEW_CELL_HEIGHT = 15;
  var nextXHRId = 0;

  function getStringByValue(value) {
    if (value === undefined) {
      return 'undefined';
    }

    if (typeof value === 'object') {
      return JSON.stringify(value);
    }

    if (typeof value === 'string' && value.length > 500) {
      return String(value).substr(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
    }

    return value;
  }

  function getTypeShortName(type) {
    if (type === 'XMLHttpRequest') {
      return 'XHR';
    } else if (type === 'WebSocket') {
      return 'WS';
    }

    return '';
  }

  function keyExtractor(request) {
    return String(request.id);
  }

  var NetworkOverlay = function (_React$Component) {
    _$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits")(NetworkOverlay, _React$Component);

    var _super = _createSuper(NetworkOverlay);

    function NetworkOverlay() {
      var _this;

      _$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/classCallCheck")(this, NetworkOverlay);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this._requestsListViewScrollMetrics = {
        offset: 0,
        visibleLength: 0,
        contentLength: 0
      };
      _this._socketIdMap = {};
      _this._xhrIdMap = {};
      _this.state = {
        detailRowId: null,
        requests: []
      };

      _this._renderItem = function (_ref) {
        var item = _ref.item,
            index = _ref.index;
        var tableRowViewStyle = [styles.tableRow, index % 2 === 1 ? styles.tableRowOdd : styles.tableRowEven, index === _this.state.detailRowId && styles.tableRowPressed];
        var urlCellViewStyle = styles.urlCellView;
        var methodCellViewStyle = styles.methodCellView;
        return React.createElement(_$$_REQUIRE(_dependencyMap[5], "../Components/Touchable/TouchableHighlight"), {
          onPress: function onPress() {
            _this._pressRow(index);
          },
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 339,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 343,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: tableRowViewStyle,
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 344,
            columnNumber: 11
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: urlCellViewStyle,
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 345,
            columnNumber: 13
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.cellText,
          numberOfLines: 1,
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 346,
            columnNumber: 15
          }
        }, item.url)), React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: methodCellViewStyle,
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 350,
            columnNumber: 13
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.cellText,
          numberOfLines: 1,
          __self: _$$_REQUIRE(_dependencyMap[6], "@babel/runtime/helpers/assertThisInitialized")(_this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 351,
            columnNumber: 15
          }
        }, getTypeShortName(item.type))))));
      };

      _this._indicateAdditionalRequests = function () {
        if (_this._requestsListView) {
          var distanceFromEndThreshold = LISTVIEW_CELL_HEIGHT * 2;
          var _this$_requestsListVi = _this._requestsListViewScrollMetrics,
              offset = _this$_requestsListVi.offset,
              visibleLength = _this$_requestsListVi.visibleLength,
              contentLength = _this$_requestsListVi.contentLength;
          var distanceFromEnd = contentLength - visibleLength - offset;
          var isCloseToEnd = distanceFromEnd <= distanceFromEndThreshold;

          if (isCloseToEnd) {
            _this._requestsListView.scrollToEnd();
          } else {
            _this._requestsListView.flashScrollIndicators();
          }
        }
      };

      _this._captureRequestsListView = function (listRef) {
        _this._requestsListView = listRef;
      };

      _this._requestsListViewOnScroll = function (e) {
        _this._requestsListViewScrollMetrics.offset = e.nativeEvent.contentOffset.y;
        _this._requestsListViewScrollMetrics.visibleLength = e.nativeEvent.layoutMeasurement.height;
        _this._requestsListViewScrollMetrics.contentLength = e.nativeEvent.contentSize.height;
      };

      _this._scrollDetailToTop = function () {
        if (_this._detailScrollView) {
          _this._detailScrollView.scrollTo({
            y: 0,
            animated: false
          });
        }
      };

      _this._closeButtonClicked = function () {
        _this.setState({
          detailRowId: null
        });
      };

      return _this;
    }

    _$$_REQUIRE(_dependencyMap[9], "@babel/runtime/helpers/createClass")(NetworkOverlay, [{
      key: "_enableXHRInterception",
      value: function _enableXHRInterception() {
        var _this2 = this;

        if (_$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").isInterceptorEnabled()) {
          return;
        }

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").setOpenCallback(function (method, url, xhr) {
          xhr._index = nextXHRId++;
          var xhrIndex = _this2.state.requests.length;
          _this2._xhrIdMap[xhr._index] = xhrIndex;
          var _xhr = {
            id: xhrIndex,
            type: 'XMLHttpRequest',
            method: method,
            url: url
          };

          _this2.setState({
            requests: _this2.state.requests.concat(_xhr)
          }, _this2._indicateAdditionalRequests);
        });

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").setRequestHeaderCallback(function (header, value, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2.setState(function (_ref2) {
            var requests = _ref2.requests;
            var networkRequestInfo = requests[xhrIndex];

            if (!networkRequestInfo.requestHeaders) {
              networkRequestInfo.requestHeaders = {};
            }

            networkRequestInfo.requestHeaders[header] = value;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").setSendCallback(function (data, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2.setState(function (_ref3) {
            var requests = _ref3.requests;
            var networkRequestInfo = requests[xhrIndex];
            networkRequestInfo.dataSent = data;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").setHeaderReceivedCallback(function (type, size, responseHeaders, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2.setState(function (_ref4) {
            var requests = _ref4.requests;
            var networkRequestInfo = requests[xhrIndex];
            networkRequestInfo.responseContentType = type;
            networkRequestInfo.responseSize = size;
            networkRequestInfo.responseHeaders = responseHeaders;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").setResponseCallback(function (status, timeout, response, responseURL, responseType, xhr) {
          var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);

          if (xhrIndex === -1) {
            return;
          }

          _this2.setState(function (_ref5) {
            var requests = _ref5.requests;
            var networkRequestInfo = requests[xhrIndex];
            networkRequestInfo.status = status;
            networkRequestInfo.timeout = timeout;
            networkRequestInfo.response = response;
            networkRequestInfo.responseURL = responseURL;
            networkRequestInfo.responseType = responseType;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").enableInterception();
      }
    }, {
      key: "_enableWebSocketInterception",
      value: function _enableWebSocketInterception() {
        var _this3 = this;

        if (_$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").isInterceptorEnabled()) {
          return;
        }

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setConnectCallback(function (url, protocols, options, socketId) {
          var socketIndex = _this3.state.requests.length;
          _this3._socketIdMap[socketId] = socketIndex;
          var _webSocket = {
            id: socketIndex,
            type: 'WebSocket',
            url: url,
            protocols: protocols
          };

          _this3.setState({
            requests: _this3.state.requests.concat(_webSocket)
          }, _this3._indicateAdditionalRequests);
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setCloseCallback(function (statusCode, closeReason, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          if (statusCode !== null && closeReason !== null) {
            _this3.setState(function (_ref6) {
              var requests = _ref6.requests;
              var networkRequestInfo = requests[socketIndex];
              networkRequestInfo.status = statusCode;
              networkRequestInfo.closeReason = closeReason;
              return {
                requests: requests
              };
            });
          }
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setSendCallback(function (data, socketId) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3.setState(function (_ref7) {
            var requests = _ref7.requests;
            var networkRequestInfo = requests[socketIndex];

            if (!networkRequestInfo.messages) {
              networkRequestInfo.messages = '';
            }

            networkRequestInfo.messages += 'Sent: ' + JSON.stringify(data) + '\n';
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setOnMessageCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3.setState(function (_ref8) {
            var requests = _ref8.requests;
            var networkRequestInfo = requests[socketIndex];

            if (!networkRequestInfo.messages) {
              networkRequestInfo.messages = '';
            }

            networkRequestInfo.messages += 'Received: ' + JSON.stringify(message) + '\n';
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setOnCloseCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3.setState(function (_ref9) {
            var requests = _ref9.requests;
            var networkRequestInfo = requests[socketIndex];
            networkRequestInfo.serverClose = message;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").setOnErrorCallback(function (socketId, message) {
          var socketIndex = _this3._socketIdMap[socketId];

          if (socketIndex === undefined) {
            return;
          }

          _this3.setState(function (_ref10) {
            var requests = _ref10.requests;
            var networkRequestInfo = requests[socketIndex];
            networkRequestInfo.serverError = message;
            return {
              requests: requests
            };
          });
        });

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").enableInterception();
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._enableXHRInterception();

        this._enableWebSocketInterception();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _$$_REQUIRE(_dependencyMap[10], "../Network/XHRInterceptor").disableInterception();

        _$$_REQUIRE(_dependencyMap[11], "../WebSocket/WebSocketInterceptor").disableInterception();
      }
    }, {
      key: "_renderItemDetail",
      value: function _renderItemDetail(id) {
        var _this4 = this;

        var requestItem = this.state.requests[id];
        var details = Object.keys(requestItem).map(function (key) {
          if (key === 'id') {
            return;
          }

          return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
            style: styles.detailViewRow,
            key: key,
            __self: _this4,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 368,
              columnNumber: 9
            }
          }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
            style: [styles.detailViewText, styles.detailKeyCellView],
            __self: _this4,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 369,
              columnNumber: 11
            }
          }, key), React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
            style: [styles.detailViewText, styles.detailValueCellView],
            __self: _this4,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 372,
              columnNumber: 11
            }
          }, getStringByValue(requestItem[key])));
        });
        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 380,
            columnNumber: 7
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[5], "../Components/Touchable/TouchableHighlight"), {
          style: styles.closeButton,
          onPress: this._closeButtonClicked,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 381,
            columnNumber: 9
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 384,
            columnNumber: 11
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.closeButtonText,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 385,
            columnNumber: 13
          }
        }, "v"))), React.createElement(_$$_REQUIRE(_dependencyMap[12], "../Components/ScrollView/ScrollView"), {
          style: styles.detailScrollView,
          ref: function ref(scrollRef) {
            return _this4._detailScrollView = scrollRef;
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 388,
            columnNumber: 9
          }
        }, details));
      }
    }, {
      key: "_pressRow",
      value: function _pressRow(rowId) {
        this.setState({
          detailRowId: rowId
        }, this._scrollDetailToTop);
      }
    }, {
      key: "_getRequestIndexByXHRID",
      value: function _getRequestIndexByXHRID(index) {
        if (index === undefined) {
          return -1;
        }

        var xhrIndex = this._xhrIdMap[index];

        if (xhrIndex === undefined) {
          return -1;
        } else {
          return xhrIndex;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state = this.state,
            requests = _this$state.requests,
            detailRowId = _this$state.detailRowId;
        return React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.container,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 464,
            columnNumber: 7
          }
        }, detailRowId != null && this._renderItemDetail(detailRowId), React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.listViewTitle,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 466,
            columnNumber: 9
          }
        }, requests.length > 0 && React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.tableRow,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 468,
            columnNumber: 13
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.urlTitleCellView,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 469,
            columnNumber: 15
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.cellText,
          numberOfLines: 1,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 470,
            columnNumber: 17
          }
        }, "URL")), React.createElement(_$$_REQUIRE(_dependencyMap[7], "../Components/View/View"), {
          style: styles.methodTitleCellView,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 474,
            columnNumber: 15
          }
        }, React.createElement(_$$_REQUIRE(_dependencyMap[8], "../Text/Text"), {
          style: styles.cellText,
          numberOfLines: 1,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 475,
            columnNumber: 17
          }
        }, "Type")))), React.createElement(_$$_REQUIRE(_dependencyMap[13], "../Lists/FlatList"), {
          ref: this._captureRequestsListView,
          onScroll: this._requestsListViewOnScroll,
          style: styles.listView,
          data: requests,
          renderItem: this._renderItem,
          keyExtractor: keyExtractor,
          extraData: this.state,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 483,
            columnNumber: 9
          }
        }));
      }
    }]);

    return NetworkOverlay;
  }(React.Component);

  var styles = _$$_REQUIRE(_dependencyMap[14], "../StyleSheet/StyleSheet").create({
    container: {
      paddingTop: 10,
      paddingBottom: 10,
      paddingLeft: 5,
      paddingRight: 5
    },
    listViewTitle: {
      height: 20
    },
    listView: {
      flex: 1,
      height: 60
    },
    tableRow: {
      flexDirection: 'row',
      flex: 1,
      height: LISTVIEW_CELL_HEIGHT
    },
    tableRowEven: {
      backgroundColor: '#555'
    },
    tableRowOdd: {
      backgroundColor: '#000'
    },
    tableRowPressed: {
      backgroundColor: '#3B5998'
    },
    cellText: {
      color: 'white',
      fontSize: 12
    },
    methodTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 1
    },
    urlTitleCellView: {
      height: 18,
      borderColor: '#DCD7CD',
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      backgroundColor: '#444',
      flex: 5,
      paddingLeft: 3
    },
    methodCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderRightWidth: 1,
      alignItems: 'center',
      justifyContent: 'center',
      flex: 1
    },
    urlCellView: {
      height: 15,
      borderColor: '#DCD7CD',
      borderLeftWidth: 1,
      borderRightWidth: 1,
      justifyContent: 'center',
      flex: 5,
      paddingLeft: 3
    },
    detailScrollView: {
      flex: 1,
      height: 180,
      marginTop: 5,
      marginBottom: 5
    },
    detailKeyCellView: {
      flex: 1.3
    },
    detailValueCellView: {
      flex: 2
    },
    detailViewRow: {
      flexDirection: 'row',
      paddingHorizontal: 3
    },
    detailViewText: {
      color: 'white',
      fontSize: 11
    },
    closeButtonText: {
      color: 'white',
      fontSize: 10
    },
    closeButton: {
      marginTop: 5,
      backgroundColor: '#888',
      justifyContent: 'center',
      alignItems: 'center'
    }
  });

  module.exports = NetworkOverlay;
},462,[13,16,1,14,9,316,18,178,191,10,463,464,215,212,183],"node_modules/react-native/Libraries/Inspector/NetworkOverlay.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var originalXHROpen = _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.open;

  var originalXHRSend = _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.send;

  var originalXHRSetRequestHeader = _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.setRequestHeader;

  var openCallback;
  var sendCallback;
  var requestHeaderCallback;
  var headerReceivedCallback;
  var responseCallback;
  var _isInterceptorEnabled = false;
  var XHRInterceptor = {
    setOpenCallback: function setOpenCallback(callback) {
      openCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
      headerReceivedCallback = callback;
    },
    setResponseCallback: function setResponseCallback(callback) {
      responseCallback = callback;
    },
    setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
      requestHeaderCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.open = function (method, url) {
        if (openCallback) {
          openCallback(method, url, this);
        }

        originalXHROpen.apply(this, arguments);
      };

      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.setRequestHeader = function (header, value) {
        if (requestHeaderCallback) {
          requestHeaderCallback(header, value, this);
        }

        originalXHRSetRequestHeader.apply(this, arguments);
      };

      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.send = function (data) {
        var _this = this;

        if (sendCallback) {
          sendCallback(data, this);
        }

        if (this.addEventListener) {
          this.addEventListener('readystatechange', function () {
            if (!_isInterceptorEnabled) {
              return;
            }

            if (_this.readyState === _this.HEADERS_RECEIVED) {
              var contentTypeString = _this.getResponseHeader('Content-Type');

              var contentLengthString = _this.getResponseHeader('Content-Length');

              var responseContentType, responseSize;

              if (contentTypeString) {
                responseContentType = contentTypeString.split(';')[0];
              }

              if (contentLengthString) {
                responseSize = parseInt(contentLengthString, 10);
              }

              if (headerReceivedCallback) {
                headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
              }
            }

            if (_this.readyState === _this.DONE) {
              if (responseCallback) {
                responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
              }
            }
          }, false);
        }

        originalXHRSend.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.send = originalXHRSend;
      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.open = originalXHROpen;
      _$$_REQUIRE(_dependencyMap[0], "./XMLHttpRequest").prototype.setRequestHeader = originalXHRSetRequestHeader;
      responseCallback = null;
      openCallback = null;
      sendCallback = null;
      headerReceivedCallback = null;
      requestHeaderCallback = null;
    }
  };
  module.exports = XHRInterceptor;
},463,[91],"node_modules/react-native/Libraries/Network/XHRInterceptor.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _NativeEventEmitter = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../EventEmitter/NativeEventEmitter"));

  var _NativeWebSocketModule = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./NativeWebSocketModule"));

  var _base64Js = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "base64-js"));

  var originalRCTWebSocketConnect = _NativeWebSocketModule.default.connect;
  var originalRCTWebSocketSend = _NativeWebSocketModule.default.send;
  var originalRCTWebSocketSendBinary = _NativeWebSocketModule.default.sendBinary;
  var originalRCTWebSocketClose = _NativeWebSocketModule.default.close;
  var eventEmitter;
  var subscriptions;
  var closeCallback;
  var sendCallback;
  var connectCallback;
  var onOpenCallback;
  var onMessageCallback;
  var onErrorCallback;
  var onCloseCallback;
  var _isInterceptorEnabled = false;
  var WebSocketInterceptor = {
    setCloseCallback: function setCloseCallback(callback) {
      closeCallback = callback;
    },
    setSendCallback: function setSendCallback(callback) {
      sendCallback = callback;
    },
    setConnectCallback: function setConnectCallback(callback) {
      connectCallback = callback;
    },
    setOnOpenCallback: function setOnOpenCallback(callback) {
      onOpenCallback = callback;
    },
    setOnMessageCallback: function setOnMessageCallback(callback) {
      onMessageCallback = callback;
    },
    setOnErrorCallback: function setOnErrorCallback(callback) {
      onErrorCallback = callback;
    },
    setOnCloseCallback: function setOnCloseCallback(callback) {
      onCloseCallback = callback;
    },
    isInterceptorEnabled: function isInterceptorEnabled() {
      return _isInterceptorEnabled;
    },
    _unregisterEvents: function _unregisterEvents() {
      subscriptions.forEach(function (e) {
        return e.remove();
      });
      subscriptions = [];
    },
    _registerEvents: function _registerEvents() {
      subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {
        if (onMessageCallback) {
          onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
        }
      }), eventEmitter.addListener('websocketOpen', function (ev) {
        if (onOpenCallback) {
          onOpenCallback(ev.id);
        }
      }), eventEmitter.addListener('websocketClosed', function (ev) {
        if (onCloseCallback) {
          onCloseCallback(ev.id, {
            code: ev.code,
            reason: ev.reason
          });
        }
      }), eventEmitter.addListener('websocketFailed', function (ev) {
        if (onErrorCallback) {
          onErrorCallback(ev.id, {
            message: ev.message
          });
        }
      })];
    },
    enableInterception: function enableInterception() {
      if (_isInterceptorEnabled) {
        return;
      }

      eventEmitter = new _NativeEventEmitter.default(_NativeWebSocketModule.default);

      WebSocketInterceptor._registerEvents();

      _NativeWebSocketModule.default.connect = function (url, protocols, options, socketId) {
        if (connectCallback) {
          connectCallback(url, protocols, options, socketId);
        }

        originalRCTWebSocketConnect.apply(this, arguments);
      };

      _NativeWebSocketModule.default.send = function (data, socketId) {
        if (sendCallback) {
          sendCallback(data, socketId);
        }

        originalRCTWebSocketSend.apply(this, arguments);
      };

      _NativeWebSocketModule.default.sendBinary = function (data, socketId) {
        if (sendCallback) {
          sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
        }

        originalRCTWebSocketSendBinary.apply(this, arguments);
      };

      _NativeWebSocketModule.default.close = function () {
        if (closeCallback) {
          if (arguments.length === 3) {
            closeCallback(arguments[0], arguments[1], arguments[2]);
          } else {
            closeCallback(null, null, arguments[0]);
          }
        }

        originalRCTWebSocketClose.apply(this, arguments);
      };

      _isInterceptorEnabled = true;
    },
    _arrayBufferToString: function _arrayBufferToString(data) {
      var value = _base64Js.default.toByteArray(data).buffer;

      if (value === undefined || value === null) {
        return '(no value)';
      }

      if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
        return "ArrayBuffer {" + String(Array.from(new Uint8Array(value))) + "}";
      }

      return value;
    },
    disableInterception: function disableInterception() {
      if (!_isInterceptorEnabled) {
        return;
      }

      _isInterceptorEnabled = false;
      _NativeWebSocketModule.default.send = originalRCTWebSocketSend;
      _NativeWebSocketModule.default.sendBinary = originalRCTWebSocketSendBinary;
      _NativeWebSocketModule.default.close = originalRCTWebSocketClose;
      _NativeWebSocketModule.default.connect = originalRCTWebSocketConnect;
      connectCallback = null;
      closeCallback = null;
      sendCallback = null;
      onOpenCallback = null;
      onMessageCallback = null;
      onCloseCallback = null;
      onErrorCallback = null;

      WebSocketInterceptor._unregisterEvents();
    }
  };
  module.exports = WebSocketInterceptor;
},464,[7,101,111,99],"node_modules/react-native/Libraries/WebSocket/WebSocketInterceptor.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._LogBoxNotificationContainer = _LogBoxNotificationContainer;
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../StyleSheet/StyleSheet"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../Components/View/View"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], "./Data/LogBoxData"));

  var _LogBoxLog = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "./Data/LogBoxLog"));

  var _LogBoxNotification = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./UI/LogBoxNotification"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/LogBoxNotificationContainer.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _LogBoxNotificationContainer(props) {
    var logs = props.logs;

    var onDismissWarns = function onDismissWarns() {
      LogBoxData.clearWarnings();
    };

    var onDismissErrors = function onDismissErrors() {
      LogBoxData.clearErrors();
    };

    var setSelectedLog = function setSelectedLog(index) {
      LogBoxData.setSelectedLog(index);
    };

    function openLog(log) {
      var index = logs.length - 1;

      while (index > 0 && logs[index] !== log) {
        index -= 1;
      }

      setSelectedLog(index);
    }

    if (logs.length === 0 || props.isDisabled === true) {
      return null;
    }

    var warnings = logs.filter(function (log) {
      return log.level === 'warn';
    });
    var errors = logs.filter(function (log) {
      return log.level === 'error' || log.level === 'fatal';
    });
    return React.createElement(_View.default, {
      style: styles.list,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 59,
        columnNumber: 5
      }
    }, warnings.length > 0 && React.createElement(_View.default, {
      style: styles.toast,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 61,
        columnNumber: 9
      }
    }, React.createElement(_LogBoxNotification.default, {
      log: warnings[warnings.length - 1],
      level: "warn",
      totalLogCount: warnings.length,
      onPressOpen: function onPressOpen() {
        return openLog(warnings[warnings.length - 1]);
      },
      onPressDismiss: onDismissWarns,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 62,
        columnNumber: 11
      }
    })), errors.length > 0 && React.createElement(_View.default, {
      style: styles.toast,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72,
        columnNumber: 9
      }
    }, React.createElement(_LogBoxNotification.default, {
      log: errors[errors.length - 1],
      level: "error",
      totalLogCount: errors.length,
      onPressOpen: function onPressOpen() {
        return openLog(errors[errors.length - 1]);
      },
      onPressDismiss: onDismissErrors,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 11
      }
    })));
  }

  var styles = _StyleSheet.default.create({
    list: {
      bottom: 20,
      left: 10,
      right: 10,
      position: 'absolute'
    },
    toast: {
      borderRadius: 8,
      marginBottom: 5,
      overflow: 'hidden'
    }
  });

  var _default = LogBoxData.withSubscription(_LogBoxNotificationContainer);

  exports.default = _default;
},465,[1,7,183,178,389,390,466],"node_modules/react-native/Libraries/LogBox/LogBoxNotificationContainer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _Image = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Image/Image"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Components/View/View"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "./LogBoxStyle"));

  var _LogBoxLog = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "../Data/LogBoxLog"));

  var _LogBoxMessage = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./LogBoxMessage"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10], "../Data/LogBoxData"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxNotification.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxLogNotification(props) {
    var totalLogCount = props.totalLogCount,
        level = props.level,
        log = props.log;
    React.useEffect(function () {
      LogBoxData.symbolicateLogLazy(log);
    }, [log]);
    return React.createElement(_View.default, {
      style: toastStyles.container,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 41,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxButton.default, {
      onPress: props.onPressOpen,
      style: toastStyles.press,
      backgroundColor: {
        default: LogBoxStyle.getBackgroundColor(1),
        pressed: LogBoxStyle.getBackgroundColor(0.9)
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 42,
        columnNumber: 7
      }
    }, React.createElement(_View.default, {
      style: toastStyles.content,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 49,
        columnNumber: 9
      }
    }, React.createElement(CountBadge, {
      count: totalLogCount,
      level: level,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 50,
        columnNumber: 11
      }
    }), React.createElement(Message, {
      message: log.message,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 51,
        columnNumber: 11
      }
    }), React.createElement(DismissButton, {
      onPress: props.onPressDismiss,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 52,
        columnNumber: 11
      }
    }))));
  }

  function CountBadge(props) {
    return React.createElement(_View.default, {
      style: countStyles.outside,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 61,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: [countStyles.inside, countStyles[props.level]],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 64,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: countStyles.text,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 65,
        columnNumber: 9
      }
    }, props.count <= 1 ? '!' : props.count)));
  }

  function Message(props) {
    return React.createElement(_View.default, {
      style: messageStyles.container,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 75,
        columnNumber: 5
      }
    }, React.createElement(_Text.default, {
      numberOfLines: 1,
      style: messageStyles.text,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 76,
        columnNumber: 7
      }
    }, props.message && React.createElement(_LogBoxMessage.default, {
      plaintext: true,
      message: props.message,
      style: messageStyles.substitutionText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 78,
        columnNumber: 11
      }
    })));
  }

  function DismissButton(props) {
    return React.createElement(_View.default, {
      style: dismissStyles.container,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 91,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: LogBoxStyle.getTextColor(0.3),
        pressed: LogBoxStyle.getTextColor(0.5)
      },
      hitSlop: {
        top: 12,
        right: 10,
        bottom: 12,
        left: 10
      },
      onPress: props.onPress,
      style: dismissStyles.press,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 92,
        columnNumber: 7
      }
    }, React.createElement(_Image.default, {
      source: _$$_REQUIRE(_dependencyMap[11], "./LogBoxImages/close.png"),
      style: dismissStyles.image,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 105,
        columnNumber: 9
      }
    })));
  }

  var countStyles = _StyleSheet.default.create({
    warn: {
      backgroundColor: LogBoxStyle.getWarningColor(1)
    },
    error: {
      backgroundColor: LogBoxStyle.getErrorColor(1)
    },
    log: {
      backgroundColor: LogBoxStyle.getLogColor(1)
    },
    outside: {
      padding: 2,
      borderRadius: 25,
      backgroundColor: '#fff',
      marginRight: 8
    },
    inside: {
      minWidth: 18,
      paddingLeft: 4,
      paddingRight: 4,
      borderRadius: 25,
      fontWeight: '600'
    },
    text: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      lineHeight: 18,
      textAlign: 'center',
      fontWeight: '600',
      textShadowColor: LogBoxStyle.getBackgroundColor(0.4),
      textShadowOffset: {
        width: 0,
        height: 0
      },
      textShadowRadius: 3
    }
  });

  var messageStyles = _StyleSheet.default.create({
    container: {
      alignSelf: 'stretch',
      flexGrow: 1,
      flexShrink: 1,
      flexBasis: 'auto',
      borderLeftColor: LogBoxStyle.getTextColor(0.2),
      borderLeftWidth: 1,
      paddingLeft: 8
    },
    text: {
      color: LogBoxStyle.getTextColor(1),
      flex: 1,
      fontSize: 14,
      lineHeight: 22
    },
    substitutionText: {
      color: LogBoxStyle.getTextColor(0.6)
    }
  });

  var dismissStyles = _StyleSheet.default.create({
    container: {
      alignSelf: 'center',
      flexDirection: 'row',
      flexGrow: 0,
      flexShrink: 0,
      flexBasis: 'auto',
      marginLeft: 5
    },
    press: {
      height: 20,
      width: 20,
      borderRadius: 25,
      alignSelf: 'flex-end',
      alignItems: 'center',
      justifyContent: 'center'
    },
    image: {
      height: 8,
      width: 8,
      tintColor: LogBoxStyle.getBackgroundColor(1)
    }
  });

  var toastStyles = _StyleSheet.default.create({
    container: {
      height: 48,
      position: 'relative',
      width: '100%',
      justifyContent: 'center',
      marginTop: 0.5,
      backgroundColor: LogBoxStyle.getTextColor(1)
    },
    press: {
      height: 48,
      position: 'relative',
      width: '100%',
      justifyContent: 'center',
      marginTop: 0.5,
      paddingHorizontal: 12
    },
    content: {
      alignItems: 'flex-start',
      flexDirection: 'row',
      borderRadius: 8,
      flexGrow: 0,
      flexShrink: 0,
      flexBasis: 'auto'
    }
  });

  var _default = LogBoxLogNotification;
  exports.default = _default;
},466,[1,7,272,183,191,178,467,468,390,469,389,470],"node_modules/react-native/Libraries/LogBox/UI/LogBoxNotification.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/StyleSheet"));

  var _TouchableWithoutFeedback = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Components/Touchable/TouchableWithoutFeedback"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Components/View/View"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6], "./LogBoxStyle"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxButton(props) {
    var _React$useState = React.useState(false),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        pressed = _React$useState2[0],
        setPressed = _React$useState2[1];

    var backgroundColor = props.backgroundColor;

    if (!backgroundColor) {
      backgroundColor = {
        default: LogBoxStyle.getBackgroundColor(0.95),
        pressed: LogBoxStyle.getBackgroundColor(0.6)
      };
    }

    var content = React.createElement(_View.default, {
      style: _StyleSheet.default.compose({
        backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default
      }, props.style),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 45,
        columnNumber: 5
      }
    }, props.children);
    return props.onPress == null ? content : React.createElement(_TouchableWithoutFeedback.default, {
      hitSlop: props.hitSlop,
      onPress: props.onPress,
      onPressIn: function onPressIn() {
        return setPressed(true);
      },
      onPressOut: function onPressOut() {
        return setPressed(false);
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 61,
        columnNumber: 5
      }
    }, content);
  }

  var _default = LogBoxButton;
  exports.default = _default;
},467,[7,31,1,183,314,178,468],"node_modules/react-native/Libraries/LogBox/UI/LogBoxButton.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getBackgroundColor = getBackgroundColor;
  exports.getBackgroundLightColor = getBackgroundLightColor;
  exports.getBackgroundDarkColor = getBackgroundDarkColor;
  exports.getWarningColor = getWarningColor;
  exports.getWarningDarkColor = getWarningDarkColor;
  exports.getFatalColor = getFatalColor;
  exports.getFatalDarkColor = getFatalDarkColor;
  exports.getErrorColor = getErrorColor;
  exports.getErrorDarkColor = getErrorDarkColor;
  exports.getLogColor = getLogColor;
  exports.getWarningHighlightColor = getWarningHighlightColor;
  exports.getDividerColor = getDividerColor;
  exports.getHighlightColor = getHighlightColor;
  exports.getTextColor = getTextColor;

  function getBackgroundColor(opacity) {
    return "rgba(51, 51, 51, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getBackgroundLightColor(opacity) {
    return "rgba(69, 69, 69, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getBackgroundDarkColor(opacity) {
    return "rgba(34, 34, 34, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getWarningColor(opacity) {
    return "rgba(250, 186, 48, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getWarningDarkColor(opacity) {
    return "rgba(224, 167, 8, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getFatalColor(opacity) {
    return "rgba(243, 83, 105, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getFatalDarkColor(opacity) {
    return "rgba(208, 75, 95, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getErrorColor(opacity) {
    return "rgba(243, 83, 105, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getErrorDarkColor(opacity) {
    return "rgba(208, 75, 95, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getLogColor(opacity) {
    return "rgba(119, 119, 119, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getWarningHighlightColor(opacity) {
    return "rgba(252, 176, 29, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getDividerColor(opacity) {
    return "rgba(255, 255, 255, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getHighlightColor(opacity) {
    return "rgba(252, 176, 29, " + (opacity == null ? 1 : opacity) + ")";
  }

  function getTextColor(opacity) {
    return "rgba(255, 255, 255, " + (opacity == null ? 1 : opacity) + ")";
  }
},468,[],"node_modules/react-native/Libraries/LogBox/UI/LogBoxStyle.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Text/Text"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxMessage.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var cleanContent = function cleanContent(content) {
    return content.replace(/^(TransformError |Warning: (Warning: )?|Error: )/g, '');
  };

  function LogBoxMessage(props) {
    var _this = this;

    var _props$message = props.message,
        content = _props$message.content,
        substitutions = _props$message.substitutions;

    if (props.plaintext === true) {
      return React.createElement(_Text.default, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34,
          columnNumber: 12
        }
      }, cleanContent(content));
    }

    var maxLength = props.maxLength != null ? props.maxLength : Infinity;
    var substitutionStyle = props.style;
    var elements = [];
    var length = 0;

    var createUnderLength = function createUnderLength(key, message, style) {
      var cleanMessage = cleanContent(message);

      if (props.maxLength != null) {
        cleanMessage = cleanMessage.slice(0, props.maxLength - length);
      }

      if (length < maxLength) {
        elements.push(React.createElement(_Text.default, {
          key: key,
          style: style,
          __self: _this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 50,
            columnNumber: 9
          }
        }, cleanMessage));
      }

      length += cleanMessage.length;
    };

    var lastOffset = substitutions.reduce(function (prevOffset, substitution, index) {
      var key = String(index);

      if (substitution.offset > prevOffset) {
        var prevPart = content.substr(prevOffset, substitution.offset - prevOffset);
        createUnderLength(key, prevPart);
      }

      var substititionPart = content.substr(substitution.offset, substitution.length);
      createUnderLength(key + '.5', substititionPart, substitutionStyle);
      return substitution.offset + substitution.length;
    }, 0);

    if (lastOffset < content.length) {
      var lastPart = content.substr(lastOffset);
      createUnderLength('-1', lastPart);
    }

    return React.createElement(React.Fragment, null, elements);
  }

  var _default = LogBoxMessage;
  exports.default = _default;
},469,[1,7,191],"node_modules/react-native/Libraries/LogBox/UI/LogBoxMessage.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
    "width": 28,
    "height": 28,
    "scales": [1],
    "hash": "c00b5b51f0fd354e216f319a78fb252a",
    "name": "close",
    "type": "png"
  });
},470,[471],"node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/close.png");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = _$$_REQUIRE(_dependencyMap[0], "@react-native/assets/registry");
},471,[172],"node_modules/react-native/Libraries/Image/AssetRegistry.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Commands = void 0;

  var _requireNativeComponent = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../ReactNative/requireNativeComponent"));

  var _codegenNativeCommands = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/codegenNativeCommands"));

  var Commands = (0, _codegenNativeCommands.default)({
    supportedCommands: ['focus', 'blur', 'setTextAndSelection']
  });
  exports.Commands = Commands;
  var SinglelineTextInputNativeComponent = (0, _requireNativeComponent.default)('RCTMultilineTextInputView');
  var _default = SinglelineTextInputNativeComponent;
  exports.default = _default;
},472,[7,53,138],"node_modules/react-native/Libraries/Components/TextInput/RCTMultilineTextInputNativeComponent.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isAsyncDebugging = void 0;
  var isAsyncDebugging = false;
  exports.isAsyncDebugging = isAsyncDebugging;

  if (__DEV__) {
    exports.isAsyncDebugging = isAsyncDebugging = !global.nativeExtensions && !global.nativeCallSyncHook && !global.RN$Bridgeless;
  }
},473,[],"node_modules/react-native/Libraries/Utilities/DebugEnvironment.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  if (__DEV__) {
    (function () {
      "use strict";

      var React = _$$_REQUIRE(_dependencyMap[0], "react");

      _$$_REQUIRE(_dependencyMap[1], "react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore");

      var ReactNativePrivateInterface = _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/ReactPrivate/ReactNativePrivateInterface");

      var Scheduler = _$$_REQUIRE(_dependencyMap[3], "scheduler");

      var tracing = _$$_REQUIRE(_dependencyMap[4], "scheduler/tracing");

      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          printWarning("warn", format, args);
        }
      }

      function error(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          printWarning("error", format, args);
        }
      }

      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame.getStackAddendum();

          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }

          var argsWithFormat = args.map(function (item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }

      function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);

        try {
          func.apply(context, funcArgs);
        } catch (error) {
          this.onError(error);
        }
      }

      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");

          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            if (!(typeof document !== "undefined")) {
              throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }

            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");

            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback, false);

              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            }

            var funcArgs = Array.prototype.slice.call(arguments, 3);

            function callCallback() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context, funcArgs);
              didError = false;
            }

            var error;
            var didSetError = false;
            var isCrossOriginError = false;

            function handleWindowError(event) {
              error = event.error;
              didSetError = true;

              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }

              if (event.defaultPrevented) {
                if (error != null && typeof error === "object") {
                  try {
                    error._suppressLogging = true;
                  } catch (inner) {}
                }
              }
            }

            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);

            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }

            if (didCall && didError) {
              if (!didSetError) {
                error = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
              } else if (isCrossOriginError) {
                error = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://reactjs.org/link/crossorigin-error for more information.");
              }

              this.onError(error);
            }

            window.removeEventListener("error", handleWindowError);

            if (!didCall) {
              restoreAfterDispatch();
              return invokeGuardedCallbackProd.apply(this, arguments);
            }
          };
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function onError(error) {
          hasError = true;
          caughtError = error;
        }
      };

      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }

      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);

        if (hasError) {
          var error = clearCaughtError();

          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error;
          }
        }
      }

      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error;
        }
      }

      function hasCaughtError() {
        return hasError;
      }

      function clearCaughtError() {
        if (hasError) {
          var error = caughtError;
          hasError = false;
          caughtError = null;
          return error;
        } else {
          {
            throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      var getFiberCurrentPropsFromNode = null;
      var getInstanceFromNode = null;
      var getNodeFromInstance = null;

      function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
        getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
        getInstanceFromNode = getInstanceFromNodeImpl;
        getNodeFromInstance = getNodeFromInstanceImpl;
        {
          if (!getNodeFromInstance || !getInstanceFromNode) {
            error("EventPluginUtils.setComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
          }
        }
      }

      var validateEventDispatches;
      {
        validateEventDispatches = function validateEventDispatches(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          var listenersIsArr = Array.isArray(dispatchListeners);
          var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
          var instancesIsArr = Array.isArray(dispatchInstances);
          var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

          if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
            error("EventPluginUtils: Invalid `event`.");
          }
        };
      }

      function executeDispatch(event, listener, inst) {
        var type = event.type || "unknown-event";
        event.currentTarget = getNodeFromInstance(inst);
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }

      function executeDispatchesInOrder(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
          }
        } else if (dispatchListeners) {
          executeDispatch(event, dispatchListeners, dispatchInstances);
        }

        event._dispatchListeners = null;
        event._dispatchInstances = null;
      }

      function executeDispatchesInOrderStopAtTrueImpl(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        {
          validateEventDispatches(event);
        }

        if (Array.isArray(dispatchListeners)) {
          for (var i = 0; i < dispatchListeners.length; i++) {
            if (event.isPropagationStopped()) {
              break;
            }

            if (dispatchListeners[i](event, dispatchInstances[i])) {
              return dispatchInstances[i];
            }
          }
        } else if (dispatchListeners) {
          if (dispatchListeners(event, dispatchInstances)) {
            return dispatchInstances;
          }
        }

        return null;
      }

      function executeDispatchesInOrderStopAtTrue(event) {
        var ret = executeDispatchesInOrderStopAtTrueImpl(event);
        event._dispatchInstances = null;
        event._dispatchListeners = null;
        return ret;
      }

      function executeDirectDispatch(event) {
        {
          validateEventDispatches(event);
        }
        var dispatchListener = event._dispatchListeners;
        var dispatchInstance = event._dispatchInstances;

        if (!!Array.isArray(dispatchListener)) {
          throw Error("executeDirectDispatch(...): Invalid `event`.");
        }

        event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
        var res = dispatchListener ? dispatchListener(event) : null;
        event.currentTarget = null;
        event._dispatchListeners = null;
        event._dispatchInstances = null;
        return res;
      }

      function hasDispatches(event) {
        return !!event._dispatchListeners;
      }

      var EVENT_POOL_SIZE = 10;
      var EventInterface = {
        type: null,
        target: null,
        currentTarget: function currentTarget() {
          return null;
        },
        eventPhase: null,
        bubbles: null,
        cancelable: null,
        timeStamp: function timeStamp(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: null,
        isTrusted: null
      };

      function functionThatReturnsTrue() {
        return true;
      }

      function functionThatReturnsFalse() {
        return false;
      }

      function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
        {
          delete this.nativeEvent;
          delete this.preventDefault;
          delete this.stopPropagation;
          delete this.isDefaultPrevented;
          delete this.isPropagationStopped;
        }
        this.dispatchConfig = dispatchConfig;
        this._targetInst = targetInst;
        this.nativeEvent = nativeEvent;
        this._dispatchListeners = null;
        this._dispatchInstances = null;
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          if (!Interface.hasOwnProperty(propName)) {
            continue;
          }

          {
            delete this[propName];
          }
          var normalize = Interface[propName];

          if (normalize) {
            this[propName] = normalize(nativeEvent);
          } else {
            if (propName === "target") {
              this.target = nativeEventTarget;
            } else {
              this[propName] = nativeEvent[propName];
            }
          }
        }

        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

        if (defaultPrevented) {
          this.isDefaultPrevented = functionThatReturnsTrue;
        } else {
          this.isDefaultPrevented = functionThatReturnsFalse;
        }

        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }

      _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")(SyntheticEvent.prototype, {
        preventDefault: function preventDefault() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }

          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function stopPropagation() {
          var event = this.nativeEvent;

          if (!event) {
            return;
          }

          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }

          this.isPropagationStopped = functionThatReturnsTrue;
        },
        persist: function persist() {
          this.isPersistent = functionThatReturnsTrue;
        },
        isPersistent: functionThatReturnsFalse,
        destructor: function destructor() {
          var Interface = this.constructor.Interface;

          for (var propName in Interface) {
            {
              Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
            }
          }

          this.dispatchConfig = null;
          this._targetInst = null;
          this.nativeEvent = null;
          this.isDefaultPrevented = functionThatReturnsFalse;
          this.isPropagationStopped = functionThatReturnsFalse;
          this._dispatchListeners = null;
          this._dispatchInstances = null;
          {
            Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
            Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
            Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
            Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function () {}));
            Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function () {}));
          }
        }
      });

      SyntheticEvent.Interface = EventInterface;

      SyntheticEvent.extend = function (Interface) {
        var Super = this;

        var E = function E() {};

        E.prototype = Super.prototype;
        var prototype = new E();

        function Class() {
          return Super.apply(this, arguments);
        }

        _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")(prototype, Class.prototype);

        Class.prototype = prototype;
        Class.prototype.constructor = Class;
        Class.Interface = _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, Super.Interface, Interface);
        Class.extend = Super.extend;
        addEventPoolingTo(Class);
        return Class;
      };

      addEventPoolingTo(SyntheticEvent);

      function getPooledWarningPropertyDefinition(propName, getVal) {
        function set(val) {
          var action = isFunction ? "setting the method" : "setting the property";
          warn(action, "This is effectively a no-op");
          return val;
        }

        function get() {
          var action = isFunction ? "accessing the method" : "accessing the property";
          var result = isFunction ? "This is a no-op function" : "This is set to null";
          warn(action, result);
          return getVal;
        }

        function warn(action, result) {
          {
            error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://reactjs.org/link/event-pooling for more information.", action, propName, result);
          }
        }

        var isFunction = typeof getVal === "function";
        return {
          configurable: true,
          set: set,
          get: get
        };
      }

      function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
        var EventConstructor = this;

        if (EventConstructor.eventPool.length) {
          var instance = EventConstructor.eventPool.pop();
          EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
          return instance;
        }

        return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
      }

      function releasePooledEvent(event) {
        var EventConstructor = this;

        if (!(event instanceof EventConstructor)) {
          throw Error("Trying to release an event instance into a pool of a different type.");
        }

        event.destructor();

        if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
          EventConstructor.eventPool.push(event);
        }
      }

      function addEventPoolingTo(EventConstructor) {
        EventConstructor.getPooled = createOrGetPooledEvent;
        EventConstructor.eventPool = [];
        EventConstructor.release = releasePooledEvent;
      }

      var ResponderSyntheticEvent = SyntheticEvent.extend({
        touchHistory: function touchHistory(nativeEvent) {
          return null;
        }
      });
      var TOP_TOUCH_START = "topTouchStart";
      var TOP_TOUCH_MOVE = "topTouchMove";
      var TOP_TOUCH_END = "topTouchEnd";
      var TOP_TOUCH_CANCEL = "topTouchCancel";
      var TOP_SCROLL = "topScroll";
      var TOP_SELECTION_CHANGE = "topSelectionChange";

      function isStartish(topLevelType) {
        return topLevelType === TOP_TOUCH_START;
      }

      function isMoveish(topLevelType) {
        return topLevelType === TOP_TOUCH_MOVE;
      }

      function isEndish(topLevelType) {
        return topLevelType === TOP_TOUCH_END || topLevelType === TOP_TOUCH_CANCEL;
      }

      var startDependencies = [TOP_TOUCH_START];
      var moveDependencies = [TOP_TOUCH_MOVE];
      var endDependencies = [TOP_TOUCH_CANCEL, TOP_TOUCH_END];
      var MAX_TOUCH_BANK = 20;
      var touchBank = [];
      var touchHistory = {
        touchBank: touchBank,
        numberActiveTouches: 0,
        indexOfSingleActiveTouch: -1,
        mostRecentTimeStamp: 0
      };

      function timestampForTouch(touch) {
        return touch.timeStamp || touch.timestamp;
      }

      function createTouchRecord(touch) {
        return {
          touchActive: true,
          startPageX: touch.pageX,
          startPageY: touch.pageY,
          startTimeStamp: timestampForTouch(touch),
          currentPageX: touch.pageX,
          currentPageY: touch.pageY,
          currentTimeStamp: timestampForTouch(touch),
          previousPageX: touch.pageX,
          previousPageY: touch.pageY,
          previousTimeStamp: timestampForTouch(touch)
        };
      }

      function resetTouchRecord(touchRecord, touch) {
        touchRecord.touchActive = true;
        touchRecord.startPageX = touch.pageX;
        touchRecord.startPageY = touch.pageY;
        touchRecord.startTimeStamp = timestampForTouch(touch);
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchRecord.previousPageX = touch.pageX;
        touchRecord.previousPageY = touch.pageY;
        touchRecord.previousTimeStamp = timestampForTouch(touch);
      }

      function getTouchIdentifier(_ref) {
        var identifier = _ref.identifier;

        if (!(identifier != null)) {
          throw Error("Touch object is missing identifier.");
        }

        {
          if (identifier > MAX_TOUCH_BANK) {
            error("Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK);
          }
        }
        return identifier;
      }

      function recordTouchStart(touch) {
        var identifier = getTouchIdentifier(touch);
        var touchRecord = touchBank[identifier];

        if (touchRecord) {
          resetTouchRecord(touchRecord, touch);
        } else {
          touchBank[identifier] = createTouchRecord(touch);
        }

        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      }

      function recordTouchMove(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = true;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          {
            warn("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n" + "Touch Bank: %s", printTouch(touch), printTouchBank());
          }
        }
      }

      function recordTouchEnd(touch) {
        var touchRecord = touchBank[getTouchIdentifier(touch)];

        if (touchRecord) {
          touchRecord.touchActive = false;
          touchRecord.previousPageX = touchRecord.currentPageX;
          touchRecord.previousPageY = touchRecord.currentPageY;
          touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
          touchRecord.currentPageX = touch.pageX;
          touchRecord.currentPageY = touch.pageY;
          touchRecord.currentTimeStamp = timestampForTouch(touch);
          touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
        } else {
          {
            warn("Cannot record touch end without a touch start.\n" + "Touch End: %s\n" + "Touch Bank: %s", printTouch(touch), printTouchBank());
          }
        }
      }

      function printTouch(touch) {
        return JSON.stringify({
          identifier: touch.identifier,
          pageX: touch.pageX,
          pageY: touch.pageY,
          timestamp: timestampForTouch(touch)
        });
      }

      function printTouchBank() {
        var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));

        if (touchBank.length > MAX_TOUCH_BANK) {
          printed += " (original size: " + touchBank.length + ")";
        }

        return printed;
      }

      var ResponderTouchHistoryStore = {
        recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
          if (isMoveish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchMove);
          } else if (isStartish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchStart);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
            }
          } else if (isEndish(topLevelType)) {
            nativeEvent.changedTouches.forEach(recordTouchEnd);
            touchHistory.numberActiveTouches = nativeEvent.touches.length;

            if (touchHistory.numberActiveTouches === 1) {
              for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];

                if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
                  touchHistory.indexOfSingleActiveTouch = i;
                  break;
                }
              }

              {
                var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];

                if (activeRecord == null || !activeRecord.touchActive) {
                  error("Cannot find single active touch.");
                }
              }
            }
          }
        },
        touchHistory: touchHistory
      };

      function accumulate(current, next) {
        if (!(next != null)) {
          throw Error("accumulate(...): Accumulated items must not be null or undefined.");
        }

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          return current.concat(next);
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      function accumulateInto(current, next) {
        if (!(next != null)) {
          throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
        }

        if (current == null) {
          return next;
        }

        if (Array.isArray(current)) {
          if (Array.isArray(next)) {
            current.push.apply(current, next);
            return current;
          }

          current.push(next);
          return current;
        }

        if (Array.isArray(next)) {
          return [current].concat(next);
        }

        return [current, next];
      }

      function forEachAccumulated(arr, cb, scope) {
        if (Array.isArray(arr)) {
          arr.forEach(cb, scope);
        } else if (arr) {
          cb.call(scope, arr);
        }
      }

      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var FundamentalComponent = 20;
      var ScopeComponent = 21;
      var Block = 22;
      var OffscreenComponent = 23;
      var LegacyHiddenComponent = 24;
      var responderInst = null;
      var trackedTouchCount = 0;

      var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
        var oldResponderInst = responderInst;
        responderInst = nextResponderInst;

        if (ResponderEventPlugin.GlobalResponderHandler !== null) {
          ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
        }
      };

      var eventTypes = {
        startShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
          },
          dependencies: startDependencies
        },
        scrollShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
          },
          dependencies: [TOP_SCROLL]
        },
        selectionChangeShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
          },
          dependencies: [TOP_SELECTION_CHANGE]
        },
        moveShouldSetResponder: {
          phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
          },
          dependencies: moveDependencies
        },
        responderStart: {
          registrationName: "onResponderStart",
          dependencies: startDependencies
        },
        responderMove: {
          registrationName: "onResponderMove",
          dependencies: moveDependencies
        },
        responderEnd: {
          registrationName: "onResponderEnd",
          dependencies: endDependencies
        },
        responderRelease: {
          registrationName: "onResponderRelease",
          dependencies: endDependencies
        },
        responderTerminationRequest: {
          registrationName: "onResponderTerminationRequest",
          dependencies: []
        },
        responderGrant: {
          registrationName: "onResponderGrant",
          dependencies: []
        },
        responderReject: {
          registrationName: "onResponderReject",
          dependencies: []
        },
        responderTerminate: {
          registrationName: "onResponderTerminate",
          dependencies: []
        }
      };

      function getParent(inst) {
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);

        if (inst) {
          return inst;
        }

        return null;
      }

      function getLowestCommonAncestor(instA, instB) {
        var depthA = 0;

        for (var tempA = instA; tempA; tempA = getParent(tempA)) {
          depthA++;
        }

        var depthB = 0;

        for (var tempB = instB; tempB; tempB = getParent(tempB)) {
          depthB++;
        }

        while (depthA - depthB > 0) {
          instA = getParent(instA);
          depthA--;
        }

        while (depthB - depthA > 0) {
          instB = getParent(instB);
          depthB--;
        }

        var depth = depthA;

        while (depth--) {
          if (instA === instB || instA === instB.alternate) {
            return instA;
          }

          instA = getParent(instA);
          instB = getParent(instB);
        }

        return null;
      }

      function isAncestor(instA, instB) {
        while (instB) {
          if (instA === instB || instA === instB.alternate) {
            return true;
          }

          instB = getParent(instB);
        }

        return false;
      }

      function traverseTwoPhase(inst, fn, arg) {
        var path = [];

        while (inst) {
          path.push(inst);
          inst = getParent(inst);
        }

        var i;

        for (i = path.length; i-- > 0;) {
          fn(path[i], "captured", arg);
        }

        for (i = 0; i < path.length; i++) {
          fn(path[i], "bubbled", arg);
        }
      }

      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;

        if (stateNode === null) {
          return null;
        }

        var props = getFiberCurrentPropsFromNode(stateNode);

        if (props === null) {
          return null;
        }

        var listener = props[registrationName];

        if (!(!listener || typeof listener === "function")) {
          throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }

        return listener;
      }

      function listenerAtPhase(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener(inst, registrationName);
      }

      function accumulateDirectionalDispatches(inst, phase, event) {
        {
          if (!inst) {
            error("Dispatching inst must not be null");
          }
        }
        var listener = listenerAtPhase(inst, event, phase);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }

      function accumulateDispatches(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener(inst, registrationName);

          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }

      function accumulateDirectDispatchesSingle(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches(event._targetInst, null, event);
        }
      }

      function accumulateDirectDispatches(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle);
      }

      function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          var targetInst = event._targetInst;
          var parentInst = targetInst ? getParent(targetInst) : null;
          traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateTwoPhaseDispatchesSkipTarget(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
      }

      function accumulateTwoPhaseDispatchesSingle(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
        }
      }

      function accumulateTwoPhaseDispatches(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
      }

      function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === TOP_SELECTION_CHANGE ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
        var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);
        var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
        var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
        shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

        if (skipOverBubbleShouldSetFrom) {
          accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
        } else {
          accumulateTwoPhaseDispatches(shouldSetEvent);
        }

        var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);

        if (!shouldSetEvent.isPersistent()) {
          shouldSetEvent.constructor.release(shouldSetEvent);
        }

        if (!wantsResponderInst || wantsResponderInst === responderInst) {
          return null;
        }

        var extracted;
        var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
        grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
        accumulateDirectDispatches(grantEvent);
        var blockHostResponder = executeDirectDispatch(grantEvent) === true;

        if (responderInst) {
          var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
          terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(terminationRequestEvent);
          var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);

          if (!terminationRequestEvent.isPersistent()) {
            terminationRequestEvent.constructor.release(terminationRequestEvent);
          }

          if (shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(terminateEvent);
            extracted = accumulate(extracted, [grantEvent, terminateEvent]);
            changeResponder(wantsResponderInst, blockHostResponder);
          } else {
            var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(rejectEvent);
            extracted = accumulate(extracted, rejectEvent);
          }
        } else {
          extracted = accumulate(extracted, grantEvent);
          changeResponder(wantsResponderInst, blockHostResponder);
        }

        return extracted;
      }

      function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
        return topLevelInst && (topLevelType === TOP_SCROLL && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === TOP_SELECTION_CHANGE || isStartish(topLevelType) || isMoveish(topLevelType));
      }

      function noResponderTouches(nativeEvent) {
        var touches = nativeEvent.touches;

        if (!touches || touches.length === 0) {
          return true;
        }

        for (var i = 0; i < touches.length; i++) {
          var activeTouch = touches[i];
          var target = activeTouch.target;

          if (target !== null && target !== undefined && target !== 0) {
            var targetInst = getInstanceFromNode(target);

            if (isAncestor(responderInst, targetInst)) {
              return false;
            }
          }
        }

        return true;
      }

      var ResponderEventPlugin = {
        _getResponder: function _getResponder() {
          return responderInst;
        },
        eventTypes: eventTypes,
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          if (isStartish(topLevelType)) {
            trackedTouchCount += 1;
          } else if (isEndish(topLevelType)) {
            if (trackedTouchCount >= 0) {
              trackedTouchCount -= 1;
            } else {
              {
                warn("Ended a touch event which was not counted in `trackedTouchCount`.");
              }
              return null;
            }
          }

          ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
          var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;
          var isResponderTouchStart = responderInst && isStartish(topLevelType);
          var isResponderTouchMove = responderInst && isMoveish(topLevelType);
          var isResponderTouchEnd = responderInst && isEndish(topLevelType);
          var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

          if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(gesture);
            extracted = accumulate(extracted, gesture);
          }

          var isResponderTerminate = responderInst && topLevelType === TOP_TOUCH_CANCEL;
          var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
          var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;

          if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
            accumulateDirectDispatches(finalEvent);
            extracted = accumulate(extracted, finalEvent);
            changeResponder(null);
          }

          return extracted;
        },
        GlobalResponderHandler: null,
        injection: {
          injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
          }
        }
      };
      var eventPluginOrder = null;
      var namesToPlugins = {};

      function recomputePluginOrdering() {
        if (!eventPluginOrder) {
          return;
        }

        for (var pluginName in namesToPlugins) {
          var pluginModule = namesToPlugins[pluginName];
          var pluginIndex = eventPluginOrder.indexOf(pluginName);

          if (!(pluginIndex > -1)) {
            throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
          }

          if (plugins[pluginIndex]) {
            continue;
          }

          if (!pluginModule.extractEvents) {
            throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
          }

          plugins[pluginIndex] = pluginModule;
          var publishedEvents = pluginModule.eventTypes;

          for (var eventName in publishedEvents) {
            if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
              throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
            }
          }
        }
      }

      function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
        if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
          throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
        }

        eventNameDispatchConfigs[eventName] = dispatchConfig;
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

        if (phasedRegistrationNames) {
          for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
              var phasedRegistrationName = phasedRegistrationNames[phaseName];
              publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
          }

          return true;
        } else if (dispatchConfig.registrationName) {
          publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
          return true;
        }

        return false;
      }

      function publishRegistrationName(registrationName, pluginModule, eventName) {
        if (!!registrationNameModules[registrationName]) {
          throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
        }

        registrationNameModules[registrationName] = pluginModule;
        registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
        }
      }

      var plugins = [];
      var eventNameDispatchConfigs = {};
      var registrationNameModules = {};
      var registrationNameDependencies = {};

      function injectEventPluginOrder(injectedEventPluginOrder) {
        if (!!eventPluginOrder) {
          throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
        }

        eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
        recomputePluginOrdering();
      }

      function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = false;

        for (var pluginName in injectedNamesToPlugins) {
          if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
            continue;
          }

          var pluginModule = injectedNamesToPlugins[pluginName];

          if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
            if (!!namesToPlugins[pluginName]) {
              throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
            }

            namesToPlugins[pluginName] = pluginModule;
            isOrderingDirty = true;
          }
        }

        if (isOrderingDirty) {
          recomputePluginOrdering();
        }
      }

      function getListener$1(inst, registrationName) {
        var stateNode = inst.stateNode;

        if (stateNode === null) {
          return null;
        }

        var props = getFiberCurrentPropsFromNode(stateNode);

        if (props === null) {
          return null;
        }

        var listener = props[registrationName];

        if (!(!listener || typeof listener === "function")) {
          throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }

        return listener;
      }

      var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,
          customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;

      function listenerAtPhase$1(inst, event, propagationPhase) {
        var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
        return getListener$1(inst, registrationName);
      }

      function accumulateDirectionalDispatches$1(inst, phase, event) {
        {
          if (!inst) {
            error("Dispatching inst must not be null");
          }
        }
        var listener = listenerAtPhase$1(inst, event, phase);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }

      function getParent$1(inst) {
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);

        if (inst) {
          return inst;
        }

        return null;
      }

      function traverseTwoPhase$1(inst, fn, arg) {
        var path = [];

        while (inst) {
          path.push(inst);
          inst = getParent$1(inst);
        }

        var i;

        for (i = path.length; i-- > 0;) {
          fn(path[i], "captured", arg);
        }

        for (i = 0; i < path.length; i++) {
          fn(path[i], "bubbled", arg);
        }
      }

      function accumulateTwoPhaseDispatchesSingle$1(event) {
        if (event && event.dispatchConfig.phasedRegistrationNames) {
          traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event);
        }
      }

      function accumulateTwoPhaseDispatches$1(events) {
        forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle$1);
      }

      function accumulateDispatches$1(inst, ignoredDirection, event) {
        if (inst && event && event.dispatchConfig.registrationName) {
          var registrationName = event.dispatchConfig.registrationName;
          var listener = getListener$1(inst, registrationName);

          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
      }

      function accumulateDirectDispatchesSingle$1(event) {
        if (event && event.dispatchConfig.registrationName) {
          accumulateDispatches$1(event._targetInst, null, event);
        }
      }

      function accumulateDirectDispatches$1(events) {
        forEachAccumulated(events, accumulateDirectDispatchesSingle$1);
      }

      var ReactNativeBridgeEventPlugin = {
        eventTypes: {},
        extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          if (targetInst == null) {
            return null;
          }

          var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
          var directDispatchConfig = customDirectEventTypes[topLevelType];

          if (!(bubbleDispatchConfig || directDispatchConfig)) {
            throw Error('Unsupported top level event type "' + topLevelType + '" dispatched');
          }

          var event = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);

          if (bubbleDispatchConfig) {
            accumulateTwoPhaseDispatches$1(event);
          } else if (directDispatchConfig) {
            accumulateDirectDispatches$1(event);
          } else {
            return null;
          }

          return event;
        }
      };
      var ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"];
      injectEventPluginOrder(ReactNativeEventPluginOrder);
      injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
      });

      function getInstanceFromInstance(instanceHandle) {
        return instanceHandle;
      }

      function getTagFromInstance(inst) {
        var nativeInstance = inst.stateNode.canonical;

        if (!nativeInstance._nativeTag) {
          throw Error("All native instances should have a tag.");
        }

        return nativeInstance;
      }

      function getFiberCurrentPropsFromNode$1(inst) {
        return inst.canonical.currentProps;
      }

      var ReactFabricGlobalResponderHandler = {
        onChange: function onChange(from, to, blockNativeResponder) {
          if (to !== null) {
            var tag = to.stateNode.canonical._nativeTag;
            ReactNativePrivateInterface.UIManager.setJSResponder(tag, blockNativeResponder);
          } else {
            ReactNativePrivateInterface.UIManager.clearJSResponder();
          }
        }
      };
      setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromInstance, getTagFromInstance);
      ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactFabricGlobalResponderHandler);

      function get(key) {
        return key._reactInternals;
      }

      function set(key, value) {
        key._reactInternals = value;
      }

      var REACT_ELEMENT_TYPE = 0xeac7;
      var REACT_PORTAL_TYPE = 0xeaca;
      var REACT_FRAGMENT_TYPE = 0xeacb;
      var REACT_STRICT_MODE_TYPE = 0xeacc;
      var REACT_PROFILER_TYPE = 0xead2;
      var REACT_PROVIDER_TYPE = 0xeacd;
      var REACT_CONTEXT_TYPE = 0xeace;
      var REACT_FORWARD_REF_TYPE = 0xead0;
      var REACT_SUSPENSE_TYPE = 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = 0xead8;
      var REACT_MEMO_TYPE = 0xead3;
      var REACT_LAZY_TYPE = 0xead4;
      var REACT_BLOCK_TYPE = 0xead9;
      var REACT_SERVER_BLOCK_TYPE = 0xeada;
      var REACT_FUNDAMENTAL_TYPE = 0xead5;
      var REACT_SCOPE_TYPE = 0xead7;
      var REACT_OPAQUE_ID_TYPE = 0xeae0;
      var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
      var REACT_OFFSCREEN_TYPE = 0xeae2;
      var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
        REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
        REACT_PROFILER_TYPE = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        REACT_SCOPE_TYPE = symbolFor("react.scope");
        REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
      }

      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";

      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }

        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }

        return null;
      }

      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }

      function getContextName(type) {
        return type.displayName || "Context";
      }

      function getComponentName(type) {
        if (type == null) {
          return null;
        }

        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentName(). " + "This is likely a bug in React. Please file an issue.");
          }
        }

        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }

        if (typeof type === "string") {
          return type;
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";

          case REACT_PORTAL_TYPE:
            return "Portal";

          case REACT_PROFILER_TYPE:
            return "Profiler";

          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";

          case REACT_SUSPENSE_TYPE:
            return "Suspense";

          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }

        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";

            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";

            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");

            case REACT_MEMO_TYPE:
              return getComponentName(type.type);

            case REACT_BLOCK_TYPE:
              return getComponentName(type._render);

            case REACT_LAZY_TYPE:
              {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;

                try {
                  return getComponentName(init(payload));
                } catch (x) {
                  return null;
                }
              }
          }
        }

        return null;
      }

      var enableProfilerTimer = true;
      var warnAboutStringRefs = false;
      var enableNewReconciler = false;
      var NoFlags = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var PlacementAndUpdate = 6;
      var Deletion = 8;
      var ContentReset = 16;
      var Callback = 32;
      var DidCapture = 64;
      var Ref = 128;
      var Snapshot = 256;
      var Passive = 512;
      var Hydrating = 1024;
      var HydratingAndUpdate = 1028;
      var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot;
      var HostEffectMask = 4095;
      var Incomplete = 4096;
      var ShouldCapture = 8192;
      var PassiveUnmountPendingDev = 16384;
      var ForceUpdateForLegacySuspense = 32768;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;

        if (!fiber.alternate) {
          var nextNode = node;

          do {
            node = nextNode;

            if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
              nearestMounted = node.return;
            }

            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }

        if (node.tag === HostRoot) {
          return nearestMounted;
        }

        return null;
      }

      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }

      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;

            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
            }

            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);

        if (!fiber) {
          return false;
        }

        return getNearestMountedFiber(fiber) === fiber;
      }

      function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) {
          throw Error("Unable to find node on an unmounted component.");
        }
      }

      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;

        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);

          if (!(nearestMounted !== null)) {
            throw Error("Unable to find node on an unmounted component.");
          }

          if (nearestMounted !== fiber) {
            return null;
          }

          return fiber;
        }

        var a = fiber;
        var b = alternate;

        while (true) {
          var parentA = a.return;

          if (parentA === null) {
            break;
          }

          var parentB = parentA.alternate;

          if (parentB === null) {
            var nextParent = parentA.return;

            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }

            break;
          }

          if (parentA.child === parentB.child) {
            var child = parentA.child;

            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }

              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }

              child = child.sibling;
            }

            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }

          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }

              _child = _child.sibling;
            }

            if (!didFindChild) {
              _child = parentB.child;

              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }

                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }

                _child = _child.sibling;
              }

              if (!didFindChild) {
                throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }

          if (!(a.alternate === b)) {
            throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        if (!(a.tag === HostRoot)) {
          throw Error("Unable to find node on an unmounted component.");
        }

        if (a.stateNode.current === a) {
          return fiber;
        }

        return alternate;
      }

      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);

        if (!currentParent) {
          return null;
        }

        var node = currentParent;

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          } else if (node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === currentParent) {
            return null;
          }

          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }

        return null;
      }

      function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;

        while (node !== null) {
          if (node === parentFiber || node === parentFiberAlternate) {
            return true;
          }

          node = node.return;
        }

        return false;
      }

      function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
        return function () {
          if (!callback) {
            return undefined;
          }

          if (typeof context.__isMounted === "boolean") {
            if (!context.__isMounted) {
              return undefined;
            }
          }

          return callback.apply(context, arguments);
        };
      }

      var emptyObject = {};
      var removedKeys = null;
      var removedKeyCount = 0;
      var deepDifferOptions = {
        unsafelyIgnoreFunctions: true
      };

      function defaultDiffer(prevProp, nextProp) {
        if (typeof nextProp !== "object" || nextProp === null) {
          return true;
        } else {
          return ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);
        }
      }

      function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
        if (Array.isArray(node)) {
          var i = node.length;

          while (i-- && removedKeyCount > 0) {
            restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
          }
        } else if (node && removedKeyCount > 0) {
          var obj = node;

          for (var propKey in removedKeys) {
            if (!removedKeys[propKey]) {
              continue;
            }

            var nextProp = obj[propKey];

            if (nextProp === undefined) {
              continue;
            }

            var attributeConfig = validAttributes[propKey];

            if (!attributeConfig) {
              continue;
            }

            if (typeof nextProp === "function") {
              nextProp = true;
            }

            if (typeof nextProp === "undefined") {
              nextProp = null;
            }

            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            removedKeys[propKey] = false;
            removedKeyCount--;
          }
        }
      }

      function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
        var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
        var i;

        for (i = 0; i < minLength; i++) {
          updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
        }

        for (; i < prevArray.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
        }

        for (; i < nextArray.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
        }

        return updatePayload;
      }

      function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
        if (!updatePayload && prevProp === nextProp) {
          return updatePayload;
        }

        if (!prevProp || !nextProp) {
          if (nextProp) {
            return addNestedProperty(updatePayload, nextProp, validAttributes);
          }

          if (prevProp) {
            return clearNestedProperty(updatePayload, prevProp, validAttributes);
          }

          return updatePayload;
        }

        if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
          return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
          return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
        }

        if (Array.isArray(prevProp)) {
          return diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes);
        }

        return diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
      }

      function addNestedProperty(updatePayload, nextProp, validAttributes) {
        if (!nextProp) {
          return updatePayload;
        }

        if (!Array.isArray(nextProp)) {
          return addProperties(updatePayload, nextProp, validAttributes);
        }

        for (var i = 0; i < nextProp.length; i++) {
          updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
        }

        return updatePayload;
      }

      function clearNestedProperty(updatePayload, prevProp, validAttributes) {
        if (!prevProp) {
          return updatePayload;
        }

        if (!Array.isArray(prevProp)) {
          return clearProperties(updatePayload, prevProp, validAttributes);
        }

        for (var i = 0; i < prevProp.length; i++) {
          updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
        }

        return updatePayload;
      }

      function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
        var attributeConfig;
        var nextProp;
        var prevProp;

        for (var propKey in nextProps) {
          attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          prevProp = prevProps[propKey];
          nextProp = nextProps[propKey];

          if (typeof nextProp === "function") {
            nextProp = true;

            if (typeof prevProp === "function") {
              prevProp = true;
            }
          }

          if (typeof nextProp === "undefined") {
            nextProp = null;

            if (typeof prevProp === "undefined") {
              prevProp = null;
            }
          }

          if (removedKeys) {
            removedKeys[propKey] = false;
          }

          if (updatePayload && updatePayload[propKey] !== undefined) {
            if (typeof attributeConfig !== "object") {
              updatePayload[propKey] = nextProp;
            } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
              var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
              updatePayload[propKey] = nextValue;
            }

            continue;
          }

          if (prevProp === nextProp) {
            continue;
          }

          if (typeof attributeConfig !== "object") {
            if (defaultDiffer(prevProp, nextProp)) {
              (updatePayload || (updatePayload = {}))[propKey] = nextProp;
            }
          } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === "function" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));

            if (shouldUpdate) {
              var _nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;

              (updatePayload || (updatePayload = {}))[propKey] = _nextValue;
            }
          } else {
            removedKeys = null;
            removedKeyCount = 0;
            updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);

            if (removedKeyCount > 0 && updatePayload) {
              restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
              removedKeys = null;
            }
          }
        }

        for (var _propKey in prevProps) {
          if (nextProps[_propKey] !== undefined) {
            continue;
          }

          attributeConfig = validAttributes[_propKey];

          if (!attributeConfig) {
            continue;
          }

          if (updatePayload && updatePayload[_propKey] !== undefined) {
            continue;
          }

          prevProp = prevProps[_propKey];

          if (prevProp === undefined) {
            continue;
          }

          if (typeof attributeConfig !== "object" || typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            (updatePayload || (updatePayload = {}))[_propKey] = null;

            if (!removedKeys) {
              removedKeys = {};
            }

            if (!removedKeys[_propKey]) {
              removedKeys[_propKey] = true;
              removedKeyCount++;
            }
          } else {
            updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
          }
        }

        return updatePayload;
      }

      function addProperties(updatePayload, props, validAttributes) {
        return diffProperties(updatePayload, emptyObject, props, validAttributes);
      }

      function clearProperties(updatePayload, prevProps, validAttributes) {
        return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
      }

      function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
      }

      function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
      }

      var batchedUpdatesImpl = function batchedUpdatesImpl(fn, bookkeeping) {
        return fn(bookkeeping);
      };

      var isInsideEventHandler = false;

      function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) {
          return fn(bookkeeping);
        }

        isInsideEventHandler = true;

        try {
          return batchedUpdatesImpl(fn, bookkeeping);
        } finally {
          isInsideEventHandler = false;
        }
      }

      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
      }

      var eventQueue = null;

      var executeDispatchesAndRelease = function executeDispatchesAndRelease(event) {
        if (event) {
          executeDispatchesInOrder(event);

          if (!event.isPersistent()) {
            event.constructor.release(event);
          }
        }
      };

      var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
        return executeDispatchesAndRelease(e);
      };

      function runEventsInBatch(events) {
        if (events !== null) {
          eventQueue = accumulateInto(eventQueue, events);
        }

        var processingEventQueue = eventQueue;
        eventQueue = null;

        if (!processingEventQueue) {
          return;
        }

        forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

        if (!!eventQueue) {
          throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
        }

        rethrowCaughtError();
      }

      function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = null;
        var legacyPlugins = plugins;

        for (var i = 0; i < legacyPlugins.length; i++) {
          var possiblePlugin = legacyPlugins[i];

          if (possiblePlugin) {
            var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

            if (extractedEvents) {
              events = accumulateInto(events, extractedEvents);
            }
          }
        }

        return events;
      }

      function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        runEventsInBatch(events);
      }

      function dispatchEvent(target, topLevelType, nativeEvent) {
        var targetFiber = target;
        var eventTarget = null;

        if (targetFiber != null) {
          var stateNode = targetFiber.stateNode;

          if (stateNode != null) {
            eventTarget = stateNode.canonical;
          }
        }

        batchedUpdates(function () {
          runExtractedPluginEventsInBatch(topLevelType, targetFiber, nativeEvent, eventTarget);
        });
      }

      function shim() {
        {
          throw Error("The current renderer does not support mutation. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      var supportsMutation = false;
      var commitMount = shim;
      var clearContainer = shim;

      function shim$1() {
        {
          throw Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      var isSuspenseInstancePending = shim$1;
      var isSuspenseInstanceFallback = shim$1;
      var hydrateTextInstance = shim$1;
      var _nativeFabricUIManage = nativeFabricUIManager,
          createNode = _nativeFabricUIManage.createNode,
          cloneNode = _nativeFabricUIManage.cloneNode,
          cloneNodeWithNewChildren = _nativeFabricUIManage.cloneNodeWithNewChildren,
          cloneNodeWithNewChildrenAndProps = _nativeFabricUIManage.cloneNodeWithNewChildrenAndProps,
          cloneNodeWithNewProps = _nativeFabricUIManage.cloneNodeWithNewProps,
          createChildNodeSet = _nativeFabricUIManage.createChildSet,
          appendChildNode = _nativeFabricUIManage.appendChild,
          appendChildNodeToSet = _nativeFabricUIManage.appendChildToSet,
          completeRoot = _nativeFabricUIManage.completeRoot,
          registerEventHandler = _nativeFabricUIManage.registerEventHandler,
          fabricMeasure = _nativeFabricUIManage.measure,
          fabricMeasureInWindow = _nativeFabricUIManage.measureInWindow,
          fabricMeasureLayout = _nativeFabricUIManage.measureLayout;
      var getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get;
      var nextReactTag = 2;

      if (registerEventHandler) {
        registerEventHandler(dispatchEvent);
      }

      var ReactFabricHostComponent = function () {
        function ReactFabricHostComponent(tag, viewConfig, props, internalInstanceHandle) {
          this._nativeTag = tag;
          this.viewConfig = viewConfig;
          this.currentProps = props;
          this._internalInstanceHandle = internalInstanceHandle;
        }

        var _proto = ReactFabricHostComponent.prototype;

        _proto.blur = function blur() {
          ReactNativePrivateInterface.TextInputState.blurTextInput(this);
        };

        _proto.focus = function focus() {
          ReactNativePrivateInterface.TextInputState.focusTextInput(this);
        };

        _proto.measure = function measure(callback) {
          fabricMeasure(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        _proto.measureInWindow = function measureInWindow(callback) {
          fabricMeasureInWindow(this._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
        };

        _proto.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          if (typeof relativeToNativeNode === "number" || !(relativeToNativeNode instanceof ReactFabricHostComponent)) {
            {
              error("Warning: ref.measureLayout must be called with a ref to a native component.");
            }
            return;
          }

          fabricMeasureLayout(this._internalInstanceHandle.stateNode.node, relativeToNativeNode._internalInstanceHandle.stateNode.node, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
        };

        _proto.setNativeProps = function setNativeProps(nativeProps) {
          {
            error("Warning: setNativeProps is not currently supported in Fabric");
          }
          return;
        };

        return ReactFabricHostComponent;
      }();

      function appendInitialChild(parentInstance, child) {
        appendChildNode(parentInstance.node, child.node);
      }

      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = nextReactTag;
        nextReactTag += 2;
        var viewConfig = getViewConfigForType(type);
        {
          for (var key in viewConfig.validAttributes) {
            if (props.hasOwnProperty(key)) {
              ReactNativePrivateInterface.deepFreezeAndThrowOnMutationInDev(props[key]);
            }
          }
        }
        var updatePayload = create(props, viewConfig.validAttributes);
        var node = createNode(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload, internalInstanceHandle);
        var component = new ReactFabricHostComponent(tag, viewConfig, props, internalInstanceHandle);
        return {
          node: node,
          canonical: component
        };
      }

      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        if (!hostContext.isInAParentText) {
          throw Error("Text strings must be rendered within a <Text> component.");
        }

        var tag = nextReactTag;
        nextReactTag += 2;
        var node = createNode(tag, "RCTRawText", rootContainerInstance, {
          text: text
        }, internalInstanceHandle);
        return {
          node: node
        };
      }

      function getRootHostContext(rootContainerInstance) {
        return {
          isInAParentText: false
        };
      }

      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var prevIsInAParentText = parentHostContext.isInAParentText;
        var isInAParentText = type === "AndroidTextInput" || type === "RCTMultilineTextInputView" || type === "RCTSinglelineTextInputView" || type === "RCTText" || type === "RCTVirtualText";

        if (prevIsInAParentText !== isInAParentText) {
          return {
            isInAParentText: isInAParentText
          };
        } else {
          return parentHostContext;
        }
      }

      function getPublicInstance(instance) {
        return instance.canonical;
      }

      function prepareForCommit(containerInfo) {
        return null;
      }

      function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var viewConfig = instance.canonical.viewConfig;
        var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);
        instance.canonical.currentProps = newProps;
        return updatePayload;
      }

      function resetAfterCommit(containerInfo) {}

      function shouldSetTextContent(type, props) {
        return false;
      }

      var scheduleTimeout = setTimeout;
      var cancelTimeout = clearTimeout;
      var noTimeout = -1;

      function cloneInstance(instance, updatePayload, type, oldProps, newProps, internalInstanceHandle, keepChildren, recyclableInstance) {
        var node = instance.node;
        var clone;

        if (keepChildren) {
          if (updatePayload !== null) {
            clone = cloneNodeWithNewProps(node, updatePayload);
          } else {
            clone = cloneNode(node);
          }
        } else {
          if (updatePayload !== null) {
            clone = cloneNodeWithNewChildrenAndProps(node, updatePayload);
          } else {
            clone = cloneNodeWithNewChildren(node);
          }
        }

        return {
          node: clone,
          canonical: instance.canonical
        };
      }

      function cloneHiddenInstance(instance, type, props, internalInstanceHandle) {
        var viewConfig = instance.canonical.viewConfig;
        var node = instance.node;
        var updatePayload = create({
          style: {
            display: "none"
          }
        }, viewConfig.validAttributes);
        return {
          node: cloneNodeWithNewProps(node, updatePayload),
          canonical: instance.canonical
        };
      }

      function cloneHiddenTextInstance(instance, text, internalInstanceHandle) {
        throw new Error("Not yet implemented.");
      }

      function createContainerChildSet(container) {
        return createChildNodeSet(container);
      }

      function appendChildToContainerChildSet(childSet, child) {
        appendChildNodeToSet(childSet, child.node);
      }

      function finalizeContainerChildren(container, newChildren) {
        completeRoot(container, newChildren);
      }

      function makeClientIdInDEV(warnOnAccessInDEV) {
        throw new Error("Not yet implemented");
      }

      function preparePortalMount(portalInstance) {}

      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;

      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          var ownerName = null;

          if (ownerFn) {
            ownerName = ownerFn.displayName || ownerFn.name || null;
          }

          return describeComponentFrame(name, source, ownerName);
        }
      }

      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

      function describeComponentFrame(name, source, ownerName) {
        var sourceInfo = "";

        if (source) {
          var path = source.fileName;
          var fileName = path.replace(BEFORE_SLASH_RE, "");

          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                fileName = folderName + "/" + fileName;
              }
            }
          }

          sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
        } else if (ownerName) {
          sourceInfo = " (created by " + ownerName + ")";
        }

        return "\n    in " + (name || "Unknown") + sourceInfo;
      }

      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeFunctionComponentFrame(ctor, source, ownerFn);
        }
      }

      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          if (!fn) {
            return "";
          }

          var name = fn.displayName || fn.name || null;
          var ownerName = null;

          if (ownerFn) {
            ownerName = ownerFn.displayName || ownerFn.name || null;
          }

          return describeComponentFrame(name, source, ownerName);
        }
      }

      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }

        if (typeof type === "function") {
          {
            return describeFunctionComponentFrame(type, source, ownerFn);
          }
        }

        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type, source, ownerFn);
        }

        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense", source, ownerFn);

          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList", source, ownerFn);
        }

        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render, source, ownerFn);

            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render, source, ownerFn);

            case REACT_LAZY_TYPE:
              {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;

                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
              }
          }
        }

        return "";
      }

      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }

      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(Object.prototype.hasOwnProperty);

          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;

              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }

                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }

              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }

              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }

      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;

      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }

      function pop(cursor, fiber) {
        if (index < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }

        {
          if (fiber !== fiberStack[index]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }

      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }

      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;

      function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            return previousContext;
          }

          return contextStackCursor.current;
        }
      }

      function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }

      function getMaskedContext(workInProgress, unmaskedContext) {
        {
          var type = workInProgress.type;
          var contextTypes = type.contextTypes;

          if (!contextTypes) {
            return emptyContextObject;
          }

          var instance = workInProgress.stateNode;

          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }

          var context = {};

          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }

          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }

          if (instance) {
            cacheContext(workInProgress, unmaskedContext, context);
          }

          return context;
        }
      }

      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }

      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== undefined;
        }
      }

      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }

      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }

      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (!(contextStackCursor.current === emptyContextObject)) {
            throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }

          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }

      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;

          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentName(type) || "Unknown";

              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }

          var childContext = instance.getChildContext();

          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            }
          }

          {
            var name = getComponentName(type) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, parentContext, childContext);
        }
      }

      function pushContextProvider(workInProgress) {
        {
          var instance = workInProgress.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
          return true;
        }
      }

      function invalidateContextProvider(workInProgress, type, didChange) {
        {
          var instance = workInProgress.stateNode;

          if (!instance) {
            throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }

          if (didChange) {
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
          }
        }
      }

      function findCurrentUnmaskedContext(fiber) {
        {
          if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
            throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }

          var node = fiber;

          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;

              case ClassComponent:
                {
                  var Component = node.type;

                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }

                  break;
                }
            }

            node = node.return;
          } while (node !== null);

          {
            throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      var LegacyRoot = 0;
      var BlockingRoot = 1;
      var ConcurrentRoot = 2;
      var rendererID = null;
      var injectedHook = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";

      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }

        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

        if (hook.isDisabled) {
          return true;
        }

        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://reactjs.org/link/react-devtools");
          }
          return true;
        }

        try {
          rendererID = hook.inject(internals);
          injectedHook = hook;
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }

        return true;
      }

      function onScheduleRoot(root, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }

      function onCommitRoot(root, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root.current.flags & DidCapture) === DidCapture;

            if (enableProfilerTimer) {
              injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
            } else {
              injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }

      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }

      var Scheduler_now = Scheduler.unstable_now;
      {
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
        }
      }
      var ImmediatePriority = 99;
      var UserBlockingPriority = 98;
      var NormalPriority = 97;
      var LowPriority = 96;
      var IdlePriority = 95;
      var NoPriority = 90;
      var initialTimeMs = Scheduler_now();
      var SyncLanePriority = 15;
      var SyncBatchedLanePriority = 14;
      var InputDiscreteHydrationLanePriority = 13;
      var InputDiscreteLanePriority = 12;
      var InputContinuousHydrationLanePriority = 11;
      var InputContinuousLanePriority = 10;
      var DefaultHydrationLanePriority = 9;
      var DefaultLanePriority = 8;
      var TransitionHydrationPriority = 7;
      var TransitionPriority = 6;
      var RetryLanePriority = 5;
      var SelectiveHydrationLanePriority = 4;
      var IdleHydrationLanePriority = 3;
      var IdleLanePriority = 2;
      var OffscreenLanePriority = 1;
      var NoLanePriority = 0;
      var TotalLanes = 31;
      var NoLanes = 0;
      var NoLane = 0;
      var SyncLane = 1;
      var SyncBatchedLane = 2;
      var InputDiscreteHydrationLane = 4;
      var InputDiscreteLanes = 24;
      var InputContinuousHydrationLane = 32;
      var InputContinuousLanes = 192;
      var DefaultHydrationLane = 256;
      var DefaultLanes = 3584;
      var TransitionHydrationLane = 4096;
      var TransitionLanes = 4186112;
      var RetryLanes = 62914560;
      var SomeRetryLane = 33554432;
      var SelectiveHydrationLane = 67108864;
      var NonIdleLanes = 134217727;
      var IdleHydrationLane = 134217728;
      var IdleLanes = 805306368;
      var OffscreenLane = 1073741824;
      var NoTimestamp = -1;
      var return_highestLanePriority = DefaultLanePriority;

      function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
          return_highestLanePriority = SyncLanePriority;
          return SyncLane;
        }

        if ((SyncBatchedLane & lanes) !== NoLanes) {
          return_highestLanePriority = SyncBatchedLanePriority;
          return SyncBatchedLane;
        }

        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
          return_highestLanePriority = InputDiscreteHydrationLanePriority;
          return InputDiscreteHydrationLane;
        }

        var inputDiscreteLanes = InputDiscreteLanes & lanes;

        if (inputDiscreteLanes !== NoLanes) {
          return_highestLanePriority = InputDiscreteLanePriority;
          return inputDiscreteLanes;
        }

        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
          return_highestLanePriority = InputContinuousHydrationLanePriority;
          return InputContinuousHydrationLane;
        }

        var inputContinuousLanes = InputContinuousLanes & lanes;

        if (inputContinuousLanes !== NoLanes) {
          return_highestLanePriority = InputContinuousLanePriority;
          return inputContinuousLanes;
        }

        if ((lanes & DefaultHydrationLane) !== NoLanes) {
          return_highestLanePriority = DefaultHydrationLanePriority;
          return DefaultHydrationLane;
        }

        var defaultLanes = DefaultLanes & lanes;

        if (defaultLanes !== NoLanes) {
          return_highestLanePriority = DefaultLanePriority;
          return defaultLanes;
        }

        if ((lanes & TransitionHydrationLane) !== NoLanes) {
          return_highestLanePriority = TransitionHydrationPriority;
          return TransitionHydrationLane;
        }

        var transitionLanes = TransitionLanes & lanes;

        if (transitionLanes !== NoLanes) {
          return_highestLanePriority = TransitionPriority;
          return transitionLanes;
        }

        var retryLanes = RetryLanes & lanes;

        if (retryLanes !== NoLanes) {
          return_highestLanePriority = RetryLanePriority;
          return retryLanes;
        }

        if (lanes & SelectiveHydrationLane) {
          return_highestLanePriority = SelectiveHydrationLanePriority;
          return SelectiveHydrationLane;
        }

        if ((lanes & IdleHydrationLane) !== NoLanes) {
          return_highestLanePriority = IdleHydrationLanePriority;
          return IdleHydrationLane;
        }

        var idleLanes = IdleLanes & lanes;

        if (idleLanes !== NoLanes) {
          return_highestLanePriority = IdleLanePriority;
          return idleLanes;
        }

        if ((OffscreenLane & lanes) !== NoLanes) {
          return_highestLanePriority = OffscreenLanePriority;
          return OffscreenLane;
        }

        {
          error("Should have found matching lanes. This is a bug in React.");
        }
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
      }

      function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch (schedulerPriorityLevel) {
          case ImmediatePriority:
            return SyncLanePriority;

          case UserBlockingPriority:
            return InputContinuousLanePriority;

          case NormalPriority:
          case LowPriority:
            return DefaultLanePriority;

          case IdlePriority:
            return IdleLanePriority;

          default:
            return NoLanePriority;
        }
      }

      function lanePriorityToSchedulerPriority(lanePriority) {
        switch (lanePriority) {
          case SyncLanePriority:
          case SyncBatchedLanePriority:
            return ImmediatePriority;

          case InputDiscreteHydrationLanePriority:
          case InputDiscreteLanePriority:
          case InputContinuousHydrationLanePriority:
          case InputContinuousLanePriority:
            return UserBlockingPriority;

          case DefaultHydrationLanePriority:
          case DefaultLanePriority:
          case TransitionHydrationPriority:
          case TransitionPriority:
          case SelectiveHydrationLanePriority:
          case RetryLanePriority:
            return NormalPriority;

          case IdleHydrationLanePriority:
          case IdleLanePriority:
          case OffscreenLanePriority:
            return IdlePriority;

          case NoLanePriority:
            return NoPriority;

          default:
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
        }
      }

      function getNextLanes(root, wipLanes) {
        var pendingLanes = root.pendingLanes;

        if (pendingLanes === NoLanes) {
          return_highestLanePriority = NoLanePriority;
          return NoLanes;
        }

        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root.expiredLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;

        if (expiredLanes !== NoLanes) {
          nextLanes = expiredLanes;
          nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              nextLanePriority = return_highestLanePriority;
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                nextLanePriority = return_highestLanePriority;
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;

            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
              nextLanePriority = return_highestLanePriority;
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
                nextLanePriority = return_highestLanePriority;
              }
            }
          }
        }

        if (nextLanes === NoLanes) {
          return NoLanes;
        }

        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);

        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
          getHighestPriorityLanes(wipLanes);
          var wipLanePriority = return_highestLanePriority;

          if (nextLanePriority <= wipLanePriority) {
            return wipLanes;
          } else {
            return_highestLanePriority = nextLanePriority;
          }
        }

        var entangledLanes = root.entangledLanes;

        if (entangledLanes !== NoLanes) {
          var entanglements = root.entanglements;
          var lanes = nextLanes & entangledLanes;

          while (lanes > 0) {
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            nextLanes |= entanglements[index];
            lanes &= ~lane;
          }
        }

        return nextLanes;
      }

      function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          var eventTime = eventTimes[index];

          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime;
          }

          lanes &= ~lane;
        }

        return mostRecentEventTime;
      }

      function computeExpirationTime(lane, currentTime) {
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;

        if (priority >= InputContinuousLanePriority) {
          return currentTime + 250;
        } else if (priority >= TransitionPriority) {
          return currentTime + 5000;
        } else {
          return NoTimestamp;
        }
      }

      function markStarvedLanesAsExpired(root, currentTime) {
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes;
        var lanes = pendingLanes;

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          var expirationTime = expirationTimes[index];

          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root.expiredLanes |= lane;
          }

          lanes &= ~lane;
        }
      }

      function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }

        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }

        return NoLanes;
      }

      function returnNextLanesPriority() {
        return return_highestLanePriority;
      }

      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }

      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }

      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }

      function findUpdateLane(lanePriority, wipLanes) {
        switch (lanePriority) {
          case NoLanePriority:
            break;

          case SyncLanePriority:
            return SyncLane;

          case SyncBatchedLanePriority:
            return SyncBatchedLane;

          case InputDiscreteLanePriority:
            {
              var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);

              if (_lane === NoLane) {
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
              }

              return _lane;
            }

          case InputContinuousLanePriority:
            {
              var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);

              if (_lane2 === NoLane) {
                return findUpdateLane(DefaultLanePriority, wipLanes);
              }

              return _lane2;
            }

          case DefaultLanePriority:
            {
              var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);

              if (_lane3 === NoLane) {
                _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);

                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(DefaultLanes);
                }
              }

              return _lane3;
            }

          case TransitionPriority:
          case RetryLanePriority:
            break;

          case IdleLanePriority:
            var lane = pickArbitraryLane(IdleLanes & ~wipLanes);

            if (lane === NoLane) {
              lane = pickArbitraryLane(IdleLanes);
            }

            return lane;
        }

        {
          throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
      }

      function findTransitionLane(wipLanes, pendingLanes) {
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);

        if (lane === NoLane) {
          lane = pickArbitraryLane(TransitionLanes & ~wipLanes);

          if (lane === NoLane) {
            lane = pickArbitraryLane(TransitionLanes);
          }
        }

        return lane;
      }

      function findRetryLane(wipLanes) {
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);

        if (lane === NoLane) {
          lane = pickArbitraryLane(RetryLanes);
        }

        return lane;
      }

      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }

      function getLowestPriorityLane(lanes) {
        var index = 31 - clz32(lanes);
        return index < 0 ? NoLanes : 1 << index;
      }

      function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
      }

      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }

      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }

      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }

      function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
      }

      function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset;
      }

      function mergeLanes(a, b) {
        return a | b;
      }

      function removeLanes(set, subset) {
        return set & ~subset;
      }

      function laneToLanes(lane) {
        return lane;
      }

      function createLaneMap(initial) {
        var laneMap = [];

        for (var i = 0; i < TotalLanes; i++) {
          laneMap.push(initial);
        }

        return laneMap;
      }

      function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane;
        var higherPriorityLanes = updateLane - 1;
        root.suspendedLanes &= higherPriorityLanes;
        root.pingedLanes &= higherPriorityLanes;
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane);
        eventTimes[index] = eventTime;
      }

      function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          expirationTimes[index] = NoTimestamp;
          lanes &= ~lane;
        }
      }

      function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
      }

      function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
      }

      function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes;
      }

      function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes;
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes;
        var lanes = noLongerPendingLanes;

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          entanglements[index] = NoLanes;
          eventTimes[index] = NoTimestamp;
          expirationTimes[index] = NoTimestamp;
          lanes &= ~lane;
        }
      }

      function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = entangledLanes;

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index;
          entanglements[index] |= entangledLanes;
          lanes &= ~lane;
        }
      }

      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log = Math.log;
      var LN2 = Math.LN2;

      function clz32Fallback(lanes) {
        if (lanes === 0) {
          return 32;
        }

        return 31 - (log(lanes) / LN2 | 0) | 0;
      }

      var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
          Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
          Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
          Scheduler_shouldYield = Scheduler.unstable_shouldYield,
          Scheduler_requestPaint = Scheduler.unstable_requestPaint,
          Scheduler_now$1 = Scheduler.unstable_now,
          Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
          Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
          Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
          Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
          Scheduler_LowPriority = Scheduler.unstable_LowPriority,
          Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
      {
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
        }
      }
      var fakeCallbackNode = {};
      var ImmediatePriority$1 = 99;
      var UserBlockingPriority$1 = 98;
      var NormalPriority$1 = 97;
      var LowPriority$1 = 96;
      var IdlePriority$1 = 95;
      var NoPriority$1 = 90;
      var shouldYield = Scheduler_shouldYield;
      var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
      var syncQueue = null;
      var immediateQueueCallbackNode = null;
      var isFlushingSyncQueue = false;
      var initialTimeMs$1 = Scheduler_now$1();
      var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
        return Scheduler_now$1() - initialTimeMs$1;
      };

      function getCurrentPriorityLevel() {
        switch (Scheduler_getCurrentPriorityLevel()) {
          case Scheduler_ImmediatePriority:
            return ImmediatePriority$1;

          case Scheduler_UserBlockingPriority:
            return UserBlockingPriority$1;

          case Scheduler_NormalPriority:
            return NormalPriority$1;

          case Scheduler_LowPriority:
            return LowPriority$1;

          case Scheduler_IdlePriority:
            return IdlePriority$1;

          default:
            {
              throw Error("Unknown priority level.");
            }
        }
      }

      function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch (reactPriorityLevel) {
          case ImmediatePriority$1:
            return Scheduler_ImmediatePriority;

          case UserBlockingPriority$1:
            return Scheduler_UserBlockingPriority;

          case NormalPriority$1:
            return Scheduler_NormalPriority;

          case LowPriority$1:
            return Scheduler_LowPriority;

          case IdlePriority$1:
            return Scheduler_IdlePriority;

          default:
            {
              throw Error("Unknown priority level.");
            }
        }
      }

      function runWithPriority(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
      }

      function scheduleCallback(reactPriorityLevel, callback, options) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options);
      }

      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
          immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else {
          syncQueue.push(callback);
        }

        return fakeCallbackNode;
      }

      function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) {
          Scheduler_cancelCallback(callbackNode);
        }
      }

      function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
          var node = immediateQueueCallbackNode;
          immediateQueueCallbackNode = null;
          Scheduler_cancelCallback(node);
        }

        flushSyncCallbackQueueImpl();
      }

      function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i = 0;
          {
            try {
              var _isSync2 = true;
              var _queue = syncQueue;
              runWithPriority(ImmediatePriority$1, function () {
                for (; i < _queue.length; i++) {
                  var callback = _queue[i];

                  do {
                    callback = callback(_isSync2);
                  } while (callback !== null);
                }
              });
              syncQueue = null;
            } catch (error) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }

              Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
              throw error;
            } finally {
              isFlushingSyncQueue = false;
            }
          }
        }
      }

      var ReactVersion = "17.0.1-4e5d7faf5";
      var NoMode = 0;
      var StrictMode = 1;
      var BlockingMode = 2;
      var ConcurrentMode = 4;
      var ProfileMode = 8;
      var DebugTracingMode = 16;
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = 0;

      function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
      }

      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }

      var objectIs = typeof Object.is === "function" ? Object.is : is;
      var hasOwnProperty = Object.prototype.hasOwnProperty;

      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }

        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }

        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);

        if (keysA.length !== keysB.length) {
          return false;
        }

        for (var i = 0; i < keysA.length; i++) {
          if (!hasOwnProperty.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
            return false;
          }
        }

        return true;
      }

      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;

        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type, source, owner);

          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy", source, owner);

          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense", source, owner);

          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList", source, owner);

          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type, source, owner);

          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render, source, owner);

          case Block:
            return describeFunctionComponentFrame(fiber.type._render, source, owner);

          case ClassComponent:
            return describeClassComponentFrame(fiber.type, source, owner);

          default:
            return "";
        }
      }

      function getStackByFiberInDevAndProd(workInProgress) {
        try {
          var info = "";
          var node = workInProgress;

          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);

          return info;
        } catch (x) {
          return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
      }

      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;

      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }

          var owner = current._debugOwner;

          if (owner !== null && typeof owner !== "undefined") {
            return getComponentName(owner.type);
          }
        }
        return null;
      }

      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }

          return getStackByFiberInDevAndProd(current);
        }
      }

      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame$1.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }

      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }

      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }

      function getIsRendering() {
        {
          return isRendering;
        }
      }

      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {},
        recordLegacyContextWarning: function recordLegacyContextWarning(fiber, instance) {},
        flushLegacyContextWarning: function flushLegacyContextWarning() {},
        discardPendingWarnings: function discardPendingWarnings() {}
      };
      {
        var findStrictRoot = function findStrictRoot(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;

          while (node !== null) {
            if (node.mode & StrictMode) {
              maybeStrictRoot = node;
            }

            node = node.return;
          }

          return maybeStrictRoot;
        };

        var setToSortedString = function setToSortedString(set) {
          var array = [];
          set.forEach(function (value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };

        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set();

        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }

          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }

          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }

          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }

          if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };

        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
          var componentWillMountUniqueNames = new Set();

          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function (fiber) {
              componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }

          var UNSAFE_componentWillMountUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }

          var componentWillReceivePropsUniqueNames = new Set();

          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }

          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }

          var componentWillUpdateUniqueNames = new Set();

          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function (fiber) {
              componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }

          var UNSAFE_componentWillUpdateUniqueNames = new Set();

          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }

          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "\nPlease update the following components: %s", sortedNames);
          }

          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, " + "refactor your code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n" + "\nPlease update the following components: %s", _sortedNames);
          }

          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "\nPlease update the following components: %s", _sortedNames2);
          }

          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

            warn("componentWillMount has been renamed, and is not recommended for use. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "* Rename componentWillMount to UNSAFE_componentWillMount to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames3);
          }

          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

            warn("componentWillReceiveProps has been renamed, and is not recommended for use. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, refactor your " + "code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n" + "* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames4);
          }

          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

            warn("componentWillUpdate has been renamed, and is not recommended for use. " + "See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames5);
          }
        };

        var pendingLegacyContextWarning = new Map();
        var didWarnAboutLegacyContext = new Set();

        ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
          var strictRoot = findStrictRoot(fiber);

          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. " + "This error is likely caused by a bug in React. Please file an issue.");
            return;
          }

          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }

          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }

            warningsForRoot.push(fiber);
          }
        };

        ReactStrictModeWarnings.flushLegacyContextWarning = function () {
          pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }

            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function (fiber) {
              uniqueNames.add(getComponentName(fiber.type) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);

            try {
              setCurrentFiber(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree." + "\n\nThe old API will be supported in all 16.x releases, but applications " + "using it should migrate to the new version." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };

        ReactStrictModeWarnings.discardPendingWarnings = function () {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map();
        };
      }

      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, baseProps);

          var defaultProps = Component.defaultProps;

          for (var propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }

          return props;
        }

        return baseProps;
      }

      var MAX_SIGNED_31_BIT_INT = 1073741823;
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastContextWithAllBitsObserved = null;
      var isDisallowedContextReadInDEV = false;

      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }

      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }

      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }

      function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        {
          push(valueCursor, context._currentValue2, providerFiber);
          context._currentValue2 = nextValue;
          {
            if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.");
            }

            context._currentRenderer2 = rendererSigil;
          }
        }
      }

      function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        {
          context._currentValue2 = currentValue;
        }
      }

      function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) {
          return 0;
        } else {
          var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          {
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
              error("calculateChangedBits: Expected the return value to be a " + "31-bit integer. Instead received: %s", changedBits);
            }
          }
          return changedBits | 0;
        }
      }

      function scheduleWorkOnParentPath(parent, renderLanes) {
        var node = parent;

        while (node !== null) {
          var alternate = node.alternate;

          if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
            node.childLanes = mergeLanes(node.childLanes, renderLanes);

            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
          } else {
            break;
          }

          node = node.return;
        }
      }

      function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
        var fiber = workInProgress.child;

        if (fiber !== null) {
          fiber.return = workInProgress;
        }

        while (fiber !== null) {
          var nextFiber = void 0;
          var list = fiber.dependencies;

          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;

            while (dependency !== null) {
              if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                if (fiber.tag === ClassComponent) {
                  var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                  update.tag = ForceUpdate;
                  enqueueUpdate(fiber, update);
                }

                fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                var alternate = fiber.alternate;

                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                }

                scheduleWorkOnParentPath(fiber.return, renderLanes);
                list.lanes = mergeLanes(list.lanes, renderLanes);
                break;
              }

              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
          } else {
            nextFiber = fiber.child;
          }

          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;

            while (nextFiber !== null) {
              if (nextFiber === workInProgress) {
                nextFiber = null;
                break;
              }

              var sibling = nextFiber.sibling;

              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }

              nextFiber = nextFiber.return;
            }
          }

          fiber = nextFiber;
        }
      }

      function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;

        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;

          if (firstContext !== null) {
            if (includesSomeLane(dependencies.lanes, renderLanes)) {
              markWorkInProgressReceivedUpdate();
            }

            dependencies.firstContext = null;
          }
        }
      }

      function _readContext(context, observedBits) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
          }
        }
        if (lastContextWithAllBitsObserved === context) ;else if (observedBits === false || observedBits === 0) ;else {
          var resolvedObservedBits;

          if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
            lastContextWithAllBitsObserved = context;
            resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
          } else {
            resolvedObservedBits = observedBits;
          }

          var contextItem = {
            context: context,
            observedBits: resolvedObservedBits,
            next: null
          };

          if (lastContextDependency === null) {
            if (!(currentlyRenderingFiber !== null)) {
              throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }

            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem,
              responders: null
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return context._currentValue2;
      }

      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }

      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }

      function cloneUpdateQueue(current, workInProgress) {
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;

        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress.updateQueue = clone;
        }
      }

      function createUpdate(eventTime, lane) {
        var update = {
          eventTime: eventTime,
          lane: lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }

      function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;

        if (updateQueue === null) {
          return;
        }

        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;

        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }

        sharedQueue.pending = update;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
      }

      function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        var queue = workInProgress.updateQueue;
        var current = workInProgress.alternate;

        if (current !== null) {
          var currentQueue = current.updateQueue;

          if (queue === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue.firstBaseUpdate;

            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;

              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };

                if (newLast === null) {
                  newFirst = newLast = clone;
                } else {
                  newLast.next = clone;
                  newLast = clone;
                }

                update = update.next;
              } while (update !== null);

              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }

            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress.updateQueue = queue;
            return;
          }
        }

        var lastBaseUpdate = queue.lastBaseUpdate;

        if (lastBaseUpdate === null) {
          queue.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }

        queue.lastBaseUpdate = capturedUpdate;
      }

      function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState:
            {
              var payload = update.payload;

              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }

              return payload;
            }

          case CaptureUpdate:
            {
              workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            }

          case UpdateState:
            {
              var _payload = update.payload;
              var partialState;

              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }

              if (partialState === null || partialState === undefined) {
                return prevState;
              }

              return _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, prevState, partialState);
            }

          case ForceUpdate:
            {
              hasForceUpdate = true;
              return prevState;
            }
        }

        return prevState;
      }

      function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate;
        var pendingQueue = queue.shared.pending;

        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;

          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }

          lastBaseUpdate = lastPendingUpdate;
          var current = workInProgress.alternate;

          if (current !== null) {
            var currentQueue = current.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }

              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }

        if (firstBaseUpdate !== null) {
          var newState = queue.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update = firstBaseUpdate;

          do {
            var updateLane = update.lane;
            var updateEventTime = update.eventTime;

            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };

              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone;
              }

              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }

              newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
              var callback = update.callback;

              if (callback !== null) {
                workInProgress.flags |= Callback;
                var effects = queue.effects;

                if (effects === null) {
                  queue.effects = [update];
                } else {
                  effects.push(update);
                }
              }
            }

            update = update.next;

            if (update === null) {
              pendingQueue = queue.shared.pending;

              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update = _firstPendingUpdate;
                queue.lastBaseUpdate = _lastPendingUpdate;
                queue.shared.pending = null;
              }
            }
          } while (true);

          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }

          queue.baseState = newBaseState;
          queue.firstBaseUpdate = newFirstBaseUpdate;
          queue.lastBaseUpdate = newLastBaseUpdate;
          markSkippedUpdateLanes(newLanes);
          workInProgress.lanes = newLanes;
          workInProgress.memoizedState = newState;
        }

        {
          currentlyProcessingQueue = null;
        }
      }

      function callCallback(callback, context) {
        if (!(typeof callback === "function")) {
          throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        }

        callback.call(context);
      }

      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }

      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }

      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;

        if (effects !== null) {
          for (var i = 0; i < effects.length; i++) {
            var effect = effects[i];
            var callback = effect.callback;

            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }

      var fakeInternalInstance = {};
      var isArray = Array.isArray;
      var emptyRefsObject = new React.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set();
        didWarnAboutUninitializedState = new Set();
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
        didWarnAboutDirectlyAssigningPropsToState = new Set();
        didWarnAboutUndefinedDerivedState = new Set();
        didWarnAboutContextTypeAndContextTypes = new Set();
        didWarnAboutInvalidateContextType = new Set();
        var didWarnOnInvalidCallback = new Set();

        warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }

          var key = callerName + "_" + callback;

          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
          }
        };

        warnOnUndefinedDerivedState = function warnOnUndefinedDerivedState(type, partialState) {
          if (partialState === undefined) {
            var componentName = getComponentName(type) || "Component";

            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " + "You have returned undefined.", componentName);
            }
          }
        };

        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function value() {
            {
              throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          }
        });
        Object.freeze(fakeInternalInstance);
      }

      function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === undefined ? prevState : _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState;

        if (workInProgress.lanes === NoLanes) {
          var updateQueue = workInProgress.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }

      var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function enqueueSetState(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.payload = payload;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ReplaceState;
          update.payload = payload;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate;

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }

          enqueueUpdate(fiber, update);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
      };

      function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;

        if (typeof instance.shouldComponentUpdate === "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (shouldUpdate === undefined) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }

        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }

        return true;
      }

      function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        {
          var name = getComponentName(ctor) || "Component";
          var renderPresent = instance.render;

          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
            }
          }

          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
          }

          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
          }

          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
          }

          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static " + "property to define contextType instead.", name);
          }

          {
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
            }

            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. " + "The legacy contextTypes property will be ignored.", name);
            }
          }

          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name);
          }

          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
          }

          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
          }

          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }

          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }

          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called " + "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }

          var hasMutatedProps = instance.props !== newProps;

          if (instance.props !== undefined && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
          }

          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). " + "This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
          }

          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }

          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }

          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method " + "and will be ignored. Instead, declare it as an instance method.", name);
          }

          var _state = instance.state;

          if (_state && (typeof _state !== "object" || isArray(_state))) {
            error("%s.state: must be set to an object or null", name);
          }

          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", name);
          }
        }
      }

      function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance;
        set(instance, workInProgress);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }

      function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;

            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";

              if (contextType === undefined) {
                addendum = " However, it is set to undefined. " + "This can be caused by a typo or by mixing up named and default imports. " + "This can also happen due to a circular dependency, so " + "try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== undefined) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }

              error("%s defines an invalid contextType. " + "contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
            }
          }
        }

        if (typeof contextType === "object" && contextType !== null) {
          context = _readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }

        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentName(ctor) || "Component";

            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is " + "%s. This is not recommended. Instead, define the initial state by " + "assigning an object to `this.state` in the constructor of `%s`. " + "This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }

          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;

            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }

            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }

            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }

            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentName(ctor) || "Component";

              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";

              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + "%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n" + "The above lifecycles should be removed. Learn more about this warning here:\n" + "https://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }

        if (isLegacyContextConsumer) {
          cacheContext(workInProgress, unmaskedContext, context);
        }

        return instance;
      }

      function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;

        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }

        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }

        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName(workInProgress.type) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }

      function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;

        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }

        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }

        if (instance.state !== oldState) {
          {
            var componentName = getComponentName(workInProgress.type) || "Component";

            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }

      function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        {
          checkClassInstance(workInProgress, ctor, newProps);
        }
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;

        if (typeof contextType === "object" && contextType !== null) {
          instance.context = _readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }

        {
          if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || "Component";

            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state " + "because updates to props won't be reflected in state. " + "In most cases, it is better to use props directly.", componentName);
            }
          }

          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
          }

          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
          }
        }
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress.memoizedState;
        }

        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress, instance);
          processUpdateQueue(workInProgress, newProps, instance, renderLanes);
          instance.state = workInProgress.memoizedState;
        }

        if (typeof instance.componentDidMount === "function") {
          workInProgress.flags |= Update;
        }
      }

      function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;

        if (typeof contextType === "object" && contextType !== null) {
          nextContext = _readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }

        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
          }
        }

        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;

        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            workInProgress.flags |= Update;
          }

          return false;
        }

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress.memoizedState;
        }

        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }

            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
          }

          if (typeof instance.componentDidMount === "function") {
            workInProgress.flags |= Update;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            workInProgress.flags |= Update;
          }

          workInProgress.memoizedProps = newProps;
          workInProgress.memoizedState = newState;
        }

        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }

      function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;

        if (typeof contextType === "object" && contextType !== null) {
          nextContext = _readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
          nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }

        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
          }
        }

        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;

        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.flags |= Update;
            }
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.flags |= Snapshot;
            }
          }

          return false;
        }

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress.memoizedState;
        }

        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }

            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }

          if (typeof instance.componentDidUpdate === "function") {
            workInProgress.flags |= Update;
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress.flags |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.flags |= Update;
            }
          }

          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
              workInProgress.flags |= Snapshot;
            }
          }

          workInProgress.memoizedProps = newProps;
          workInProgress.memoizedState = newState;
        }

        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }

      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;

      var warnForMissingKey = function warnForMissingKey(child, returnFiber) {};

      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};

        warnForMissingKey = function warnForMissingKey(child, returnFiber) {
          if (child === null || typeof child !== "object") {
            return;
          }

          if (!child._store || child._store.validated || child.key != null) {
            return;
          }

          if (!(typeof child._store === "object")) {
            throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }

          child._store.validated = true;
          var componentName = getComponentName(returnFiber.type) || "Component";

          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }

          ownerHasKeyUseWarning[componentName] = true;
          error("Each child in a list should have a unique " + '"key" prop. See https://reactjs.org/link/warning-keys for ' + "more information.");
        };
      }
      var isArray$1 = Array.isArray;

      function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;

        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentName(returnFiber.type) || "Component";

              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('A string ref, "%s", has been found within a strict mode tree. ' + "String refs are a source of potential bugs and should be avoided. " + "We recommend using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }

          if (element._owner) {
            var owner = element._owner;
            var inst;

            if (owner) {
              var ownerFiber = owner;

              if (!(ownerFiber.tag === ClassComponent)) {
                throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              }

              inst = ownerFiber.stateNode;
            }

            if (!inst) {
              throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }

            var stringRef = "" + mixedRef;

            if (current !== null && current.ref !== null && typeof current.ref === "function" && current.ref._stringRef === stringRef) {
              return current.ref;
            }

            var ref = function ref(value) {
              var refs = inst.refs;

              if (refs === emptyRefsObject) {
                refs = inst.refs = {};
              }

              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };

            ref._stringRef = stringRef;
            return ref;
          } else {
            if (!(typeof mixedRef === "string")) {
              throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }

            if (!element._owner) {
              throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
          }
        }

        return mixedRef;
      }

      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== "textarea") {
          {
            throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
      }

      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentName(returnFiber.type) || "Component";

          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }

          ownerHasFunctionTypeWarning[componentName] = true;
          error("Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.");
        }
      }

      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }

          childToDelete.nextEffect = null;
          childToDelete.flags = Deletion;
        }

        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }

          var childToDelete = currentFirstChild;

          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }

          return null;
        }

        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map();
          var existingChild = currentFirstChild;

          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }

            existingChild = existingChild.sibling;
          }

          return existingChildren;
        }

        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }

        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;

          if (!shouldTrackSideEffects) {
            return lastPlacedIndex;
          }

          var current = newFiber.alternate;

          if (current !== null) {
            var oldIndex = current.index;

            if (oldIndex < lastPlacedIndex) {
              newFiber.flags = Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags = Placement;
            return lastPlacedIndex;
          }
        }

        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags = Placement;
          }

          return newFiber;
        }

        function updateTextNode(returnFiber, current, textContent, lanes) {
          if (current === null || current.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }

        function updateElement(returnFiber, current, element, lanes) {
          if (current !== null) {
            if (current.elementType === element.type || isCompatibleFamilyForHotReloading(current, element)) {
              var existing = useFiber(current, element.props);
              existing.ref = coerceRef(returnFiber, current, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }

          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current, element);
          created.return = returnFiber;
          return created;
        }

        function updatePortal(returnFiber, current, portal, lanes) {
          if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }

        function updateFragment(returnFiber, current, fragment, lanes, key) {
          if (current === null || current.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }

        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }

              case REACT_PORTAL_TYPE:
                {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

                  _created2.return = returnFiber;
                  return _created2;
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

              _created3.return = returnFiber;
              return _created3;
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }

        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;

          if (typeof newChild === "string" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }

            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                    }

                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }

              case REACT_PORTAL_TYPE:
                {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }

              return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }

        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }

          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                  }

                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }

              case REACT_PORTAL_TYPE:
                {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;

              return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
            }

            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }

        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }

            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;

                if (typeof key !== "string") {
                  break;
                }

                if (knownKeys === null) {
                  knownKeys = new Set();
                  knownKeys.add(key);
                  break;
                }

                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }

                error("Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.", key);
                break;
            }
          }
          return knownKeys;
        }

        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;

            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;

          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

              if (_newFiber === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }

              previousNewFiber = _newFiber;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }

              previousNewFiber = _newFiber2;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);

          if (!(typeof iteratorFn === "function")) {
            throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }

          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield " + "unexpected results because enumerating a generator mutates it. " + "You may convert it to an array with `Array.from()` or the " + "`[...spread]` operator before rendering. Keep in mind " + "you might need to polyfill these features for older browsers.");
              }

              didWarnAboutGenerators = true;
            }

            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. " + "Use an array of keyed ReactElements instead.");
              }

              didWarnAboutMaps = true;
            }

            var _newChildren = iteratorFn.call(newChildrenIterable);

            if (_newChildren) {
              var knownKeys = null;

              var _step = _newChildren.next();

              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);

          if (!(newChildren != null)) {
            throw Error("An iterable object provided no iterator.");
          }

          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();

          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }

            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }

              break;
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }

            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }

          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            return resultingFirstChild;
          }

          if (oldFiber === null) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);

              if (_newFiber3 === null) {
                continue;
              }

              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }

              previousNewFiber = _newFiber3;
            }

            return resultingFirstChild;
          }

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }

              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }

              previousNewFiber = _newFiber4;
            }
          }

          if (shouldTrackSideEffects) {
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child);
            });
          }

          return resultingFirstChild;
        }

        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }

          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }

        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key = element.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              switch (child.tag) {
                case Fragment:
                  {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }

                    break;
                  }

                case Block:
                default:
                  {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);

                      var _existing3 = useFiber(child, element.props);

                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }

                    break;
                  }
              }

              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }

        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key = portal.key;
          var child = currentFirstChild;

          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }

            child = child.sibling;
          }

          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }

        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }

          var isObject = typeof newChild === "object" && newChild !== null;

          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
          }

          if (typeof newChild === "string" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }

          if (isArray$1(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
          }

          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
          }

          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild);
          }

          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }

          if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
            switch (returnFiber.tag) {
              case ClassComponent:
                {
                  {
                    var instance = returnFiber.stateNode;

                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }

              case Block:
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                {
                  {
                    throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                  }
                }
            }
          }

          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }

        return reconcileChildFibers;
      }

      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);

      function cloneChildFibers(current, workInProgress) {
        if (!(current === null || workInProgress.child === current.child)) {
          throw Error("Resuming work not yet implemented.");
        }

        if (workInProgress.child === null) {
          return;
        }

        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;

        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress;
        }

        newChild.sibling = null;
      }

      function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;

        while (child !== null) {
          resetWorkInProgress(child, lanes);
          child = child.sibling;
        }
      }

      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);

      function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) {
          throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }

        return c;
      }

      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }

      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext();
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }

      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }

      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }

      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);

        if (context === nextContext) {
          return;
        }

        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }

      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }

        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }

      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);

      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }

      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }

      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }

      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }

      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }

      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }

      function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        var nextState = workInProgress.memoizedState;

        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }

          return false;
        }

        var props = workInProgress.memoizedProps;

        if (props.fallback === undefined) {
          return false;
        }

        if (props.unstable_avoidThisFallback !== true) {
          return true;
        }

        if (hasInvisibleParent) {
          return false;
        }

        return true;
      }

      function findFirstSuspended(row) {
        var node = row;

        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;

            if (state !== null) {
              var dehydrated = state.dehydrated;

              if (dehydrated === null || isSuspenseInstancePending() || isSuspenseInstanceFallback()) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;

            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === row) {
            return null;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }

        return null;
      }

      var NoFlags$1 = 0;
      var HasEffect = 1;
      var Layout = 2;
      var Passive$1 = 4;
      var isHydrating = false;

      function enterHydrationState(fiber) {
        {
          return false;
        }
      }

      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        {
          {
            throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }

      function prepareToHydrateHostTextInstance(fiber) {
        {
          {
            throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var shouldUpdate = hydrateTextInstance();
      }

      function popHydrationState(fiber) {
        {
          return false;
        }
      }

      function getIsHydrating() {
        return isHydrating;
      }

      var workInProgressSources = [];
      var rendererSigil$1;
      {
        rendererSigil$1 = {};
      }

      function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
      }

      function resetWorkInProgressVersions() {
        for (var i = 0; i < workInProgressSources.length; i++) {
          var mutableSource = workInProgressSources[i];
          {
            mutableSource._workInProgressVersionSecondary = null;
          }
        }

        workInProgressSources.length = 0;
      }

      function getWorkInProgressVersion(mutableSource) {
        {
          return mutableSource._workInProgressVersionSecondary;
        }
      }

      function setWorkInProgressVersion(mutableSource, version) {
        {
          mutableSource._workInProgressVersionSecondary = version;
        }
        workInProgressSources.push(mutableSource);
      }

      function warnAboutMultipleRenderersDEV(mutableSource) {
        {
          {
            if (mutableSource._currentSecondaryRenderer == null) {
              mutableSource._currentSecondaryRenderer = rendererSigil$1;
            } else if (mutableSource._currentSecondaryRenderer !== rendererSigil$1) {
              error("Detected multiple renderers concurrently rendering the " + "same mutable source. This is currently unsupported.");
            }
          }
        }
      }

      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
          ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnAboutUseOpaqueIdentifier;
      {
        didWarnAboutUseOpaqueIdentifier = {};
        didWarnAboutMismatchedHooksForComponent = new Set();
      }
      var renderLanes = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;

      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;

          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }

      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;

          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;

            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }

      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When " + "specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }

      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentName(currentlyRenderingFiber$1.type);

          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);

            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;

              for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i];
                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i + 1 + ". " + oldHookName;

                while (row.length < secondColumnStart) {
                  row += " ";
                }

                row += newHookName + "\n";
                table += row;
              }

              error("React has detected a change in the order of Hooks called by %s. " + "This will lead to bugs and errors if not fixed. " + "For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n" + "   Previous render            Next render\n" + "   ------------------------------------------------------\n" + "%s" + "   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
          }
        }
      }

      function throwInvalidHookError() {
        {
          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
      }

      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }

        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during " + "the previous render. Even though the final argument is optional, " + "its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }

        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The " + "order and size of this array must remain constant.\n\n" + "Previous: %s\n" + "Incoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }

        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
          if (objectIs(nextDeps[i], prevDeps[i])) {
            continue;
          }

          return false;
        }

        return true;
      }

      function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        {
          hookTypesDev = current !== null ? current._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        }
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes;
        {
          if (current !== null && current.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component(props, secondArg);

        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;

          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false;

            if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
              throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }

            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }

        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
        }
        didScheduleRenderPhaseUpdate = false;

        if (!!didRenderTooFewHooks) {
          throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }

        return children;
      }

      function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.flags &= ~(Passive | Update);
        current.lanes = removeLanes(current.lanes, lanes);
      }

      function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;

          while (hook !== null) {
            var queue = hook.queue;

            if (queue !== null) {
              queue.pending = null;
            }

            hook = hook.next;
          }

          didScheduleRenderPhaseUpdate = false;
        }

        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          isUpdatingOpaqueValueInRenderPhase = false;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
      }

      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };

        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }

        return workInProgressHook;
      }

      function updateWorkInProgressHook() {
        var nextCurrentHook;

        if (currentHook === null) {
          var current = currentlyRenderingFiber$1.alternate;

          if (current !== null) {
            nextCurrentHook = current.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }

        var nextWorkInProgressHook;

        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }

        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (!(nextCurrentHook !== null)) {
            throw Error("Rendered more hooks than during the previous render.");
          }

          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };

          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }

        return workInProgressHook;
      }

      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null
        };
      }

      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }

      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;

        if (init !== undefined) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }

        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }

      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;

        if (!(queue !== null)) {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }

        queue.lastRenderedReducer = reducer;
        var current = currentHook;
        var baseQueue = current.baseQueue;
        var pendingQueue = queue.pending;

        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }

          {
            if (current.baseQueue !== baseQueue) {
              error("Internal error: Expected work-in-progress queue to be a clone. " + "This is a bug in React.");
            }
          }
          current.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }

        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = current.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first;

          do {
            var updateLane = update.lane;

            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone = {
                lane: updateLane,
                action: update.action,
                eagerReducer: update.eagerReducer,
                eagerState: update.eagerState,
                next: null
              };

              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }

              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  lane: NoLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }

              if (update.eagerReducer === reducer) {
                newState = update.eagerState;
              } else {
                var action = update.action;
                newState = reducer(newState, action);
              }
            }

            update = update.next;
          } while (update !== null && update !== first);

          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }

          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }

          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }

        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }

      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;

        if (!(queue !== null)) {
          throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }

        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;

        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;

          do {
            var action = update.action;
            newState = reducer(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);

          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }

          hook.memoizedState = newState;

          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }

          queue.lastRenderedState = newState;
        }

        return [newState, dispatch];
      }

      function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
        {
          warnAboutMultipleRenderersDEV(source);
        }
        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var isSafeToReadFromSource = false;
        var currentRenderVersion = getWorkInProgressVersion(source);

        if (currentRenderVersion !== null) {
          isSafeToReadFromSource = currentRenderVersion === version;
        } else {
          isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);

          if (isSafeToReadFromSource) {
            setWorkInProgressVersion(source, version);
          }
        }

        if (isSafeToReadFromSource) {
          var snapshot = getSnapshot(source._source);
          {
            if (typeof snapshot === "function") {
              error("Mutable source should not return a function as the snapshot value. " + "Functions may close over mutable values and cause tearing.");
            }
          }
          return snapshot;
        } else {
          markSourceAsDirty(source);
          {
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
          }
        }
      }

      function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root = getWorkInProgressRoot();

        if (!(root !== null)) {
          throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }

        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current;

        var _dispatcher$useState = dispatcher.useState(function () {
          return readFromUnsubcribedMutableSource(root, source, getSnapshot);
        }),
            currentSnapshot = _dispatcher$useState[0],
            setSnapshot = _dispatcher$useState[1];

        var snapshot = currentSnapshot;
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
          refs: refs,
          source: source,
          subscribe: subscribe
        };
        dispatcher.useEffect(function () {
          refs.getSnapshot = getSnapshot;
          refs.setSnapshot = setSnapshot;
          var maybeNewVersion = getVersion(source._source);

          if (!objectIs(version, maybeNewVersion)) {
            var maybeNewSnapshot = getSnapshot(source._source);
            {
              if (typeof maybeNewSnapshot === "function") {
                error("Mutable source should not return a function as the snapshot value. " + "Functions may close over mutable values and cause tearing.");
              }
            }

            if (!objectIs(snapshot, maybeNewSnapshot)) {
              setSnapshot(maybeNewSnapshot);
              var lane = requestUpdateLane(fiber);
              markRootMutableRead(root, lane);
            }

            markRootEntangled(root, root.mutableReadLanes);
          }
        }, [getSnapshot, source, subscribe]);
        dispatcher.useEffect(function () {
          var handleChange = function handleChange() {
            var latestGetSnapshot = refs.getSnapshot;
            var latestSetSnapshot = refs.setSnapshot;

            try {
              latestSetSnapshot(latestGetSnapshot(source._source));
              var lane = requestUpdateLane(fiber);
              markRootMutableRead(root, lane);
            } catch (error) {
              latestSetSnapshot(function () {
                throw error;
              });
            }
          };

          var unsubscribe = subscribe(source._source, handleChange);
          {
            if (typeof unsubscribe !== "function") {
              error("Mutable source subscribe function must return an unsubscribe function.");
            }
          }
          return unsubscribe;
        }, [source, subscribe]);

        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
          var newQueue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: snapshot
          };
          newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
          stateHook.queue = newQueue;
          stateHook.baseQueue = null;
          snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
          stateHook.memoizedState = stateHook.baseState = snapshot;
        }

        return snapshot;
      }

      function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
          refs: {
            getSnapshot: getSnapshot,
            setSnapshot: null
          },
          source: source,
          subscribe: subscribe
        };
        return useMutableSource(hook, source, getSnapshot, subscribe);
      }

      function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source, getSnapshot, subscribe);
      }

      function mountState(initialState) {
        var hook = mountWorkInProgressHook();

        if (typeof initialState === "function") {
          initialState = initialState();
        }

        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }

      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }

      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }

      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag: tag,
          create: create,
          destroy: destroy,
          deps: deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;

          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }

        return effect;
      }

      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          hook.memoizedState = _ref2;
          return _ref2;
        }
      }

      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }

      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
      }

      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;

        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;

          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              pushEffect(hookFlags, create, destroy, nextDeps);
              return;
            }
          }
        }

        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
      }

      function mountEffect(create, deps) {
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
      }

      function updateEffect(create, deps) {
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
      }

      function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
      }

      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
      }

      function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;

          var _inst = create();

          refCallback(_inst);
          return function () {
            refCallback(null);
          };
        } else if (ref !== null && ref !== undefined) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a " + "ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }

          var _inst2 = create();

          refObject.current = _inst2;
          return function () {
            refObject.current = null;
          };
        }
      }

      function mountImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }

      function updateImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }

      function mountDebugValue(value, formatterFn) {}

      var updateDebugValue = mountDebugValue;

      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }

      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;

        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }

        hook.memoizedState = [callback, nextDeps];
        return callback;
      }

      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }

      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;

        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }

        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }

      function mountDeferredValue(value) {
        var _mountState = mountState(value),
            prevValue = _mountState[0],
            setValue = _mountState[1];

        mountEffect(function () {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }

      function updateDeferredValue(value) {
        var _updateState = updateState(),
            prevValue = _updateState[0],
            setValue = _updateState[1];

        updateEffect(function () {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }

      function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(),
            prevValue = _rerenderState[0],
            setValue = _rerenderState[1];

        updateEffect(function () {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = 1;

          try {
            setValue(value);
          } finally {
            ReactCurrentBatchConfig$1.transition = prevTransition;
          }
        }, [value]);
        return prevValue;
      }

      function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        {
          runWithPriority(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
            setPending(true);
          });
          runWithPriority(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;

            try {
              setPending(false);
              callback();
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          });
        }
      }

      function mountTransition() {
        var _mountState2 = mountState(false),
            isPending = _mountState2[0],
            setPending = _mountState2[1];

        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [start, isPending];
      }

      function updateTransition() {
        var _updateState2 = updateState(),
            isPending = _updateState2[0];

        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [start, isPending];
      }

      function rerenderTransition() {
        var _rerenderState2 = rerenderState(),
            isPending = _rerenderState2[0];

        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [start, isPending];
      }

      var isUpdatingOpaqueValueInRenderPhase = false;

      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase;
        }
      }

      function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        {
          var name = getComponentName(fiber.type) || "Unknown";

          if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error("The object passed back from useOpaqueIdentifier is meant to be " + "passed through to attributes only. Do not read the " + "value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
          }
        }
      }

      function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        {
          var _id = makeId();

          mountState(_id);
          return _id;
        }
      }

      function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
      }

      function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
      }

      function dispatchAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the " + "second callback argument. To execute a side effect after " + "rendering, declare it in the component body with useEffect().");
          }
        }
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
          lane: lane,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        };
        var pending = queue.pending;

        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }

        queue.pending = update;
        var alternate = fiber.alternate;

        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        } else {
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;

            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }

              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.eagerReducer = lastRenderedReducer;
                update.eagerState = eagerState;

                if (objectIs(eagerState, currentState)) {
                  return;
                }
              } catch (error) {} finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }

          scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
      }

      var ContextOnlyDispatcher = {
        readContext: _readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function warnInvalidContextAccess() {
          error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
        };

        var warnInvalidHookAccess = function warnInvalidHookAccess() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. " + "You can only call Hooks at the top level of your React function. " + "For more information, see " + "https://reactjs.org/link/rules-of-hooks");
        };

        HooksDispatcherOnMountInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            mountHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return updateOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function readContext(context, observedBits) {
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function readContext(context, observedBits) {
            warnInvalidContextAccess();
            return _readContext(context, observedBits);
          },
          useCallback: function useCallback(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function useContext(context, observedBits) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return _readContext(context, observedBits);
          },
          useEffect: function useEffect(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function useImperativeHandle(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useLayoutEffect: function useLayoutEffect(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function useMemo(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function useReducer(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function useRef(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function useState(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function useDebugValue(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function useDeferredValue(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function useTransition() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function useMutableSource(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
          },
          useOpaqueIdentifier: function useOpaqueIdentifier() {
            currentHookNameInDev = "useOpaqueIdentifier";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var profilerStartTime = -1;

      function getCommitTime() {
        return commitTime;
      }

      function recordCommitTime() {
        commitTime = now$1();
      }

      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();

        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }

      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }

      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;

          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }

          profilerStartTime = -1;
        }
      }

      function transferActualDuration(fiber) {
        var child = fiber.child;

        while (child) {
          fiber.actualDuration += child.actualDuration;
          child = child.sibling;
        }
      }

      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }

      function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        if (current === null) {
          workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        } else {
          workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
        }
      }

      function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes);
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
      }

      function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var render = Component.render;
        var ref = workInProgress.ref;
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes);
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
          setIsRendering(false);
        }

        if (current !== null && !didReceiveUpdate) {
          bailoutHooks(current, workInProgress, renderLanes);
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }

        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
        if (current === null) {
          var type = Component.type;

          if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress.tag = SimpleMemoComponent;
            workInProgress.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress, type);
            }
            return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
          }

          {
            var innerPropTypes = type.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
            }
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
          child.ref = workInProgress.ref;
          child.return = workInProgress;
          workInProgress.child = child;
          return child;
        }

        {
          var _type = Component.type;
          var _innerPropTypes = _type.propTypes;

          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
          }
        }
        var currentChild = current.child;

        if (!includesSomeLane(updateLanes, renderLanes)) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component.compare;
          compare = compare !== null ? compare : shallowEqual;

          if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          }
        }

        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
      }

      function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerMemoType = workInProgress.elementType;

            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;

              try {
                outerMemoType = init(payload);
              } catch (x) {
                outerMemoType = null;
              }

              var outerPropTypes = outerMemoType && outerMemoType.propTypes;

              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
              }
            }
          }
        }

        if (current !== null) {
          var prevProps = current.memoizedProps;

          if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
            didReceiveUpdate = false;

            if (!includesSomeLane(renderLanes, updateLanes)) {
              workInProgress.lanes = current.lanes;
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            }
          }
        }

        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
      }

      function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current !== null ? current.memoizedState : null;

        if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
          if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes
            };
            workInProgress.memoizedState = nextState;
            pushRenderLanes(workInProgress, renderLanes);
          } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
            var nextBaseLanes;

            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
            } else {
              nextBaseLanes = renderLanes;
            }

            {
              markSpawnedWork(OffscreenLane);
            }
            workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
            var _nextState = {
              baseLanes: nextBaseLanes
            };
            workInProgress.memoizedState = _nextState;
            pushRenderLanes(workInProgress, nextBaseLanes);
            return null;
          } else {
            var _nextState2 = {
              baseLanes: NoLanes
            };
            workInProgress.memoizedState = _nextState2;
            var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
            pushRenderLanes(workInProgress, subtreeRenderLanes);
          }
        } else {
          var _subtreeRenderLanes;

          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
            workInProgress.memoizedState = null;
          } else {
            _subtreeRenderLanes = renderLanes;
          }

          pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }

        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      var updateLegacyHiddenComponent = updateOffscreenComponent;

      function updateFragment(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function updateProfiler(current, workInProgress, renderLanes) {
        {
          workInProgress.flags |= Update;
          var stateNode = workInProgress.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function markRef(current, workInProgress) {
        var ref = workInProgress.ref;

        if (current === null && ref !== null || current !== null && current.ref !== ref) {
          workInProgress.flags |= Ref;
        }
      }

      function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
          context = getMaskedContext(workInProgress, unmaskedContext);
        }
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes);
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
          setIsRendering(false);
        }

        if (current !== null && !didReceiveUpdate) {
          bailoutHooks(current, workInProgress, renderLanes);
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }

        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;

            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
            }
          }
        }
        var hasContext;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        prepareToReadContext(workInProgress, renderLanes);
        var instance = workInProgress.stateNode;
        var shouldUpdate;

        if (instance === null) {
          if (current !== null) {
            current.alternate = null;
            workInProgress.alternate = null;
            workInProgress.flags |= Placement;
          }

          constructClassInstance(workInProgress, Component, nextProps);
          mountClassInstance(workInProgress, Component, nextProps, renderLanes);
          shouldUpdate = true;
        } else if (current === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
        } else {
          shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
        }

        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
        {
          var inst = workInProgress.stateNode;

          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. " + "This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || "a component");
            }

            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }

      function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
        markRef(current, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress, Component, false);
          }

          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }

        var instance = workInProgress.stateNode;
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;

        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            setIsRendering(true);
            nextChildren = instance.render();
            setIsRendering(false);
          }
        }

        workInProgress.flags |= PerformedWork;

        if (current !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }

        workInProgress.memoizedState = instance.state;

        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, true);
        }

        return workInProgress.child;
      }

      function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;

        if (root.pendingContext) {
          pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        } else if (root.context) {
          pushTopLevelContextObject(workInProgress, root.context, false);
        }

        pushHostContainer(workInProgress, root.containerInfo);
      }

      function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;

        if (!(current !== null && updateQueue !== null)) {
          throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        }

        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState;
        var nextChildren = nextState.element;

        if (nextChildren === prevChildren) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }

        var root = workInProgress.stateNode;

        if (root.hydrate && enterHydrationState()) {
          var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
          workInProgress.child = child;
          var node = child;

          while (node) {
            node.flags = node.flags & ~Placement | Hydrating;
            node = node.sibling;
          }
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }

        return workInProgress.child;
      }

      function updateHostComponent(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;

        if (prevProps !== null && shouldSetTextContent()) {
          workInProgress.flags |= ContentReset;
        }

        markRef(current, workInProgress);
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
      }

      function updateHostText(current, workInProgress) {
        return null;
      }

      function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.flags |= Placement;
        }

        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload);
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;

        switch (resolvedTag) {
          case FunctionComponent:
            {
              {
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
              return child;
            }

          case ClassComponent:
            {
              {
                workInProgress.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
              return child;
            }

          case ForwardRef:
            {
              {
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
              return child;
            }

          case MemoComponent:
            {
              {
                if (workInProgress.type !== workInProgress.elementType) {
                  var outerPropTypes = Component.propTypes;

                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes);
              return child;
            }
        }

        var hint = "";
        {
          if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        {
          throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
        }
      }

      function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.flags |= Placement;
        }

        workInProgress.tag = ClassComponent;
        var hasContext;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        prepareToReadContext(workInProgress, renderLanes);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
      }

      function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
        if (_current !== null) {
          _current.alternate = null;
          workInProgress.alternate = null;
          workInProgress.flags |= Placement;
        }

        var props = workInProgress.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
          context = getMaskedContext(workInProgress, unmaskedContext);
        }
        prepareToReadContext(workInProgress, renderLanes);
        var value;
        {
          if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentName(Component) || "Unknown";

            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }

          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
          }

          setIsRendering(true);
          ReactCurrentOwner$1.current = workInProgress;
          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
          setIsRendering(false);
        }
        workInProgress.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || "Unknown";

            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }

        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
          {
            var _componentName2 = getComponentName(Component) || "Unknown";

            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress.tag = ClassComponent;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          var hasContext = false;

          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
          } else {
            hasContext = false;
          }

          workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
          initializeUpdateQueue(workInProgress);
          var getDerivedStateFromProps = Component.getDerivedStateFromProps;

          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
          }

          adoptClassInstance(workInProgress, value);
          mountClassInstance(workInProgress, Component, props, renderLanes);
          return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else {
          workInProgress.tag = FunctionComponent;
          reconcileChildren(null, workInProgress, value, renderLanes);
          {
            validateFunctionComponentInDev(workInProgress, Component);
          }
          return workInProgress.child;
        }
      }

      function validateFunctionComponentInDev(workInProgress, Component) {
        {
          if (Component) {
            if (Component.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
            }
          }

          if (workInProgress.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();

            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }

            var warningKey = ownerName || workInProgress._debugID || "";
            var debugSource = workInProgress._debugSource;

            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }

            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. " + "Attempts to access this ref will fail. " + "Did you mean to use React.forwardRef()?%s", info);
            }
          }

          if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentName(Component) || "Unknown";

            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }

          if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || "Unknown";

            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }

      var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
      };

      function mountSuspenseOffscreenState(renderLanes) {
        return {
          baseLanes: renderLanes
        };
      }

      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
        };
      }

      function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
        if (current !== null) {
          var suspenseState = current.memoizedState;

          if (suspenseState === null) {
            return false;
          }
        }

        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }

      function getRemainingWorkInPrimaryTree(current, renderLanes) {
        return removeLanes(current.childLanes, renderLanes);
      }

      function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        {
          if (shouldSuspend(workInProgress)) {
            workInProgress.flags |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
          showFallback = true;
          workInProgress.flags &= ~DidCapture;
        } else {
          if (current === null || current.memoizedState !== null) {
            if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }

        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext);

        if (current === null) {
          if (nextProps.fallback !== undefined) ;
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;

          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
            var primaryChildFragment = workInProgress.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
            workInProgress.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
            var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);

            var _primaryChildFragment = workInProgress.child;
            _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
            workInProgress.memoizedState = SUSPENDED_MARKER;
            workInProgress.lanes = SomeRetryLane;
            {
              markSpawnedWork(SomeRetryLane);
            }
            return _fallbackFragment;
          } else {
            return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
          }
        } else {
          var prevState = current.memoizedState;

          if (prevState !== null) {
            if (showFallback) {
              var _nextFallbackChildren2 = nextProps.fallback;
              var _nextPrimaryChildren2 = nextProps.children;

              var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);

              var _primaryChildFragment3 = workInProgress.child;
              var prevOffscreenState = current.child.memoizedState;
              _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
              _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
              workInProgress.memoizedState = SUSPENDED_MARKER;
              return _fallbackChildFragment;
            } else {
              var _nextPrimaryChildren3 = nextProps.children;

              var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);

              workInProgress.memoizedState = null;
              return _primaryChildFragment4;
            }
          } else {
            if (showFallback) {
              var _nextFallbackChildren3 = nextProps.fallback;
              var _nextPrimaryChildren4 = nextProps.children;

              var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);

              var _primaryChildFragment5 = workInProgress.child;
              var _prevOffscreenState = current.child.memoizedState;
              _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
              _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
              workInProgress.memoizedState = SUSPENDED_MARKER;
              return _fallbackChildFragment2;
            } else {
              var _nextPrimaryChildren5 = nextProps.children;

              var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);

              workInProgress.memoizedState = null;
              return _primaryChildFragment6;
            }
          }
        }
      }

      function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
      }

      function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;

        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;

          if (workInProgress.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }

          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        } else {
          primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        }

        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
      }

      function createWorkInProgressOffscreenFiber(current, offscreenProps) {
        return createWorkInProgress(current, offscreenProps);
      }

      function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes;
        }

        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;

        if (currentFallbackChildFragment !== null) {
          currentFallbackChildFragment.nextEffect = null;
          currentFallbackChildFragment.flags = Deletion;
          workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
        }

        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
      }

      function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;

        if ((mode & BlockingMode) === NoMode && workInProgress.child !== currentPrimaryChildFragment) {
          var progressedPrimaryFragment = workInProgress.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;

          if (workInProgress.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }

          var progressedLastEffect = primaryChildFragment.lastEffect;

          if (progressedLastEffect !== null) {
            workInProgress.firstEffect = primaryChildFragment.firstEffect;
            workInProgress.lastEffect = progressedLastEffect;
            progressedLastEffect.nextEffect = null;
          } else {
            workInProgress.firstEffect = workInProgress.lastEffect = null;
          }
        } else {
          primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        }

        var fallbackChildFragment;

        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
          fallbackChildFragment.flags |= Placement;
        }

        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
      }

      function scheduleWorkOnFiber(fiber, renderLanes) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
        var alternate = fiber.alternate;

        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
        }

        scheduleWorkOnParentPath(fiber.return, renderLanes);
      }

      function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
        var node = firstChild;

        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;

            if (state !== null) {
              scheduleWorkOnFiber(node, renderLanes);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleWorkOnFiber(node, renderLanes);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;

        while (row !== null) {
          var currentRow = row.alternate;

          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }

          row = row.sibling;
        }

        return lastContentRow;
      }

      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;

            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards":
                  {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }

                case "forward":
                case "backward":
                  {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }

                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error("%s is not a supported value for revealOrder on <SuspenseList />. " + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }

      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }

      function validateSuspenseListNestedChild(childSlot, index) {
        {
          var isArray = Array.isArray(childSlot);
          var isIterable = !isArray && typeof getIteratorFn(childSlot) === "function";

          if (isArray || isIterable) {
            var type = isArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in " + "an additional SuspenseList to configure its revealOrder: " + "<SuspenseList revealOrder=...> ... " + "<SuspenseList revealOrder=...>{%s}</SuspenseList> ... " + "</SuspenseList>", type, index, type);
            return false;
          }
        }
        return true;
      }

      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);

              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);

                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;

                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }

                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + "This is not useful since it needs multiple rows. " + "Did you mean to pass multiple children or an array?", revealOrder);
              }
            }
          }
        }
      }

      function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
          renderState.lastEffect = lastEffectBeforeRendering;
        }
      }

      function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress.flags |= DidCapture;
        } else {
          var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
          }

          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }

        pushSuspenseContext(workInProgress, suspenseContext);

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          workInProgress.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards":
              {
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;

                if (lastContentRow === null) {
                  tail = workInProgress.child;
                  workInProgress.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }

                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
              }

            case "backwards":
              {
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;

                while (row !== null) {
                  var currentRow = row.alternate;

                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress.child = row;
                    break;
                  }

                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }

                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
              }

            case "together":
              {
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
              }

            default:
              {
                workInProgress.memoizedState = null;
              }
          }
        }

        return workInProgress.child;
      }

      function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;

        if (current === null) {
          workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }

        return workInProgress.child;
      }

      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

      function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }

          var providerPropTypes = workInProgress.type.propTypes;

          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress, newValue);

        if (oldProps !== null) {
          var oldValue = oldProps.value;
          var changedBits = calculateChangedBits(context, newValue, oldValue);

          if (changedBits === 0) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
          } else {
            propagateContextChange(workInProgress, context, changedBits, renderLanes);
          }
        }

        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
      }

      var hasWarnedAboutUsingContextAsConsumer = false;

      function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type;
        {
          if (context._context === undefined) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        {
          if (typeof render !== "function") {
            error("A context consumer was rendered with multiple children, or a child " + "that isn't a function. A context consumer expects a single child " + "that is a function. If you did pass a function, make sure there " + "is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress, renderLanes);

        var newValue = _readContext(context, newProps.unstable_observedBits);

        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress;
          setIsRendering(true);
          newChildren = render(newValue);
          setIsRendering(false);
        }
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
      }

      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }

      function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        if (current !== null) {
          workInProgress.dependencies = current.dependencies;
        }

        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress.lanes);

        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
          return null;
        } else {
          cloneChildFibers(current, workInProgress);
          return workInProgress.child;
        }
      }

      function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;

          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }

          current.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;

          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;

            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }

            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;

              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }

            prevSibling.sibling = newWorkInProgress;
          }

          var last = returnFiber.lastEffect;

          if (last !== null) {
            last.nextEffect = current;
            returnFiber.lastEffect = current;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = current;
          }

          current.nextEffect = null;
          current.flags = Deletion;
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }

      function beginWork(current, workInProgress, renderLanes) {
        var updateLanes = workInProgress.lanes;
        {
          if (workInProgress._debugNeedsRemount && current !== null) {
            return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
          }
        }

        if (current !== null) {
          var oldProps = current.memoizedProps;
          var newProps = workInProgress.pendingProps;

          if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) {
            didReceiveUpdate = true;
          } else if (!includesSomeLane(renderLanes, updateLanes)) {
            didReceiveUpdate = false;

            switch (workInProgress.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress);
                break;

              case HostComponent:
                pushHostContext(workInProgress);
                break;

              case ClassComponent:
                {
                  var Component = workInProgress.type;

                  if (isContextProvider(Component)) {
                    pushContextProvider(workInProgress);
                  }

                  break;
                }

              case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;

              case ContextProvider:
                {
                  var newValue = workInProgress.memoizedProps.value;
                  pushProvider(workInProgress, newValue);
                  break;
                }

              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                  if (hasChildWork) {
                    workInProgress.flags |= Update;
                  }

                  var stateNode = workInProgress.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
                break;

              case SuspenseComponent:
                {
                  var state = workInProgress.memoizedState;

                  if (state !== null) {
                    var primaryChildFragment = workInProgress.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;

                    if (includesSomeLane(renderLanes, primaryChildLanes)) {
                      return updateSuspenseComponent(current, workInProgress, renderLanes);
                    } else {
                      pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }

                  break;
                }

              case SuspenseListComponent:
                {
                  var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

                  var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current, workInProgress, renderLanes);
                    }

                    workInProgress.flags |= DidCapture;
                  }

                  var renderState = workInProgress.memoizedState;

                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                  }

                  pushSuspenseContext(workInProgress, suspenseStackCursor.current);

                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }

              case OffscreenComponent:
              case LegacyHiddenComponent:
                {
                  workInProgress.lanes = NoLanes;
                  return updateOffscreenComponent(current, workInProgress, renderLanes);
                }
            }

            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
          } else {
            if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
        }

        workInProgress.lanes = NoLanes;

        switch (workInProgress.tag) {
          case IndeterminateComponent:
            {
              return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            }

          case LazyComponent:
            {
              var elementType = workInProgress.elementType;
              return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
            }

          case FunctionComponent:
            {
              var _Component = workInProgress.type;
              var unresolvedProps = workInProgress.pendingProps;
              var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
            }

          case ClassComponent:
            {
              var _Component2 = workInProgress.type;
              var _unresolvedProps = workInProgress.pendingProps;

              var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

              return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
            }

          case HostRoot:
            return updateHostRoot(current, workInProgress, renderLanes);

          case HostComponent:
            return updateHostComponent(current, workInProgress, renderLanes);

          case HostText:
            return updateHostText();

          case SuspenseComponent:
            return updateSuspenseComponent(current, workInProgress, renderLanes);

          case HostPortal:
            return updatePortalComponent(current, workInProgress, renderLanes);

          case ForwardRef:
            {
              var type = workInProgress.type;
              var _unresolvedProps2 = workInProgress.pendingProps;

              var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

              return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            }

          case Fragment:
            return updateFragment(current, workInProgress, renderLanes);

          case Mode:
            return updateMode(current, workInProgress, renderLanes);

          case Profiler:
            return updateProfiler(current, workInProgress, renderLanes);

          case ContextProvider:
            return updateContextProvider(current, workInProgress, renderLanes);

          case ContextConsumer:
            return updateContextConsumer(current, workInProgress, renderLanes);

          case MemoComponent:
            {
              var _type2 = workInProgress.type;
              var _unresolvedProps3 = workInProgress.pendingProps;

              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

              {
                if (workInProgress.type !== workInProgress.elementType) {
                  var outerPropTypes = _type2.propTypes;

                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
            }

          case SimpleMemoComponent:
            {
              return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
            }

          case IncompleteClassComponent:
            {
              var _Component3 = workInProgress.type;
              var _unresolvedProps4 = workInProgress.pendingProps;

              var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

              return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
            }

          case SuspenseListComponent:
            {
              return updateSuspenseListComponent(current, workInProgress, renderLanes);
            }

          case FundamentalComponent:
            {
              break;
            }

          case ScopeComponent:
            {
              break;
            }

          case Block:
            {
              break;
            }

          case OffscreenComponent:
            {
              return updateOffscreenComponent(current, workInProgress, renderLanes);
            }

          case LegacyHiddenComponent:
            {
              return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
            }
        }

        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function markUpdate(workInProgress) {
        workInProgress.flags |= Update;
      }

      function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
      }

      var _appendAllChildren;

      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        _appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
          var node = workInProgress.child;

          while (node !== null) {
            if (node.tag === HostComponent) {
              var instance = node.stateNode;

              if (needsVisibilityToggle && isHidden) {
                var props = node.memoizedProps;
                var type = node.type;
                instance = cloneHiddenInstance(instance);
              }

              appendInitialChild(parent, instance);
            } else if (node.tag === HostText) {
              var _instance = node.stateNode;

              if (needsVisibilityToggle && isHidden) {
                var text = node.memoizedProps;
                _instance = cloneHiddenTextInstance();
              }

              appendInitialChild(parent, _instance);
            } else if (node.tag === HostPortal) ;else if (node.tag === SuspenseComponent) {
              if ((node.flags & Update) !== NoFlags) {
                var newIsHidden = node.memoizedState !== null;

                if (newIsHidden) {
                  var primaryChildParent = node.child;

                  if (primaryChildParent !== null) {
                    if (primaryChildParent.child !== null) {
                      primaryChildParent.child.return = primaryChildParent;

                      _appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                    }

                    var fallbackChildParent = primaryChildParent.sibling;

                    if (fallbackChildParent !== null) {
                      fallbackChildParent.return = node;
                      node = fallbackChildParent;
                      continue;
                    }
                  }
                }
              }

              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            node = node;

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        };

        var appendAllChildrenToContainer = function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
          var node = workInProgress.child;

          while (node !== null) {
            if (node.tag === HostComponent) {
              var instance = node.stateNode;

              if (needsVisibilityToggle && isHidden) {
                var props = node.memoizedProps;
                var type = node.type;
                instance = cloneHiddenInstance(instance);
              }

              appendChildToContainerChildSet(containerChildSet, instance);
            } else if (node.tag === HostText) {
              var _instance3 = node.stateNode;

              if (needsVisibilityToggle && isHidden) {
                var text = node.memoizedProps;
                _instance3 = cloneHiddenTextInstance();
              }

              appendChildToContainerChildSet(containerChildSet, _instance3);
            } else if (node.tag === HostPortal) ;else if (node.tag === SuspenseComponent) {
              if ((node.flags & Update) !== NoFlags) {
                var newIsHidden = node.memoizedState !== null;

                if (newIsHidden) {
                  var primaryChildParent = node.child;

                  if (primaryChildParent !== null) {
                    if (primaryChildParent.child !== null) {
                      primaryChildParent.child.return = primaryChildParent;
                      appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                    }

                    var fallbackChildParent = primaryChildParent.sibling;

                    if (fallbackChildParent !== null) {
                      fallbackChildParent.return = node;
                      node = fallbackChildParent;
                      continue;
                    }
                  }
                }
              }

              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            node = node;

            if (node === workInProgress) {
              return;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress) {
                return;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        };

        updateHostContainer = function updateHostContainer(workInProgress) {
          var portalOrRoot = workInProgress.stateNode;
          var childrenUnchanged = workInProgress.firstEffect === null;
          if (childrenUnchanged) ;else {
            var container = portalOrRoot.containerInfo;
            var newChildSet = createContainerChildSet(container);
            appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
            portalOrRoot.pendingChildren = newChildSet;
            markUpdate(workInProgress);
            finalizeContainerChildren(container, newChildSet);
          }
        };

        updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance) {
          var currentInstance = current.stateNode;
          var oldProps = current.memoizedProps;
          var childrenUnchanged = workInProgress.firstEffect === null;

          if (childrenUnchanged && oldProps === newProps) {
            workInProgress.stateNode = currentInstance;
            return;
          }

          var recyclableInstance = workInProgress.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = null;

          if (oldProps !== newProps) {
            updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps);
          }

          if (childrenUnchanged && updatePayload === null) {
            workInProgress.stateNode = currentInstance;
            return;
          }

          var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged);
          workInProgress.stateNode = newInstance;

          if (childrenUnchanged) {
            markUpdate(workInProgress);
          } else {
            _appendAllChildren(newInstance, workInProgress, false, false);
          }
        };

        updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
          if (oldText !== newText) {
            var rootContainerInstance = getRootHostContainer();
            var currentHostContext = getHostContext();
            workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
            markUpdate(workInProgress);
          } else {
            workInProgress.stateNode = current.stateNode;
          }
        };
      }

      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        switch (renderState.tailMode) {
          case "hidden":
            {
              var tailNode = renderState.tail;
              var lastTailNode = null;

              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }

                tailNode = tailNode.sibling;
              }

              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }

              break;
            }

          case "collapsed":
            {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;

              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }

                _tailNode = _tailNode.sibling;
              }

              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }

              break;
            }
        }
      }

      function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps;

        switch (workInProgress.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            return null;

          case ClassComponent:
            {
              var Component = workInProgress.type;

              if (isContextProvider(Component)) {
                popContext(workInProgress);
              }

              return null;
            }

          case HostRoot:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject(workInProgress);
              resetWorkInProgressVersions();
              var fiberRoot = workInProgress.stateNode;

              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }

              if (current === null || current.child === null) {
                var wasHydrated = popHydrationState();

                if (wasHydrated) {
                  markUpdate(workInProgress);
                } else if (!fiberRoot.hydrate) {
                  workInProgress.flags |= Snapshot;
                }
              }

              updateHostContainer(workInProgress);
              return null;
            }

          case HostComponent:
            {
              popHostContext(workInProgress);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress.type;

              if (current !== null && workInProgress.stateNode != null) {
                updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

                if (current.ref !== workInProgress.ref) {
                  markRef$1(workInProgress);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress.stateNode !== null)) {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }

                  return null;
                }

                var currentHostContext = getHostContext();

                var _wasHydrated = popHydrationState();

                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance()) {
                    markUpdate(workInProgress);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);

                  _appendAllChildren(instance, workInProgress, false, false);

                  workInProgress.stateNode = instance;
                }

                if (workInProgress.ref !== null) {
                  markRef$1(workInProgress);
                }
              }

              return null;
            }

          case HostText:
            {
              var newText = newProps;

              if (current && workInProgress.stateNode != null) {
                var oldText = current.memoizedProps;
                updateHostText$1(current, workInProgress, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress.stateNode !== null)) {
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }

                var _rootContainerInstance = getRootHostContainer();

                var _currentHostContext = getHostContext();

                var _wasHydrated2 = popHydrationState();

                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance()) {
                    markUpdate(workInProgress);
                  }
                } else {
                  workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
              }

              return null;
            }

          case SuspenseComponent:
            {
              popSuspenseContext(workInProgress);
              var nextState = workInProgress.memoizedState;

              if ((workInProgress.flags & DidCapture) !== NoFlags) {
                workInProgress.lanes = renderLanes;

                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress);
                }

                return workInProgress;
              }

              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;

              if (current === null) {
                if (workInProgress.memoizedProps.fallback !== undefined) ;
              } else {
                var prevState = current.memoizedState;
                prevDidTimeout = prevState !== null;
              }

              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }

              {
                if (nextDidTimeout) {
                  workInProgress.flags |= Update;
                }
              }
              return null;
            }

          case HostPortal:
            popHostContainer(workInProgress);
            updateHostContainer(workInProgress);

            if (current === null) {
              preparePortalMount(workInProgress.stateNode.containerInfo);
            }

            return null;

          case ContextProvider:
            popProvider(workInProgress);
            return null;

          case IncompleteClassComponent:
            {
              var _Component = workInProgress.type;

              if (isContextProvider(_Component)) {
                popContext(workInProgress);
              }

              return null;
            }

          case SuspenseListComponent:
            {
              popSuspenseContext(workInProgress);
              var renderState = workInProgress.memoizedState;

              if (renderState === null) {
                return null;
              }

              var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;

              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

                  if (!cannotBeSuspended) {
                    var row = workInProgress.child;

                    while (row !== null) {
                      var suspended = findFirstSuspended(row);

                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;

                        if (newThennables !== null) {
                          workInProgress.updateQueue = newThennables;
                          workInProgress.flags |= Update;
                        }

                        if (renderState.lastEffect === null) {
                          workInProgress.firstEffect = null;
                        }

                        workInProgress.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress, renderLanes);
                        pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress.child;
                      }

                      row = row.sibling;
                    }
                  }

                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);

                  if (_suspended !== null) {
                    workInProgress.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;

                    if (_newThennables !== null) {
                      workInProgress.updateQueue = _newThennables;
                      workInProgress.flags |= Update;
                    }

                    cutOffTailIfNeeded(renderState, true);

                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress.lastEffect = renderState.lastEffect;

                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }

                        return null;
                      }
                  } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                    workInProgress.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                }

                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress.child;
                  workInProgress.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;

                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress.child = renderedTail;
                  }

                  renderState.last = renderedTail;
                }
              }

              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress.lastEffect;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;

                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }

                pushSuspenseContext(workInProgress, suspenseContext);
                return next;
              }

              return null;
            }

          case FundamentalComponent:
            {
              break;
            }

          case ScopeComponent:
            {
              break;
            }

          case Block:
            break;

          case OffscreenComponent:
          case LegacyHiddenComponent:
            {
              popRenderLanes(workInProgress);

              if (current !== null) {
                var _nextState = workInProgress.memoizedState;
                var _prevState = current.memoizedState;
                var prevIsHidden = _prevState !== null;
                var nextIsHidden = _nextState !== null;

                if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                  workInProgress.flags |= Update;
                }
              }

              return null;
            }
        }

        {
          throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function unwindWork(workInProgress, renderLanes) {
        switch (workInProgress.tag) {
          case ClassComponent:
            {
              var Component = workInProgress.type;

              if (isContextProvider(Component)) {
                popContext(workInProgress);
              }

              var flags = workInProgress.flags;

              if (flags & ShouldCapture) {
                workInProgress.flags = flags & ~ShouldCapture | DidCapture;

                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress);
                }

                return workInProgress;
              }

              return null;
            }

          case HostRoot:
            {
              popHostContainer(workInProgress);
              popTopLevelContextObject(workInProgress);
              resetWorkInProgressVersions();
              var _flags = workInProgress.flags;

              if (!((_flags & DidCapture) === NoFlags)) {
                throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
              }

              workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

          case HostComponent:
            {
              popHostContext(workInProgress);
              return null;
            }

          case SuspenseComponent:
            {
              popSuspenseContext(workInProgress);
              var _flags2 = workInProgress.flags;

              if (_flags2 & ShouldCapture) {
                workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture;

                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress);
                }

                return workInProgress;
              }

              return null;
            }

          case SuspenseListComponent:
            {
              popSuspenseContext(workInProgress);
              return null;
            }

          case HostPortal:
            popHostContainer(workInProgress);
            return null;

          case ContextProvider:
            popProvider(workInProgress);
            return null;

          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress);
            return null;

          default:
            return null;
        }
      }

      function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
          case ClassComponent:
            {
              var childContextTypes = interruptedWork.type.childContextTypes;

              if (childContextTypes !== null && childContextTypes !== undefined) {
                popContext(interruptedWork);
              }

              break;
            }

          case HostRoot:
            {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }

          case HostComponent:
            {
              popHostContext(interruptedWork);
              break;
            }

          case HostPortal:
            popHostContainer(interruptedWork);
            break;

          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;

          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;

          case ContextProvider:
            popProvider(interruptedWork);
            break;

          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }

      function createCapturedValue(value, source) {
        return {
          value: value,
          source: source,
          stack: getStackByFiberInDevAndProd(source)
        };
      }

      if (!(typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog === "function")) {
        throw Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function.");
      }

      function showErrorDialog(boundary, errorInfo) {
        var capturedError = {
          componentStack: errorInfo.stack !== null ? errorInfo.stack : "",
          error: errorInfo.value,
          errorBoundary: boundary !== null && boundary.tag === ClassComponent ? boundary.stateNode : null
        };
        return ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError);
      }

      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);

          if (logError === false) {
            return;
          }

          var error = errorInfo.value;

          if (true) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";

            if (error != null && error._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }

              console["error"](error);
            }

            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);

            if (errorBoundaryName) {
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            } else {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n" + "Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            }

            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          } else {
            console["error"](error);
          }
        } catch (e) {
          setTimeout(function () {
            throw e;
          });
        }
      }

      var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;

      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error = errorInfo.value;

        update.callback = function () {
          onUncaughtError(error);
          logCapturedError(fiber, errorInfo);
        };

        return update;
      }

      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;

          update.payload = function () {
            logCapturedError(fiber, errorInfo);
            return getDerivedStateFromError(error$1);
          };
        }

        var inst = fiber.stateNode;

        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }

            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
              logCapturedError(fiber, errorInfo);
            }

            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). " + "In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                }
              }
            }
          };
        } else {
          update.callback = function () {
            markFailedErrorBoundaryForHotReloading(fiber);
          };
        }

        return update;
      }

      function attachPingListener(root, wakeable, lanes) {
        var pingCache = root.pingCache;
        var threadIDs;

        if (pingCache === null) {
          pingCache = root.pingCache = new PossiblyWeakMap$1();
          threadIDs = new Set();
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);

          if (threadIDs === undefined) {
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          }
        }

        if (!threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
          wakeable.then(ping, ping);
        }
      }

      function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;

        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;

          if ((sourceFiber.mode & BlockingMode) === NoMode) {
            var currentSource = sourceFiber.alternate;

            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }

          var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
          var _workInProgress = returnFiber;

          do {
            if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
              var wakeables = _workInProgress.updateQueue;

              if (wakeables === null) {
                var updateQueue = new Set();
                updateQueue.add(wakeable);
                _workInProgress.updateQueue = updateQueue;
              } else {
                wakeables.add(wakeable);
              }

              if ((_workInProgress.mode & BlockingMode) === NoMode) {
                _workInProgress.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;

                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update);
                  }
                }

                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                return;
              }

              attachPingListener(root, wakeable, rootRenderLanes);
              _workInProgress.flags |= ShouldCapture;
              _workInProgress.lanes = rootRenderLanes;
              return;
            }

            _workInProgress = _workInProgress.return;
          } while (_workInProgress !== null);

          value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n" + "\n" + "Add a <Suspense fallback=...> component higher in the tree to " + "provide a loading indicator or placeholder to display.");
        }

        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;

        do {
          switch (workInProgress.tag) {
            case HostRoot:
              {
                var _errorInfo = value;
                workInProgress.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);

                var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);

                enqueueCapturedUpdate(workInProgress, _update);
                return;
              }

            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress.type;
              var instance = workInProgress.stateNode;

              if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress.flags |= ShouldCapture;

                var _lane = pickArbitraryLane(rootRenderLanes);

                workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane);

                var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);

                enqueueCapturedUpdate(workInProgress, _update2);
                return;
              }

              break;
          }

          workInProgress = workInProgress.return;
        } while (workInProgress !== null);
      }

      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
      }
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;

      var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        {
          instance.componentWillUnmount();
        }
      };

      function safelyCallComponentWillUnmount(current, instance) {
        {
          invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

          if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current, unmountError);
          }
        }
      }

      function safelyDetachRef(current) {
        var ref = current.ref;

        if (ref !== null) {
          if (typeof ref === "function") {
            {
              {
                invokeGuardedCallback(null, ref, null, null);
              }

              if (hasCaughtError()) {
                var refError = clearCaughtError();
                captureCommitPhaseError(current, refError);
              }
            }
          } else {
            ref.current = null;
          }
        }
      }

      function safelyCallDestroy(current, destroy) {
        {
          invokeGuardedCallback(null, destroy, null);

          if (hasCaughtError()) {
            var error = clearCaughtError();
            captureCommitPhaseError(current, error);
          }
        }
      }

      function commitBeforeMutationLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block:
            {
              return;
            }

          case ClassComponent:
            {
              if (finishedWork.flags & Snapshot) {
                if (current !== null) {
                  var prevProps = current.memoizedProps;
                  var prevState = current.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                    if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) " + "must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
              }

              return;
            }

          case HostRoot:
            {
              return;
            }

          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            return;
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;

          do {
            if ((effect.tag & tag) === tag) {
              var destroy = effect.destroy;
              effect.destroy = undefined;

              if (destroy !== undefined) {
                destroy();
              }
            }

            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }

      function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;

          do {
            if ((effect.tag & tag) === tag) {
              var create = effect.create;
              effect.destroy = create();
              {
                var destroy = effect.destroy;

                if (destroy !== undefined && typeof destroy !== "function") {
                  var addendum = void 0;

                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean " + "up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. " + "Instead, write the async function inside your effect " + "and call it immediately:\n\n" + "useEffect(() => {\n" + "  async function fetchData() {\n" + "    // You can await here\n" + "    const response = await MyAPI.getData(someId);\n" + "    // ...\n" + "  }\n" + "  fetchData();\n" + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + "Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }

                  error("An effect function must not return anything besides a function, " + "which is used for clean-up.%s", addendum);
                }
              }
            }

            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }

      function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;

          do {
            var _effect = effect,
                next = _effect.next,
                tag = _effect.tag;

            if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
              enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
              enqueuePendingPassiveHookEffectMount(finishedWork, effect);
            }

            effect = next;
          } while (effect !== firstEffect);
        }
      }

      function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block:
            {
              {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
              schedulePassiveEffects(finishedWork);
              return;
            }

          case ClassComponent:
            {
              var instance = finishedWork.stateNode;

              if (finishedWork.flags & Update) {
                if (current === null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidMount();
                  }
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                  var prevState = current.memoizedState;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }

                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              }

              var updateQueue = finishedWork.updateQueue;

              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }

              return;
            }

          case HostRoot:
            {
              var _updateQueue = finishedWork.updateQueue;

              if (_updateQueue !== null) {
                var _instance = null;

                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;

                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }

                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }

              return;
            }

          case HostComponent:
            {
              var _instance2 = finishedWork.stateNode;

              if (current === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount();
              }

              return;
            }

          case HostText:
            {
              return;
            }

          case HostPortal:
            {
              return;
            }

          case Profiler:
            {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps,
                    onCommit = _finishedWork$memoize2.onCommit,
                    onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();

                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }

          case SuspenseComponent:
            {
              return;
            }

          case SuspenseListComponent:
          case IncompleteClassComponent:
          case FundamentalComponent:
          case ScopeComponent:
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return;
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;

        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;

          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;

            default:
              instanceToUse = instance;
          }

          if (typeof ref === "function") {
            {
              ref(instanceToUse);
            }
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. " + "Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }

      function commitDetachRef(current) {
        var currentRef = current.ref;

        if (currentRef !== null) {
          if (typeof currentRef === "function") {
            {
              currentRef(null);
            }
          } else {
            currentRef.current = null;
          }
        }
      }

      function commitUnmount(finishedRoot, current, renderPriorityLevel) {
        onCommitUnmount(current);

        switch (current.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block:
            {
              var updateQueue = current.updateQueue;

              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;

                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;

                  do {
                    var _effect2 = effect,
                        destroy = _effect2.destroy,
                        tag = _effect2.tag;

                    if (destroy !== undefined) {
                      if ((tag & Passive$1) !== NoFlags$1) {
                        enqueuePendingPassiveHookEffectUnmount(current, effect);
                      } else {
                        {
                          safelyCallDestroy(current, destroy);
                        }
                      }
                    }

                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }

              return;
            }

          case ClassComponent:
            {
              safelyDetachRef(current);
              var instance = current.stateNode;

              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current, instance);
              }

              return;
            }

          case HostComponent:
            {
              safelyDetachRef(current);
              return;
            }

          case HostPortal:
            {
              {
                emptyPortalContainer(current);
              }
              return;
            }

          case FundamentalComponent:
            {
              return;
            }

          case DehydratedFragment:
            {
              return;
            }

          case ScopeComponent:
            {
              return;
            }
        }
      }

      function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
        var node = root;

        while (true) {
          commitUnmount(finishedRoot, node);

          if (node.child !== null && !supportsMutation) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === root) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === root) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }

      function detachFiberMutation(fiber) {
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        {
          fiber._debugOwner = null;
        }
      }

      function emptyPortalContainer(current) {
        var portal = current.stateNode;
        var containerInfo = portal.containerInfo;
        var emptyChildSet = createContainerChildSet(containerInfo);
      }

      function commitContainer(finishedWork) {
        switch (finishedWork.tag) {
          case ClassComponent:
          case HostComponent:
          case HostText:
          case FundamentalComponent:
            {
              return;
            }

          case HostRoot:
          case HostPortal:
            {
              var portalOrRoot = finishedWork.stateNode;
              var containerInfo = portalOrRoot.containerInfo,
                  pendingChildren = portalOrRoot.pendingChildren;
              return;
            }
        }

        {
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }

      function commitDeletion(finishedRoot, current, renderPriorityLevel) {
        {
          commitNestedUnmounts(finishedRoot, current);
        }
        var alternate = current.alternate;
        detachFiberMutation(current);

        if (alternate !== null) {
          detachFiberMutation(alternate);
        }
      }

      function commitWork(current, finishedWork) {
        {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
              {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }

            case Profiler:
              {
                return;
              }

            case SuspenseComponent:
              {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }

            case SuspenseListComponent:
              {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }

            case HostRoot:
              {
                break;
              }

            case OffscreenComponent:
            case LegacyHiddenComponent:
              {
                return;
              }
          }

          commitContainer(finishedWork);
          return;
        }
      }

      function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;

        if (newState !== null) {
          markCommitTimeOfFallback();
        }
      }

      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;

        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;

          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet();
          }

          wakeables.forEach(function (wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

            if (!retryCache.has(wakeable)) {
              {
                if (wakeable.__reactDoNotTraceInteractions !== true) {
                  retry = tracing.unstable_wrap(retry);
                }
              }
              retryCache.add(wakeable);
              wakeable.then(retry, retry);
            }
          });
        }
      }

      function isSuspenseBoundaryBeingHidden(current, finishedWork) {
        if (current !== null) {
          var oldState = current.memoizedState;

          if (oldState === null || oldState.dehydrated !== null) {
            var newState = finishedWork.memoizedState;
            return newState !== null && newState.dehydrated === null;
          }
        }

        return false;
      }

      var COMPONENT_TYPE = 0;
      var HAS_PSEUDO_CLASS_TYPE = 1;
      var ROLE_TYPE = 2;
      var TEST_NAME_TYPE = 3;
      var TEXT_TYPE = 4;

      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1("selector.component");
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
        ROLE_TYPE = symbolFor$1("selector.role");
        TEST_NAME_TYPE = symbolFor$1("selector.test_id");
        TEXT_TYPE = symbolFor$1("selector.text");
      }

      var ceil = Math.ceil;
      var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
          ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
          IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
      var NoContext = 0;
      var BatchedContext = 1;
      var DiscreteEventContext = 4;
      var LegacyUnbatchedContext = 8;
      var RenderContext = 16;
      var CommitContext = 32;
      var RetryAfterError = 64;
      var RootIncomplete = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var subtreeRenderLanes = NoLanes;
      var subtreeRenderLanesCursor = createCursor(NoLanes);
      var workInProgressRootExitStatus = RootIncomplete;
      var workInProgressRootFatalError = null;
      var workInProgressRootIncludedLanes = NoLanes;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var mostRecentlyUpdatedRoot = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;

      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }

      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }

      var nextEffect = null;
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsRenderPriority = NoPriority$1;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveHookEffectsMount = [];
      var pendingPassiveHookEffectsUnmount = [];
      var rootsWithPendingDiscreteUpdates = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var spawnedWorkDuringRender = null;
      var currentEventTime = NoTimestamp;
      var currentEventWipLanes = NoLanes;
      var currentEventPendingLanes = NoLanes;
      var isFlushingPassiveEffects = false;
      var focusedInstanceHandle = null;
      var shouldFireAfterActiveInstanceBlur = false;

      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }

      function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return now();
        }

        if (currentEventTime !== NoTimestamp) {
          return currentEventTime;
        }

        currentEventTime = now();
        return currentEventTime;
      }

      function requestUpdateLane(fiber) {
        var mode = fiber.mode;

        if ((mode & BlockingMode) === NoMode) {
          return SyncLane;
        } else if ((mode & ConcurrentMode) === NoMode) {
          return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
        }

        if (currentEventWipLanes === NoLanes) {
          currentEventWipLanes = workInProgressRootIncludedLanes;
        }

        var isTransition = requestCurrentTransition() !== NoTransition;

        if (isTransition) {
          if (currentEventPendingLanes !== NoLanes) {
            currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
          }

          return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        }

        var schedulerPriority = getCurrentPriorityLevel();
        var lane;

        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$1) {
          lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        } else {
          var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
          lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }

        return lane;
      }

      function requestRetryLane(fiber) {
        var mode = fiber.mode;

        if ((mode & BlockingMode) === NoMode) {
          return SyncLane;
        } else if ((mode & ConcurrentMode) === NoMode) {
          return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
        }

        if (currentEventWipLanes === NoLanes) {
          currentEventWipLanes = workInProgressRootIncludedLanes;
        }

        return findRetryLane(currentEventWipLanes);
      }

      function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root = markUpdateLaneFromFiberToRoot(fiber, lane);

        if (root === null) {
          warnAboutUpdateOnUnmountedFiberInDEV(fiber);
          return null;
        }

        markRootUpdated(root, lane, eventTime);

        if (root === workInProgressRoot) {
          {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
          }

          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
            markRootSuspended$1(root, workInProgressRootRenderLanes);
          }
        }

        var priorityLevel = getCurrentPriorityLevel();

        if (lane === SyncLane) {
          if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            schedulePendingInteractions(root, lane);
            performSyncWorkOnRoot(root);
          } else {
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, lane);

            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        } else {
          if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority$1)) {
            if (rootsWithPendingDiscreteUpdates === null) {
              rootsWithPendingDiscreteUpdates = new Set([root]);
            } else {
              rootsWithPendingDiscreteUpdates.add(root);
            }
          }

          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, lane);
        }

        mostRecentlyUpdatedRoot = root;
      }

      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;

        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }

        {
          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
        var node = sourceFiber;
        var parent = sourceFiber.return;

        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;

          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
          }

          node = parent;
          parent = parent.return;
        }

        if (node.tag === HostRoot) {
          var root = node.stateNode;
          return root;
        } else {
          return null;
        }
      }

      function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode;
        markStarvedLanesAsExpired(root, currentTime);
        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        var newCallbackPriority = returnNextLanesPriority();

        if (nextLanes === NoLanes) {
          if (existingCallbackNode !== null) {
            cancelCallback(existingCallbackNode);
            root.callbackNode = null;
            root.callbackPriority = NoLanePriority;
          }

          return;
        }

        if (existingCallbackNode !== null) {
          var existingCallbackPriority = root.callbackPriority;

          if (existingCallbackPriority === newCallbackPriority) {
            return;
          }

          cancelCallback(existingCallbackNode);
        }

        var newCallbackNode;

        if (newCallbackPriority === SyncLanePriority) {
          newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
        } else if (newCallbackPriority === SyncBatchedLanePriority) {
          newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
        } else {
          var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
          newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        }

        root.callbackPriority = newCallbackPriority;
        root.callbackNode = newCallbackNode;
      }

      function performConcurrentWorkOnRoot(root) {
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        var originalCallbackNode = root.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();

        if (didFlushPassiveEffects) {
          if (root.callbackNode !== originalCallbackNode) {
            return null;
          }
        }

        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

        if (lanes === NoLanes) {
          return null;
        }

        var exitStatus = renderRootConcurrent(root, lanes);

        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
          prepareFreshStack(root, NoLanes);
        } else if (exitStatus !== RootIncomplete) {
          if (exitStatus === RootErrored) {
            executionContext |= RetryAfterError;

            if (root.hydrate) {
              root.hydrate = false;
              clearContainer(root.containerInfo);
            }

            lanes = getLanesToRetrySynchronouslyOnError(root);

            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root, lanes);
            }
          }

          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
          }

          var finishedWork = root.current.alternate;
          root.finishedWork = finishedWork;
          root.finishedLanes = lanes;
          finishConcurrentRender(root, exitStatus, lanes);
        }

        ensureRootIsScheduled(root, now());

        if (root.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root);
        }

        return null;
      }

      function finishConcurrentRender(root, exitStatus, lanes) {
        switch (exitStatus) {
          case RootIncomplete:
          case RootFatalErrored:
            {
              {
                throw Error("Root did not complete. This is a bug in React.");
              }
            }

          case RootErrored:
            {
              commitRoot(root);
              break;
            }

          case RootSuspended:
            {
              markRootSuspended$1(root, lanes);

              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();

                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root, NoLanes);

                  if (nextLanes !== NoLanes) {
                    break;
                  }

                  var suspendedLanes = root.suspendedLanes;

                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root, suspendedLanes);
                    break;
                  }

                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                  break;
                }
              }

              commitRoot(root);
              break;
            }

          case RootSuspendedWithDelay:
            {
              markRootSuspended$1(root, lanes);

              if (includesOnlyTransitions(lanes)) {
                break;
              }

              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;

                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;

                if (_msUntilTimeout > 10) {
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                  break;
                }
              }

              commitRoot(root);
              break;
            }

          case RootCompleted:
            {
              commitRoot(root);
              break;
            }

          default:
            {
              {
                throw Error("Unknown root exit status.");
              }
            }
        }
      }

      function markRootSuspended$1(root, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root, suspendedLanes);
      }

      function performSyncWorkOnRoot(root) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        flushPassiveEffects();
        var lanes;
        var exitStatus;

        if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
          lanes = workInProgressRootRenderLanes;
          exitStatus = renderRootSync(root, lanes);

          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            lanes = getNextLanes(root, lanes);
            exitStatus = renderRootSync(root, lanes);
          }
        } else {
          lanes = getNextLanes(root, NoLanes);
          exitStatus = renderRootSync(root, lanes);
        }

        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
          executionContext |= RetryAfterError;

          if (root.hydrate) {
            root.hydrate = false;
            clearContainer(root.containerInfo);
          }

          lanes = getLanesToRetrySynchronouslyOnError(root);

          if (lanes !== NoLanes) {
            exitStatus = renderRootSync(root, lanes);
          }
        }

        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root, NoLanes);
          markRootSuspended$1(root, lanes);
          ensureRootIsScheduled(root, now());
          throw fatalError;
        }

        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        commitRoot(root);
        ensureRootIsScheduled(root, now());
        return null;
      }

      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;

        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;

          if (executionContext === NoContext) {
            resetRenderTimer();
            flushSyncCallbackQueue();
          }
        }
      }

      function flushSync(fn, a) {
        var prevExecutionContext = executionContext;

        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
          {
            error("flushSync was called from inside a lifecycle method. React cannot " + "flush when React is already rendering. Consider moving this call to " + "a scheduler task or micro task.");
          }
          return fn(a);
        }

        executionContext |= BatchedContext;
        {
          try {
            if (fn) {
              return runWithPriority(ImmediatePriority$1, fn.bind(null, a));
            } else {
              return undefined;
            }
          } finally {
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
          }
        }
      }

      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }

      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
      }

      function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        var timeoutHandle = root.timeoutHandle;

        if (timeoutHandle !== noTimeout) {
          root.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }

        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;

          while (interruptedWork !== null) {
            unwindInterruptedWork(interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }

        workInProgressRoot = root;
        workInProgress = createWorkInProgress(root.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        {
          spawnedWorkDuringRender = null;
        }
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
      }

      function handleError(root, thrownValue) {
        do {
          var erroredWork = workInProgress;

          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();
            ReactCurrentOwner$2.current = null;

            if (erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return;
            }

            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
            }

            throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
            completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;

            if (workInProgress === erroredWork && erroredWork !== null) {
              erroredWork = erroredWork.return;
              workInProgress = erroredWork;
            } else {
              erroredWork = workInProgress;
            }

            continue;
          }

          return;
        } while (true);
      }

      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }

      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }

      function pushInteractions(root) {
        {
          var prevInteractions = tracing.__interactionsRef.current;
          tracing.__interactionsRef.current = root.memoizedInteractions;
          return prevInteractions;
        }
      }

      function popInteractions(prevInteractions) {
        {
          tracing.__interactionsRef.current = prevInteractions;
        }
      }

      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }

      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }

      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }

      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }

        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }

      function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) {
          workInProgressRootExitStatus = RootErrored;
        }
      }

      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootIncomplete;
      }

      function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();

        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
          prepareFreshStack(root, lanes);
          startWorkOnPendingInteractions(root, lanes);
        }

        var prevInteractions = pushInteractions(root);

        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (true);

        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);

        if (workInProgress !== null) {
          {
            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
        }

        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }

      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }

      function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();

        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
          resetRenderTimer();
          prepareFreshStack(root, lanes);
          startWorkOnPendingInteractions(root, lanes);
        }

        var prevInteractions = pushInteractions(root);

        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (true);

        resetContextDependencies();
        {
          popInteractions(prevInteractions);
        }
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;

        if (workInProgress !== null) {
          return RootIncomplete;
        } else {
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
      }

      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }

      function performUnitOfWork(unitOfWork) {
        var current = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;

        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
        }

        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;

        if (next === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next;
        }

        ReactCurrentOwner$2.current = null;
      }

      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;

        do {
          var current = completedWork.alternate;
          var returnFiber = completedWork.return;

          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = void 0;

            if ((completedWork.mode & ProfileMode) === NoMode) {
              next = completeWork(current, completedWork, subtreeRenderLanes);
            } else {
              startProfilerTimer(completedWork);
              next = completeWork(current, completedWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }

            resetCurrentFiber();

            if (next !== null) {
              workInProgress = next;
              return;
            }

            resetChildLanes(completedWork);

            if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
              if (returnFiber.firstEffect === null) {
                returnFiber.firstEffect = completedWork.firstEffect;
              }

              if (completedWork.lastEffect !== null) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                }

                returnFiber.lastEffect = completedWork.lastEffect;
              }

              var flags = completedWork.flags;

              if (flags > PerformedWork) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = completedWork;
                } else {
                  returnFiber.firstEffect = completedWork;
                }

                returnFiber.lastEffect = completedWork;
              }
            }
          } else {
            var _next = unwindWork(completedWork);

            if (_next !== null) {
              _next.flags &= HostEffectMask;
              workInProgress = _next;
              return;
            }

            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              var actualDuration = completedWork.actualDuration;
              var child = completedWork.child;

              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }

              completedWork.actualDuration = actualDuration;
            }

            if (returnFiber !== null) {
              returnFiber.firstEffect = returnFiber.lastEffect = null;
              returnFiber.flags |= Incomplete;
            }
          }

          var siblingFiber = completedWork.sibling;

          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }

          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);

        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }

      function resetChildLanes(completedWork) {
        if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
          return;
        }

        var newChildLanes = NoLanes;

        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
          var child = completedWork.child;

          while (child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));

            if (shouldBubbleActualDurations) {
              actualDuration += child.actualDuration;
            }

            treeBaseDuration += child.treeBaseDuration;
            child = child.sibling;
          }

          var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;

          if (isTimedOutSuspense) {
            var primaryChildFragment = completedWork.child;

            if (primaryChildFragment !== null) {
              treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
          }

          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;

          while (_child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
            _child = _child.sibling;
          }
        }

        completedWork.childLanes = newChildLanes;
      }

      function commitRoot(root) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
        return null;
      }

      function commitRootImpl(root, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);

        flushRenderPhaseStrictModeWarningsInDEV();

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Should not already be working.");
        }

        var finishedWork = root.finishedWork;
        var lanes = root.finishedLanes;

        if (finishedWork === null) {
          return null;
        }

        root.finishedWork = null;
        root.finishedLanes = NoLanes;

        if (!(finishedWork !== root.current)) {
          throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }

        root.callbackNode = null;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root, remainingLanes);

        if (rootsWithPendingDiscreteUpdates !== null) {
          if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
            rootsWithPendingDiscreteUpdates.delete(root);
          }
        }

        if (root === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }

        var firstEffect;

        if (finishedWork.flags > PerformedWork) {
          if (finishedWork.lastEffect !== null) {
            finishedWork.lastEffect.nextEffect = finishedWork;
            firstEffect = finishedWork.firstEffect;
          } else {
            firstEffect = finishedWork;
          }
        } else {
          firstEffect = finishedWork.firstEffect;
        }

        if (firstEffect !== null) {
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root);
          ReactCurrentOwner$2.current = null;
          focusedInstanceHandle = prepareForCommit(root.containerInfo);
          shouldFireAfterActiveInstanceBlur = false;
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitBeforeMutationEffects, null);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var error = clearCaughtError();
                captureCommitPhaseError(nextEffect, error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          focusedInstanceHandle = null;
          {
            recordCommitTime();
          }
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var _error = clearCaughtError();

                captureCommitPhaseError(nextEffect, _error);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          resetAfterCommit(root.containerInfo);
          root.current = finishedWork;
          nextEffect = firstEffect;

          do {
            {
              invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var _error2 = clearCaughtError();

                captureCommitPhaseError(nextEffect, _error2);
                nextEffect = nextEffect.nextEffect;
              }
            }
          } while (nextEffect !== null);

          nextEffect = null;
          requestPaint();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
        } else {
          root.current = finishedWork;
          {
            recordCommitTime();
          }
        }

        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root;
          pendingPassiveEffectsLanes = lanes;
          pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
          nextEffect = firstEffect;

          while (nextEffect !== null) {
            var nextNextEffect = nextEffect.nextEffect;
            nextEffect.nextEffect = null;

            if (nextEffect.flags & Deletion) {
              detachFiberAfterEffects(nextEffect);
            }

            nextEffect = nextNextEffect;
          }
        }

        remainingLanes = root.pendingLanes;

        if (remainingLanes !== NoLanes) {
          {
            if (spawnedWorkDuringRender !== null) {
              var expirationTimes = spawnedWorkDuringRender;
              spawnedWorkDuringRender = null;

              for (var i = 0; i < expirationTimes.length; i++) {
                scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
              }
            }

            schedulePendingInteractions(root, remainingLanes);
          }
        } else {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }

        {
          if (!rootDidHavePassiveEffects) {
            finishPendingInteractions(root, lanes);
          }
        }

        if (remainingLanes === SyncLane) {
          if (root === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root;
          }
        } else {
          nestedUpdateCount = 0;
        }

        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        ensureRootIsScheduled(root, now());

        if (hasUncaughtError) {
          hasUncaughtError = false;
          var _error3 = firstUncaughtError;
          firstUncaughtError = null;
          throw _error3;
        }

        if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
          return null;
        }

        flushSyncCallbackQueue();
        return null;
      }

      function commitBeforeMutationEffects() {
        while (nextEffect !== null) {
          var current = nextEffect.alternate;

          if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
            if ((nextEffect.flags & Deletion) !== NoFlags) {
              if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                shouldFireAfterActiveInstanceBlur = true;
              }
            } else {
              if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                shouldFireAfterActiveInstanceBlur = true;
              }
            }
          }

          var flags = nextEffect.flags;

          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(nextEffect);
            commitBeforeMutationLifeCycles(current, nextEffect);
            resetCurrentFiber();
          }

          if ((flags & Passive) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function () {
                flushPassiveEffects();
                return null;
              });
            }
          }

          nextEffect = nextEffect.nextEffect;
        }
      }

      function commitMutationEffects(root, renderPriorityLevel) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var flags = nextEffect.flags;

          if (flags & Ref) {
            var current = nextEffect.alternate;

            if (current !== null) {
              commitDetachRef(current);
            }
          }

          var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);

          switch (primaryFlags) {
            case Placement:
              {
                nextEffect.flags &= ~Placement;
                break;
              }

            case PlacementAndUpdate:
              {
                nextEffect.flags &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }

            case Hydrating:
              {
                nextEffect.flags &= ~Hydrating;
                break;
              }

            case HydratingAndUpdate:
              {
                nextEffect.flags &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }

            case Update:
              {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }

            case Deletion:
              {
                commitDeletion(root, nextEffect);
                break;
              }
          }

          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }

      function commitLayoutEffects(root, committedLanes) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect);
          var flags = nextEffect.flags;

          if (flags & (Update | Callback)) {
            var current = nextEffect.alternate;
            commitLifeCycles(root, current, nextEffect);
          }

          {
            if (flags & Ref) {
              commitAttachRef(nextEffect);
            }
          }
          resetCurrentFiber();
          nextEffect = nextEffect.nextEffect;
        }
      }

      function flushPassiveEffects() {
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
          var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
          pendingPassiveEffectsRenderPriority = NoPriority$1;
          {
            return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
          }
        }

        return false;
      }

      function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);

        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback(NormalPriority$1, function () {
            flushPassiveEffects();
            return null;
          });
        }
      }

      function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        {
          fiber.flags |= PassiveUnmountPendingDev;
          var alternate = fiber.alternate;

          if (alternate !== null) {
            alternate.flags |= PassiveUnmountPendingDev;
          }
        }

        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback(NormalPriority$1, function () {
            flushPassiveEffects();
            return null;
          });
        }
      }

      function invokePassiveEffectCreate(effect) {
        var create = effect.create;
        effect.destroy = create();
      }

      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }

        var root = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;

        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw Error("Cannot flush passive effects while already rendering.");
        }

        {
          isFlushingPassiveEffects = true;
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root);
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];

        for (var i = 0; i < unmountEffects.length; i += 2) {
          var _effect = unmountEffects[i];
          var fiber = unmountEffects[i + 1];
          var destroy = _effect.destroy;
          _effect.destroy = undefined;
          {
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;

            if (alternate !== null) {
              alternate.flags &= ~PassiveUnmountPendingDev;
            }
          }

          if (typeof destroy === "function") {
            {
              setCurrentFiber(fiber);
              {
                invokeGuardedCallback(null, destroy, null);
              }

              if (hasCaughtError()) {
                if (!(fiber !== null)) {
                  throw Error("Should be working on an effect.");
                }

                var error = clearCaughtError();
                captureCommitPhaseError(fiber, error);
              }

              resetCurrentFiber();
            }
          }
        }

        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];

        for (var _i = 0; _i < mountEffects.length; _i += 2) {
          var _effect2 = mountEffects[_i];
          var _fiber = mountEffects[_i + 1];
          {
            setCurrentFiber(_fiber);
            {
              invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            }

            if (hasCaughtError()) {
              if (!(_fiber !== null)) {
                throw Error("Should be working on an effect.");
              }

              var _error4 = clearCaughtError();

              captureCommitPhaseError(_fiber, _error4);
            }

            resetCurrentFiber();
          }
        }

        var effect = root.current.firstEffect;

        while (effect !== null) {
          var nextNextEffect = effect.nextEffect;
          effect.nextEffect = null;

          if (effect.flags & Deletion) {
            detachFiberAfterEffects(effect);
          }

          effect = nextNextEffect;
        }

        {
          popInteractions(prevInteractions);
          finishPendingInteractions(root, lanes);
        }
        {
          isFlushingPassiveEffects = false;
        }
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue();
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
      }

      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }

      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }

      function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error;
        }
      }

      var onUncaughtError = prepareToThrowUncaughtError;

      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);

        if (root !== null) {
          markRootUpdated(root, SyncLane, eventTime);
          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, SyncLane);
        }
      }

      function captureCommitPhaseError(sourceFiber, error) {
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
          return;
        }

        var fiber = sourceFiber.return;

        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;

            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(error, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              enqueueUpdate(fiber, update);
              var eventTime = requestEventTime();
              var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);

              if (root !== null) {
                markRootUpdated(root, SyncLane, eventTime);
                ensureRootIsScheduled(root, eventTime);
                schedulePendingInteractions(root, SyncLane);
              } else {
                if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  try {
                    instance.componentDidCatch(error, errorInfo);
                  } catch (errorToIgnore) {}
                }
              }

              return;
            }
          }

          fiber = fiber.return;
        }
      }

      function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;

        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }

        var eventTime = requestEventTime();
        markRootPinged(root, pingedLanes);

        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root, NoLanes);
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }

        ensureRootIsScheduled(root, eventTime);
        schedulePendingInteractions(root, pingedLanes);
      }

      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }

        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);

        if (root !== null) {
          markRootUpdated(root, retryLane, eventTime);
          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, retryLane);
        }
      }

      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        {
          retryCache = boundaryFiber.stateNode;
        }

        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }

        retryTimedOutBoundary(boundaryFiber, retryLane);
      }

      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }

      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          {
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
        }

        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component " + "calls setState inside useEffect, but useEffect either doesn't " + "have a dependency array, or one of the dependencies changes on " + "every render.");
          }
        }
      }

      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }

      var didWarnStateUpdateForNotYetMountedComponent = null;

      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }

          if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
            return;
          }

          var tag = fiber.tag;

          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
            return;
          }

          var componentName = getComponentName(fiber.type) || "ReactComponent";

          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }

            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
          }

          var previousFiber = current;

          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. " + "This indicates that you have a side-effect in your render function that " + "asynchronously later calls tries to update the component. Move this work to " + "useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }

      var didWarnStateUpdateForUnmountedComponent = null;

      function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        {
          var tag = fiber.tag;

          if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
            return;
          }

          if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
            return;
          }

          var componentName = getComponentName(fiber.type) || "ReactComponent";

          if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
              return;
            }

            didWarnStateUpdateForUnmountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
          }

          if (isFlushingPassiveEffects) ;else {
            var previousFiber = current;

            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on an unmounted component. This " + "is a no-op, but it indicates a memory leak in your application. To " + "fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }

      var beginWork$1;
      {
        var dummyFiber = null;

        beginWork$1 = function beginWork$1(current, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

          try {
            return beginWork(current, unitOfWork, lanes);
          } catch (originalError) {
            if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }

            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }

            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              throw replayError;
            } else {
              throw originalError;
            }
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = new Set();
      }

      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
                {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;

                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a " + "different component (`%s`). To locate the bad setState() call inside `%s`, " + "follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }

                  break;
                }

              case ClassComponent:
                {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as " + "within `render`). Render methods should be a pure " + "function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }

                  break;
                }
            }
          }
        }
      }

      var didWarnAboutUnmockedScheduler = false;

      function warnIfUnmockedScheduler(fiber) {
        {
          if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
              didWarnAboutUnmockedScheduler = true;
              error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + "to guarantee consistent behaviour across tests and browsers. " + "For example, with jest: \n" + "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + "For more info, visit https://reactjs.org/link/mock-scheduler");
            }
          }
        }
      }

      function computeThreadID(root, lane) {
        return lane * 1000 + root.interactionThreadID;
      }

      function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) {
          spawnedWorkDuringRender = [lane];
        } else {
          spawnedWorkDuringRender.push(lane);
        }
      }

      function scheduleInteractions(root, lane, interactions) {
        if (interactions.size > 0) {
          var pendingInteractionMap = root.pendingInteractionMap;
          var pendingInteractions = pendingInteractionMap.get(lane);

          if (pendingInteractions != null) {
            interactions.forEach(function (interaction) {
              if (!pendingInteractions.has(interaction)) {
                interaction.__count++;
              }

              pendingInteractions.add(interaction);
            });
          } else {
            pendingInteractionMap.set(lane, new Set(interactions));
            interactions.forEach(function (interaction) {
              interaction.__count++;
            });
          }

          var subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null) {
            var threadID = computeThreadID(root, lane);
            subscriber.onWorkScheduled(interactions, threadID);
          }
        }
      }

      function schedulePendingInteractions(root, lane) {
        scheduleInteractions(root, lane, tracing.__interactionsRef.current);
      }

      function startWorkOnPendingInteractions(root, lanes) {
        var interactions = new Set();
        root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
          if (includesSomeLane(lanes, scheduledLane)) {
            scheduledInteractions.forEach(function (interaction) {
              return interactions.add(interaction);
            });
          }
        });
        root.memoizedInteractions = interactions;

        if (interactions.size > 0) {
          var subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null) {
            var threadID = computeThreadID(root, lanes);

            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              scheduleCallback(ImmediatePriority$1, function () {
                throw error;
              });
            }
          }
        }
      }

      function finishPendingInteractions(root, committedLanes) {
        var remainingLanesAfterCommit = root.pendingLanes;
        var subscriber;

        try {
          subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(root, committedLanes);
            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
          }
        } catch (error) {
          scheduleCallback(ImmediatePriority$1, function () {
            throw error;
          });
        } finally {
          var pendingInteractionMap = root.pendingInteractionMap;
          pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
            if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
              pendingInteractionMap.delete(lane);
              scheduledInteractions.forEach(function (interaction) {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error) {
                    scheduleCallback(ImmediatePriority$1, function () {
                      throw error;
                    });
                  }
                }
              });
            }
          });
        }
      }

      function shouldForceFlushFallbacksInDEV() {
        return actingUpdatesScopeDepth > 0;
      }

      var actingUpdatesScopeDepth = 0;

      function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
      }

      var resolveFamily = null;
      var failedBoundaries = null;

      var setRefreshHandler = function setRefreshHandler(handler) {
        {
          resolveFamily = handler;
        }
      };

      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }

          var family = resolveFamily(type);

          if (family === undefined) {
            return type;
          }

          return family.current;
        }
      }

      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }

      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }

          var family = resolveFamily(type);

          if (family === undefined) {
            if (type !== null && type !== undefined && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);

              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };

                if (type.displayName !== undefined) {
                  syntheticType.displayName = type.displayName;
                }

                return syntheticType;
              }
            }

            return type;
          }

          return family.current;
        }
      }

      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }

          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;

          switch (fiber.tag) {
            case ClassComponent:
              {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }

                break;
              }

            case FunctionComponent:
              {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            case ForwardRef:
              {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            case MemoComponent:
            case SimpleMemoComponent:
              {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }

                break;
              }

            default:
              return false;
          }

          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);

            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }

          return false;
        }
      }

      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }

          if (typeof WeakSet !== "function") {
            return;
          }

          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet();
          }

          failedBoundaries.add(fiber);
        }
      }

      var scheduleRefresh = function scheduleRefresh(root, update) {
        {
          if (resolveFamily === null) {
            return;
          }

          var staleFamilies = update.staleFamilies,
              updatedFamilies = update.updatedFamilies;
          flushPassiveEffects();
          flushSync(function () {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
          });
        }
      };

      var scheduleRoot = function scheduleRoot(root, element) {
        {
          if (root.context !== emptyContextObject) {
            return;
          }

          flushPassiveEffects();
          flushSync(function () {
            updateContainer(element, root, null, null);
          });
        }
      };

      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate,
              child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
          var candidateType = null;

          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;

            case ForwardRef:
              candidateType = type.render;
              break;
          }

          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }

          var needsRender = false;
          var needsRemount = false;

          if (candidateType !== null) {
            var family = resolveFamily(candidateType);

            if (family !== undefined) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }

          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }

          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }

          if (needsRemount || needsRender) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }

          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }

          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }

      var findHostInstancesForRefresh = function findHostInstancesForRefresh(root, families) {
        {
          var hostInstances = new Set();
          var types = new Set(families.map(function (family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
          return hostInstances;
        }
      };

      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
          var candidateType = null;

          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;

            case ForwardRef:
              candidateType = type.render;
              break;
          }

          var didMatch = false;

          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }

          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }

          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }

      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

          if (foundHostInstances) {
            return;
          }

          var node = fiber;

          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;

              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;

              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }

            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }

            node = node.return;
          }
        }
      }

      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;

          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }

            if (node === fiber) {
              return foundHostInstances;
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }

              node = node.return;
            }

            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }

      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;

        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      var debugCounter = 1;

      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugID = debugCounter++;
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;

          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }

      var createFiber = function createFiber(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };

      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }

      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === undefined;
      }

      function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") {
          return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
        } else if (Component !== undefined && Component !== null) {
          var $$typeof = Component.$$typeof;

          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }

          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }

        return IndeterminateComponent;
      }

      function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;

        if (workInProgress === null) {
          workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
          workInProgress.elementType = current.elementType;
          workInProgress.type = current.type;
          workInProgress.stateNode = current.stateNode;
          {
            workInProgress._debugID = current._debugID;
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
          }
          workInProgress.alternate = current;
          current.alternate = workInProgress;
        } else {
          workInProgress.pendingProps = pendingProps;
          workInProgress.type = current.type;
          workInProgress.flags = NoFlags;
          workInProgress.nextEffect = null;
          workInProgress.firstEffect = null;
          workInProgress.lastEffect = null;
          {
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
          }
        }

        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        {
          workInProgress.selfBaseDuration = current.selfBaseDuration;
          workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        {
          workInProgress._debugNeedsRemount = current._debugNeedsRemount;

          switch (workInProgress.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress.type = resolveFunctionForHotReloading(current.type);
              break;

            case ClassComponent:
              workInProgress.type = resolveClassForHotReloading(current.type);
              break;

            case ForwardRef:
              workInProgress.type = resolveForwardRefForHotReloading(current.type);
              break;
          }
        }
        return workInProgress;
      }

      function resetWorkInProgress(workInProgress, renderLanes) {
        workInProgress.flags &= Placement;
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;
        var current = workInProgress.alternate;

        if (current === null) {
          workInProgress.childLanes = NoLanes;
          workInProgress.lanes = renderLanes;
          workInProgress.child = null;
          workInProgress.memoizedProps = null;
          workInProgress.memoizedState = null;
          workInProgress.updateQueue = null;
          workInProgress.dependencies = null;
          workInProgress.stateNode = null;
          {
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
          }
        } else {
          workInProgress.childLanes = current.childLanes;
          workInProgress.lanes = current.lanes;
          workInProgress.child = current.child;
          workInProgress.memoizedProps = current.memoizedProps;
          workInProgress.memoizedState = current.memoizedState;
          workInProgress.updateQueue = current.updateQueue;
          workInProgress.type = current.type;
          var currentDependencies = current.dependencies;
          workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
          }
        }

        return workInProgress;
      }

      function createHostRootFiber(tag) {
        var mode;

        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode | BlockingMode | StrictMode;
        } else if (tag === BlockingRoot) {
          mode = BlockingMode | StrictMode;
        } else {
          mode = NoMode;
        }

        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }

        return createFiber(HostRoot, null, null, mode);
      }

      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;

        if (typeof type === "function") {
          if (shouldConstruct(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag: switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, lanes, key);

            case REACT_DEBUG_TRACING_MODE_TYPE:
              fiberTag = Mode;
              mode |= DebugTracingMode;
              break;

            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictMode;
              break;

            case REACT_PROFILER_TYPE:
              return createFiberFromProfiler(pendingProps, mode, lanes, key);

            case REACT_SUSPENSE_TYPE:
              return createFiberFromSuspense(pendingProps, mode, lanes, key);

            case REACT_SUSPENSE_LIST_TYPE:
              return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

            case REACT_OFFSCREEN_TYPE:
              return createFiberFromOffscreen(pendingProps, mode, lanes, key);

            case REACT_LEGACY_HIDDEN_TYPE:
              return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);

            case REACT_SCOPE_TYPE:
            default:
              {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;

                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;

                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;

                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;

                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;

                    case REACT_BLOCK_TYPE:
                      fiberTag = Block;
                      break getTag;
                  }
                }

                var info = "";
                {
                  if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and " + "named imports.";
                  }

                  var ownerName = owner ? getComponentName(owner.type) : null;

                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                {
                  throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                }
              }
          }
        }

        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }

      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }

      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" as a prop');
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }

      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        {
          fiber.type = REACT_SUSPENSE_LIST_TYPE;
        }
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        {
          fiber.type = REACT_OFFSCREEN_TYPE;
        }
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
        {
          fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        }
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }

      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }

      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }

        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }

      function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        {
          this.interactionThreadID = tracing.unstable_getThreadID();
          this.memoizedInteractions = new Set();
          this.pendingInteractionMap = new Map();
        }
        {
          switch (tag) {
            case BlockingRoot:
              this._debugRootType = "createBlockingRoot()";
              break;

            case ConcurrentRoot:
              this._debugRootType = "createRoot()";
              break;

            case LegacyRoot:
              this._debugRootType = "createLegacyRoot()";
              break;
          }
        }
      }

      function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate);
        var uninitializedFiber = createHostRootFiber(tag);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        initializeUpdateQueue(uninitializedFiber);
        return root;
      }

      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children: children,
          containerInfo: containerInfo,
          implementation: implementation
        };
      }

      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }

      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }

        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);

        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;

          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext);
          }
        }

        return parentContext;
      }

      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);

          if (fiber === undefined) {
            if (typeof component.render === "function") {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            } else {
              {
                throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
              }
            }
          }

          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || "Component";

            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;

              try {
                setCurrentFiber(hostFiber);

                if (fiber.mode & StrictMode) {
                  error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which is inside StrictMode. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which renders StrictMode children. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }

          return hostFiber.stateNode;
        }
      }

      function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
      }

      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var eventTime = requestEventTime();
        {
          if ("undefined" !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
          }
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);

        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }

        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(current.type) || "Unknown");
          }
        }
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element: element
        };
        callback = callback === undefined ? null : callback;

        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }

        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
      }

      function getPublicRootInstance(container) {
        var containerFiber = container.current;

        if (!containerFiber.child) {
          return null;
        }

        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);

          default:
            return containerFiber.child.stateNode;
        }
      }

      var shouldSuspendImpl = function shouldSuspendImpl(fiber) {
        return false;
      };

      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }

      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function copyWithDeleteImpl(obj, path, index) {
          var key = path[index];
          var updated = Array.isArray(obj) ? obj.slice() : _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, obj);

          if (index + 1 === path.length) {
            if (Array.isArray(updated)) {
              updated.splice(key, 1);
            } else {
              delete updated[key];
            }

            return updated;
          }

          updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
          return updated;
        };

        var copyWithDelete = function copyWithDelete(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        };

        var copyWithRenameImpl = function copyWithRenameImpl(obj, oldPath, newPath, index) {
          var oldKey = oldPath[index];
          var updated = Array.isArray(obj) ? obj.slice() : _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, obj);

          if (index + 1 === oldPath.length) {
            var newKey = newPath[index];
            updated[newKey] = updated[oldKey];

            if (Array.isArray(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
          }

          return updated;
        };

        var copyWithRename = function copyWithRename(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i = 0; i < newPath.length - 1; i++) {
              if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }

          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };

        var copyWithSetImpl = function copyWithSetImpl(obj, path, index, value) {
          if (index >= path.length) {
            return value;
          }

          var key = path[index];
          var updated = Array.isArray(obj) ? obj.slice() : _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
          return updated;
        };

        var copyWithSet = function copyWithSet(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };

        var findHook = function findHook(fiber, id) {
          var currentHook = fiber.memoizedState;

          while (currentHook !== null && id > 0) {
            currentHook = currentHook.next;
            id--;
          }

          return currentHook;
        };

        overrideHookState = function overrideHookState(fiber, id, path, value) {
          var hook = findHook(fiber, id);

          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };

        overrideHookStateDeletePath = function overrideHookStateDeletePath(fiber, id, path) {
          var hook = findHook(fiber, id);

          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };

        overrideHookStateRenamePath = function overrideHookStateRenamePath(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);

          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = _$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }
        };

        overrideProps = function overrideProps(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }

          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };

        overridePropsDeletePath = function overridePropsDeletePath(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }

          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };

        overridePropsRenamePath = function overridePropsRenamePath(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }

          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };

        scheduleUpdate = function scheduleUpdate(fiber) {
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        };

        setSuspenseHandler = function setSuspenseHandler(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }

      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);

        if (hostFiber === null) {
          return null;
        }

        return hostFiber.stateNode;
      }

      function emptyFindFiberByHostInstance(instance) {
        return null;
      }

      function getCurrentFiberForDevTools() {
        return current;
      }

      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState: overrideHookState,
          overrideHookStateDeletePath: overrideHookStateDeletePath,
          overrideHookStateRenamePath: overrideHookStateRenamePath,
          overrideProps: overrideProps,
          overridePropsDeletePath: overridePropsDeletePath,
          overridePropsRenamePath: overridePropsRenamePath,
          setSuspenseHandler: setSuspenseHandler,
          scheduleUpdate: scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher,
          findHostInstanceByFiber: findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh: findHostInstancesForRefresh,
          scheduleRefresh: scheduleRefresh,
          scheduleRoot: scheduleRoot,
          setRefreshHandler: setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools
        });
      }

      var instanceCache = new Map();

      function getInstanceFromTag(tag) {
        return instanceCache.get(tag) || null;
      }

      var emptyObject$1 = {};
      {
        Object.freeze(emptyObject$1);
      }
      var getInspectorDataForViewTag;
      var getInspectorDataForViewAtPoint;
      {
        var traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
          if (instance) {
            hierarchy.unshift(instance);
            traverseOwnerTreeUp(hierarchy, instance._debugOwner);
          }
        };

        var getOwnerHierarchy = function getOwnerHierarchy(instance) {
          var hierarchy = [];
          traverseOwnerTreeUp(hierarchy, instance);
          return hierarchy;
        };

        var lastNonHostInstance = function lastNonHostInstance(hierarchy) {
          for (var i = hierarchy.length - 1; i > 1; i--) {
            var instance = hierarchy[i];

            if (instance.tag !== HostComponent) {
              return instance;
            }
          }

          return hierarchy[0];
        };

        var getHostProps = function getHostProps(fiber) {
          var host = findCurrentHostFiber(fiber);

          if (host) {
            return host.memoizedProps || emptyObject$1;
          }

          return emptyObject$1;
        };

        var getHostNode = function getHostNode(fiber, findNodeHandle) {
          var hostNode;

          while (fiber) {
            if (fiber.stateNode !== null && fiber.tag === HostComponent) {
              hostNode = findNodeHandle(fiber.stateNode);
            }

            if (hostNode) {
              return hostNode;
            }

            fiber = fiber.child;
          }

          return null;
        };

        var createHierarchy = function createHierarchy(fiberHierarchy) {
          return fiberHierarchy.map(function (fiber) {
            return {
              name: getComponentName(fiber.type),
              getInspectorData: function getInspectorData(findNodeHandle) {
                return {
                  props: getHostProps(fiber),
                  source: fiber._debugSource,
                  measure: function measure(callback) {
                    var hostFiber = findCurrentHostFiber(fiber);
                    var shadowNode = hostFiber != null && hostFiber.stateNode !== null && hostFiber.stateNode.node;

                    if (shadowNode) {
                      nativeFabricUIManager.measure(shadowNode, callback);
                    } else {
                      return ReactNativePrivateInterface.UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                    }
                  }
                };
              }
            };
          });
        };

        var getInspectorDataForInstance = function getInspectorDataForInstance(closestInstance) {
          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject$1,
              selectedIndex: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selectedIndex = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selectedIndex: selectedIndex,
            source: source
          };
        };

        getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
          var closestInstance = getInstanceFromTag(viewTag);

          if (!closestInstance) {
            return {
              hierarchy: [],
              props: emptyObject$1,
              selectedIndex: null,
              source: null
            };
          }

          var fiber = findCurrentFiberUsingSlowPath(closestInstance);
          var fiberHierarchy = getOwnerHierarchy(fiber);
          var instance = lastNonHostInstance(fiberHierarchy);
          var hierarchy = createHierarchy(fiberHierarchy);
          var props = getHostProps(instance);
          var source = instance._debugSource;
          var selectedIndex = fiberHierarchy.indexOf(instance);
          return {
            hierarchy: hierarchy,
            props: props,
            selectedIndex: selectedIndex,
            source: source
          };
        };

        getInspectorDataForViewAtPoint = function getInspectorDataForViewAtPoint(findNodeHandle, inspectedView, locationX, locationY, callback) {
          var closestInstance = null;

          if (inspectedView._internalInstanceHandle != null) {
            nativeFabricUIManager.findNodeAtPoint(inspectedView._internalInstanceHandle.stateNode.node, locationX, locationY, function (internalInstanceHandle) {
              if (internalInstanceHandle == null) {
                callback(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({
                  pointerY: locationY,
                  frame: {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                  }
                }, getInspectorDataForInstance(closestInstance)));
              }

              closestInstance = internalInstanceHandle.stateNode.canonical._internalInstanceHandle;
              nativeFabricUIManager.measure(internalInstanceHandle.stateNode.node, function (x, y, width, height, pageX, pageY) {
                callback(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({
                  pointerY: locationY,
                  frame: {
                    left: pageX,
                    top: pageY,
                    width: width,
                    height: height
                  }
                }, getInspectorDataForInstance(closestInstance)));
              });
            });
          } else if (inspectedView._internalFiberInstanceHandleDEV != null) {
            ReactNativePrivateInterface.UIManager.findSubviewIn(findNodeHandle(inspectedView), [locationX, locationY], function (nativeViewTag, left, top, width, height) {
              var inspectorData = getInspectorDataForInstance(getInstanceFromTag(nativeViewTag));
              callback(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/extends")({}, inspectorData, {
                pointerY: locationY,
                frame: {
                  left: left,
                  top: top,
                  width: width,
                  height: height
                },
                touchedViewTag: nativeViewTag
              }));
            });
          } else {
            error("getInspectorDataForViewAtPoint expects to receive a host component");
            return;
          }
        };
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

      function findHostInstance_DEPRECATED(componentOrHandle) {
        {
          var owner = ReactCurrentOwner$3.current;

          if (owner !== null && owner.stateNode !== null) {
            if (!owner.stateNode._warnedAboutRefsInRender) {
              error("%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner.type) || "A component");
            }

            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (componentOrHandle._nativeTag) {
          return componentOrHandle;
        }

        if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {
          return componentOrHandle.canonical;
        }

        var hostInstance;
        {
          hostInstance = findHostInstanceWithWarning(componentOrHandle, "findHostInstance_DEPRECATED");
        }

        if (hostInstance == null) {
          return hostInstance;
        }

        if (hostInstance.canonical) {
          return hostInstance.canonical;
        }

        return hostInstance;
      }

      function findNodeHandle(componentOrHandle) {
        {
          var owner = ReactCurrentOwner$3.current;

          if (owner !== null && owner.stateNode !== null) {
            if (!owner.stateNode._warnedAboutRefsInRender) {
              error("%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner.type) || "A component");
            }

            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrHandle == null) {
          return null;
        }

        if (typeof componentOrHandle === "number") {
          return componentOrHandle;
        }

        if (componentOrHandle._nativeTag) {
          return componentOrHandle._nativeTag;
        }

        if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {
          return componentOrHandle.canonical._nativeTag;
        }

        var hostInstance;
        {
          hostInstance = findHostInstanceWithWarning(componentOrHandle, "findNodeHandle");
        }

        if (hostInstance == null) {
          return hostInstance;
        }

        if (hostInstance.canonical) {
          return hostInstance.canonical._nativeTag;
        }

        return hostInstance._nativeTag;
      }

      function dispatchCommand(handle, command, args) {
        if (handle._nativeTag == null) {
          {
            error("dispatchCommand was called with a ref that isn't a " + "native component. Use React.forwardRef to get access to the underlying native component");
          }
          return;
        }

        if (handle._internalInstanceHandle) {
          nativeFabricUIManager.dispatchCommand(handle._internalInstanceHandle.stateNode.node, command, args);
        } else {
          ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args);
        }
      }

      function render(element, containerTag, callback) {
        var root = roots.get(containerTag);

        if (!root) {
          root = createContainer(containerTag, LegacyRoot, false);
          roots.set(containerTag, root);
        }

        updateContainer(element, root, null, callback);
        return getPublicRootInstance(root);
      }

      function unmountComponentAtNode(containerTag) {
        this.stopSurface(containerTag);
      }

      function stopSurface(containerTag) {
        var root = roots.get(containerTag);

        if (root) {
          updateContainer(null, root, null, function () {
            roots.delete(containerTag);
          });
        }
      }

      function createPortal$1(children, containerTag) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        return createPortal(children, containerTag, null, key);
      }

      setBatchingImplementation(batchedUpdates$1);
      var roots = new Map();
      injectIntoDevTools({
        findFiberByHostInstance: getInstanceFromInstance,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-native-renderer",
        rendererConfig: {
          getInspectorDataForViewTag: getInspectorDataForViewTag,
          getInspectorDataForViewAtPoint: getInspectorDataForViewAtPoint.bind(null, findNodeHandle)
        }
      });
      exports.createPortal = createPortal$1;
      exports.dispatchCommand = dispatchCommand;
      exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
      exports.findNodeHandle = findNodeHandle;
      exports.render = render;
      exports.stopSurface = stopSurface;
      exports.unmountComponentAtNode = unmountComponentAtNode;
    })();
  }
},474,[1,72,55,135,437,4],"node_modules/react-native/Libraries/Renderer/implementations/ReactFabric-dev.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports._LogBoxInspectorContainer = void 0;

  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/classCallCheck"));

  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "@babel/runtime/helpers/createClass"));

  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "@babel/runtime/helpers/inherits"));

  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "@babel/runtime/helpers/possibleConstructorReturn"));

  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "@babel/runtime/helpers/getPrototypeOf"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6], "react"));

  var _reactNative = _$$_REQUIRE(_dependencyMap[7], "react-native");

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8], "./Data/LogBoxData"));

  var _LogBoxInspector = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./UI/LogBoxInspector"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var _LogBoxInspectorContainer = function (_React$Component) {
    (0, _inherits2.default)(_LogBoxInspectorContainer, _React$Component);

    var _super = _createSuper(_LogBoxInspectorContainer);

    function _LogBoxInspectorContainer() {
      var _this;

      (0, _classCallCheck2.default)(this, _LogBoxInspectorContainer);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _this._handleDismiss = function () {
        var _this$props = _this.props,
            selectedLogIndex = _this$props.selectedLogIndex,
            logs = _this$props.logs;
        var logsArray = Array.from(logs);

        if (selectedLogIndex != null) {
          if (logsArray.length - 1 <= 0) {
            LogBoxData.setSelectedLog(-1);
          } else if (selectedLogIndex >= logsArray.length - 1) {
            LogBoxData.setSelectedLog(selectedLogIndex - 1);
          }

          LogBoxData.dismiss(logsArray[selectedLogIndex]);
        }
      };

      _this._handleMinimize = function () {
        LogBoxData.setSelectedLog(-1);
      };

      _this._handleSetSelectedLog = function (index) {
        LogBoxData.setSelectedLog(index);
      };

      return _this;
    }

    (0, _createClass2.default)(_LogBoxInspectorContainer, [{
      key: "render",
      value: function render() {
        return React.createElement(_reactNative.View, {
          style: _reactNative.StyleSheet.absoluteFill,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 28,
            columnNumber: 7
          }
        }, React.createElement(_LogBoxInspector.default, {
          onDismiss: this._handleDismiss,
          onMinimize: this._handleMinimize,
          onChangeSelectedIndex: this._handleSetSelectedLog,
          logs: this.props.logs,
          selectedIndex: this.props.selectedLogIndex,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 29,
            columnNumber: 9
          }
        }));
      }
    }]);
    return _LogBoxInspectorContainer;
  }(React.Component);

  exports._LogBoxInspectorContainer = _LogBoxInspectorContainer;

  var _default = LogBoxData.withSubscription(_LogBoxInspectorContainer);

  exports.default = _default;
},475,[7,9,10,14,16,13,1,5,389,476],"node_modules/react-native/Libraries/LogBox/LogBoxInspectorContainer.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var _LogBoxInspectorCodeFrame = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./LogBoxInspectorCodeFrame"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  var _ScrollView = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Components/ScrollView/ScrollView"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../StyleSheet/StyleSheet"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Components/View/View"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "../Data/LogBoxData"));

  var _Keyboard = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "../../Components/Keyboard/Keyboard"));

  var _LogBoxInspectorFooter = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./LogBoxInspectorFooter"));

  var _LogBoxInspectorMessageHeader = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "./LogBoxInspectorMessageHeader"));

  var _LogBoxInspectorReactFrames = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[11], "./LogBoxInspectorReactFrames"));

  var _LogBoxInspectorStackFrames = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[12], "./LogBoxInspectorStackFrames"));

  var _LogBoxInspectorHeader = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[13], "./LogBoxInspectorHeader"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14], "./LogBoxStyle"));

  var _LogBoxLog = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[15], "../Data/LogBoxLog"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspector(props) {
    var logs = props.logs,
        selectedIndex = props.selectedIndex;
    var log = logs[selectedIndex];
    React.useEffect(function () {
      if (log) {
        LogBoxData.symbolicateLogNow(log);
      }
    }, [log]);
    React.useEffect(function () {
      if (logs.length > 1) {
        var selected = selectedIndex;
        var lastIndex = logs.length - 1;
        var prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;
        var nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;
        LogBoxData.symbolicateLogLazy(logs[prevIndex]);
        LogBoxData.symbolicateLogLazy(logs[nextIndex]);
      }
    }, [logs, selectedIndex]);
    React.useEffect(function () {
      _Keyboard.default.dismiss();
    }, []);

    function _handleRetry() {
      LogBoxData.retrySymbolicateLogNow(log);
    }

    if (log == null) {
      return null;
    }

    return React.createElement(_View.default, {
      style: styles.root,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxInspectorHeader.default, {
      onSelectIndex: props.onChangeSelectedIndex,
      selectedIndex: selectedIndex,
      total: logs.length,
      level: log.level,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 7
      }
    }), React.createElement(LogBoxInspectorBody, {
      log: log,
      onRetry: _handleRetry,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 79,
        columnNumber: 7
      }
    }), React.createElement(_LogBoxInspectorFooter.default, {
      onDismiss: props.onDismiss,
      onMinimize: props.onMinimize,
      level: log.level,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 80,
        columnNumber: 7
      }
    }));
  }

  var headerTitleMap = {
    warn: 'Console Warning',
    error: 'Console Error',
    fatal: 'Uncaught Error',
    syntax: 'Syntax Error',
    component: 'Render Error'
  };

  function LogBoxInspectorBody(props) {
    var _props$log$type;

    var _React$useState = React.useState(true),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        collapsed = _React$useState2[0],
        setCollapsed = _React$useState2[1];

    React.useEffect(function () {
      setCollapsed(true);
    }, [props.log]);
    var headerTitle = (_props$log$type = props.log.type) != null ? _props$log$type : headerTitleMap[props.log.isComponentError ? 'component' : props.log.level];

    if (collapsed) {
      return React.createElement(React.Fragment, null, React.createElement(_LogBoxInspectorMessageHeader.default, {
        collapsed: collapsed,
        onPress: function onPress() {
          return setCollapsed(!collapsed);
        },
        message: props.log.message,
        level: props.log.level,
        title: headerTitle,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 111,
          columnNumber: 9
        }
      }), React.createElement(_ScrollView.default, {
        style: styles.scrollBody,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 118,
          columnNumber: 9
        }
      }, React.createElement(_LogBoxInspectorCodeFrame.default, {
        codeFrame: props.log.codeFrame,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 119,
          columnNumber: 11
        }
      }), React.createElement(_LogBoxInspectorReactFrames.default, {
        log: props.log,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 120,
          columnNumber: 11
        }
      }), React.createElement(_LogBoxInspectorStackFrames.default, {
        log: props.log,
        onRetry: props.onRetry,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 121,
          columnNumber: 11
        }
      })));
    }

    return React.createElement(_ScrollView.default, {
      style: styles.scrollBody,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 127,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxInspectorMessageHeader.default, {
      collapsed: collapsed,
      onPress: function onPress() {
        return setCollapsed(!collapsed);
      },
      message: props.log.message,
      level: props.log.level,
      title: headerTitle,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 128,
        columnNumber: 7
      }
    }), React.createElement(_LogBoxInspectorCodeFrame.default, {
      codeFrame: props.log.codeFrame,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 135,
        columnNumber: 7
      }
    }), React.createElement(_LogBoxInspectorReactFrames.default, {
      log: props.log,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 136,
        columnNumber: 7
      }
    }), React.createElement(_LogBoxInspectorStackFrames.default, {
      log: props.log,
      onRetry: props.onRetry,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 137,
        columnNumber: 7
      }
    }));
  }

  var styles = _StyleSheet.default.create({
    root: {
      flex: 1,
      backgroundColor: LogBoxStyle.getTextColor()
    },
    scrollBody: {
      backgroundColor: LogBoxStyle.getBackgroundColor(0.9),
      flex: 1
    }
  });

  var _default = LogBoxInspector;
  exports.default = _default;
},476,[7,31,477,1,215,183,178,389,251,481,482,483,484,489,468,390],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _Platform = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/Platform"));

  var _ScrollView = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../Components/ScrollView/ScrollView"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Components/View/View"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "./LogBoxStyle"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "./LogBoxButton"));

  var _openFileInEditor = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "../../Core/Devtools/openFileInEditor"));

  var _AnsiHighlight = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "./AnsiHighlight"));

  var _LogBoxInspectorSection = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[11], "./LogBoxInspectorSection"));

  var LogBoxData = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[12], "../Data/LogBoxData"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorCodeFrame.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorCodeFrame(props) {
    var codeFrame = props.codeFrame;

    if (codeFrame == null) {
      return null;
    }

    function getFileName() {
      var matches = /[^/]*$/.exec(codeFrame.fileName);

      if (matches && matches.length > 0) {
        return matches[0];
      }

      return codeFrame.fileName;
    }

    function getLocation() {
      var location = codeFrame.location;

      if (location != null) {
        return " (" + location.row + ":" + (location.column + 1) + ")";
      }

      return null;
    }

    return React.createElement(_LogBoxInspectorSection.default, {
      heading: "Source",
      action: React.createElement(AppInfo, {
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57,
          columnNumber: 54
        }
      }),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 57,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: styles.box,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 58,
        columnNumber: 7
      }
    }, React.createElement(_View.default, {
      style: styles.frame,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 59,
        columnNumber: 9
      }
    }, React.createElement(_ScrollView.default, {
      horizontal: true,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 60,
        columnNumber: 11
      }
    }, React.createElement(_AnsiHighlight.default, {
      style: styles.content,
      text: codeFrame.content,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 61,
        columnNumber: 13
      }
    }))), React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: LogBoxStyle.getBackgroundDarkColor(1)
      },
      style: styles.button,
      onPress: function onPress() {
        var _codeFrame$location$r, _codeFrame$location;

        (0, _openFileInEditor.default)(codeFrame.fileName, (_codeFrame$location$r = (_codeFrame$location = codeFrame.location) == null ? void 0 : _codeFrame$location.row) != null ? _codeFrame$location$r : 0);
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 64,
        columnNumber: 9
      }
    }, React.createElement(_Text.default, {
      style: styles.fileText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 11
      }
    }, getFileName(), getLocation()))));
  }

  function AppInfo() {
    var appInfo = LogBoxData.getAppInfo();

    if (appInfo == null) {
      return null;
    }

    return React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: appInfo.onPress ? LogBoxStyle.getBackgroundColor(1) : 'transparent'
      },
      style: appInfoStyles.buildButton,
      onPress: appInfo.onPress,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 90,
        columnNumber: 5
      }
    }, React.createElement(_Text.default, {
      style: appInfoStyles.text,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 99,
        columnNumber: 7
      }
    }, appInfo.appVersion, " (", appInfo.engine, ")"));
  }

  var appInfoStyles = _StyleSheet.default.create({
    text: {
      color: LogBoxStyle.getTextColor(0.4),
      fontSize: 12,
      lineHeight: 12
    },
    buildButton: {
      flex: 0,
      flexGrow: 0,
      paddingVertical: 4,
      paddingHorizontal: 5,
      borderRadius: 5,
      marginRight: -8
    }
  });

  var styles = _StyleSheet.default.create({
    box: {
      backgroundColor: LogBoxStyle.getBackgroundColor(),
      marginLeft: 10,
      marginRight: 10,
      marginTop: 5,
      borderRadius: 3
    },
    frame: {
      padding: 10,
      borderBottomColor: LogBoxStyle.getTextColor(0.1),
      borderBottomWidth: 1
    },
    button: {
      paddingTop: 10,
      paddingBottom: 10
    },
    content: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 12,
      includeFontPadding: false,
      lineHeight: 20,
      fontFamily: _Platform.default.select({
        android: 'monospace',
        ios: 'Menlo'
      })
    },
    fileText: {
      color: LogBoxStyle.getTextColor(0.5),
      textAlign: 'center',
      flex: 1,
      fontSize: 12,
      includeFontPadding: false,
      lineHeight: 16,
      fontFamily: _Platform.default.select({
        android: 'monospace',
        ios: 'Menlo'
      })
    }
  });

  var _default = LogBoxInspectorCodeFrame;
  exports.default = _default;
},477,[1,7,65,215,183,191,178,468,467,457,478,480,389],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorCodeFrame.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = Ansi;

  var _Text = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Components/View/View"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/AnsiHighlight.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var COLORS = {
    'ansi-black': 'rgb(27, 27, 27)',
    'ansi-red': 'rgb(187, 86, 83)',
    'ansi-green': 'rgb(144, 157, 98)',
    'ansi-yellow': 'rgb(234, 193, 121)',
    'ansi-blue': 'rgb(125, 169, 199)',
    'ansi-magenta': 'rgb(176, 101, 151)',
    'ansi-cyan': 'rgb(140, 220, 216)',
    'ansi-bright-black': 'rgb(98, 98, 98)',
    'ansi-bright-red': 'rgb(187, 86, 83)',
    'ansi-bright-green': 'rgb(144, 157, 98)',
    'ansi-bright-yellow': 'rgb(234, 193, 121)',
    'ansi-bright-blue': 'rgb(125, 169, 199)',
    'ansi-bright-magenta': 'rgb(176, 101, 151)',
    'ansi-bright-cyan': 'rgb(140, 220, 216)',
    'ansi-bright-white': 'rgb(247, 247, 247)'
  };

  function Ansi(_ref) {
    var _this = this;

    var text = _ref.text,
        style = _ref.style;
    var commonWhitespaceLength = Infinity;
    var parsedLines = text.split(/\n/).map(function (line) {
      return (0, _$$_REQUIRE(_dependencyMap[4], "anser").ansiToJson)(line, {
        json: true,
        remove_empty: true,
        use_classes: true
      });
    });
    parsedLines.map(function (lines) {
      var _lines$, _lines$$content, _match$;

      var match = lines[2] && ((_lines$ = lines[2]) == null ? void 0 : (_lines$$content = _lines$.content) == null ? void 0 : _lines$$content.match(/^ +/));
      var whitespaceLength = match && ((_match$ = match[0]) == null ? void 0 : _match$.length) || 0;

      if (whitespaceLength < commonWhitespaceLength) {
        commonWhitespaceLength = whitespaceLength;
      }
    });

    var getText = function getText(content, key) {
      if (key === 1) {
        return content.replace(/\| $/, ' ');
      } else if (key === 2 && commonWhitespaceLength < Infinity) {
        return content.substr(commonWhitespaceLength);
      } else {
        return content;
      }
    };

    return React.createElement(_View.default, {
      style: {
        flexDirection: 'column'
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 80,
        columnNumber: 5
      }
    }, parsedLines.map(function (items, i) {
      return React.createElement(_View.default, {
        style: {
          flexDirection: 'row'
        },
        key: i,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 82,
          columnNumber: 9
        }
      }, items.map(function (bundle, key) {
        var textStyle = bundle.fg && COLORS[bundle.fg] ? {
          backgroundColor: bundle.bg && COLORS[bundle.bg],
          color: bundle.fg && COLORS[bundle.fg]
        } : {
          backgroundColor: bundle.bg && COLORS[bundle.bg]
        };
        return React.createElement(_Text.default, {
          style: [style, textStyle],
          key: key,
          __self: _this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 94,
            columnNumber: 15
          }
        }, getText(bundle.content, key));
      }));
    }));
  }
},478,[7,191,178,1,479],"node_modules/react-native/Libraries/LogBox/UI/AnsiHighlight.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ANSI_COLORS = [[{
    color: "0, 0, 0",
    "class": "ansi-black"
  }, {
    color: "187, 0, 0",
    "class": "ansi-red"
  }, {
    color: "0, 187, 0",
    "class": "ansi-green"
  }, {
    color: "187, 187, 0",
    "class": "ansi-yellow"
  }, {
    color: "0, 0, 187",
    "class": "ansi-blue"
  }, {
    color: "187, 0, 187",
    "class": "ansi-magenta"
  }, {
    color: "0, 187, 187",
    "class": "ansi-cyan"
  }, {
    color: "255,255,255",
    "class": "ansi-white"
  }], [{
    color: "85, 85, 85",
    "class": "ansi-bright-black"
  }, {
    color: "255, 85, 85",
    "class": "ansi-bright-red"
  }, {
    color: "0, 255, 0",
    "class": "ansi-bright-green"
  }, {
    color: "255, 255, 85",
    "class": "ansi-bright-yellow"
  }, {
    color: "85, 85, 255",
    "class": "ansi-bright-blue"
  }, {
    color: "255, 85, 255",
    "class": "ansi-bright-magenta"
  }, {
    color: "85, 255, 255",
    "class": "ansi-bright-cyan"
  }, {
    color: "255, 255, 255",
    "class": "ansi-bright-white"
  }]];

  var Anser = function () {
    _createClass(Anser, null, [{
      key: "escapeForHtml",
      value: function escapeForHtml(txt) {
        return new Anser().escapeForHtml(txt);
      }
    }, {
      key: "linkify",
      value: function linkify(txt) {
        return new Anser().linkify(txt);
      }
    }, {
      key: "ansiToHtml",
      value: function ansiToHtml(txt, options) {
        return new Anser().ansiToHtml(txt, options);
      }
    }, {
      key: "ansiToJson",
      value: function ansiToJson(txt, options) {
        return new Anser().ansiToJson(txt, options);
      }
    }, {
      key: "ansiToText",
      value: function ansiToText(txt) {
        return new Anser().ansiToText(txt);
      }
    }]);

    function Anser() {
      _classCallCheck(this, Anser);

      this.fg = this.bg = this.fg_truecolor = this.bg_truecolor = null;
      this.bright = 0;
    }

    _createClass(Anser, [{
      key: "setupPalette",
      value: function setupPalette() {
        this.PALETTE_COLORS = [];

        for (var i = 0; i < 2; ++i) {
          for (var j = 0; j < 8; ++j) {
            this.PALETTE_COLORS.push(ANSI_COLORS[i][j].color);
          }
        }

        var levels = [0, 95, 135, 175, 215, 255];

        var format = function format(r, g, b) {
          return levels[r] + ", " + levels[g] + ", " + levels[b];
        };

        var r = void 0,
            g = void 0,
            b = void 0;

        for (var _r = 0; _r < 6; ++_r) {
          for (var _g = 0; _g < 6; ++_g) {
            for (var _b = 0; _b < 6; ++_b) {
              this.PALETTE_COLORS.push(format(_r, _g, _b));
            }
          }
        }

        var level = 8;

        for (var _i = 0; _i < 24; ++_i, level += 10) {
          this.PALETTE_COLORS.push(format(level, level, level));
        }
      }
    }, {
      key: "escapeForHtml",
      value: function escapeForHtml(txt) {
        return txt.replace(/[&<>]/gm, function (str) {
          return str == "&" ? "&amp;" : str == "<" ? "&lt;" : str == ">" ? "&gt;" : "";
        });
      }
    }, {
      key: "linkify",
      value: function linkify(txt) {
        return txt.replace(/(https?:\/\/[^\s]+)/gm, function (str) {
          return "<a href=\"" + str + "\">" + str + "</a>";
        });
      }
    }, {
      key: "ansiToHtml",
      value: function ansiToHtml(txt, options) {
        return this.process(txt, options, true);
      }
    }, {
      key: "ansiToJson",
      value: function ansiToJson(txt, options) {
        options = options || {};
        options.json = true;
        options.clearLine = false;
        return this.process(txt, options, true);
      }
    }, {
      key: "ansiToText",
      value: function ansiToText(txt) {
        return this.process(txt, {}, false);
      }
    }, {
      key: "process",
      value: function process(txt, options, markup) {
        var _this = this;

        var self = this;
        var raw_text_chunks = txt.split(/\033\[/);
        var first_chunk = raw_text_chunks.shift();

        if (options === undefined || options === null) {
          options = {};
        }

        options.clearLine = /\r/.test(txt);
        var color_chunks = raw_text_chunks.map(function (chunk) {
          return _this.processChunk(chunk, options, markup);
        });

        if (options && options.json) {
          var first = self.processChunkJson("");
          first.content = first_chunk;
          first.clearLine = options.clearLine;
          color_chunks.unshift(first);

          if (options.remove_empty) {
            color_chunks = color_chunks.filter(function (c) {
              return !c.isEmpty();
            });
          }

          return color_chunks;
        } else {
          color_chunks.unshift(first_chunk);
        }

        return color_chunks.join("");
      }
    }, {
      key: "processChunkJson",
      value: function processChunkJson(text, options, markup) {
        options = typeof options == "undefined" ? {} : options;
        var use_classes = options.use_classes = typeof options.use_classes != "undefined" && options.use_classes;
        var key = options.key = use_classes ? "class" : "color";
        var result = {
          content: text,
          fg: null,
          bg: null,
          fg_truecolor: null,
          bg_truecolor: null,
          clearLine: options.clearLine,
          decoration: null,
          was_processed: false,
          isEmpty: function isEmpty() {
            return !result.content;
          }
        };
        var matches = text.match(/^([!\x3c-\x3f]*)([\d;]*)([\x20-\x2c]*[\x40-\x7e])([\s\S]*)/m);
        if (!matches) return result;
        var orig_txt = result.content = matches[4];
        var nums = matches[2].split(";");

        if (matches[1] !== "" || matches[3] !== "m") {
          return result;
        }

        if (!markup) {
          return result;
        }

        var self = this;
        self.decoration = null;

        while (nums.length > 0) {
          var num_str = nums.shift();
          var num = parseInt(num_str);

          if (isNaN(num) || num === 0) {
            self.fg = self.bg = self.decoration = null;
          } else if (num === 1) {
            self.decoration = "bold";
          } else if (num === 2) {
            self.decoration = "dim";
          } else if (num == 3) {
            self.decoration = "italic";
          } else if (num == 4) {
            self.decoration = "underline";
          } else if (num == 5) {
            self.decoration = "blink";
          } else if (num === 7) {
            self.decoration = "reverse";
          } else if (num === 8) {
            self.decoration = "hidden";
          } else if (num === 9) {
            self.decoration = "strikethrough";
          } else if (num == 39) {
            self.fg = null;
          } else if (num == 49) {
            self.bg = null;
          } else if (num >= 30 && num < 38) {
            self.fg = ANSI_COLORS[0][num % 10][key];
          } else if (num >= 90 && num < 98) {
            self.fg = ANSI_COLORS[1][num % 10][key];
          } else if (num >= 40 && num < 48) {
            self.bg = ANSI_COLORS[0][num % 10][key];
          } else if (num >= 100 && num < 108) {
            self.bg = ANSI_COLORS[1][num % 10][key];
          } else if (num === 38 || num === 48) {
            var is_foreground = num === 38;

            if (nums.length >= 1) {
              var mode = nums.shift();

              if (mode === "5" && nums.length >= 1) {
                var palette_index = parseInt(nums.shift());

                if (palette_index >= 0 && palette_index <= 255) {
                  if (!use_classes) {
                    if (!this.PALETTE_COLORS) {
                      self.setupPalette();
                    }

                    if (is_foreground) {
                      self.fg = this.PALETTE_COLORS[palette_index];
                    } else {
                      self.bg = this.PALETTE_COLORS[palette_index];
                    }
                  } else {
                    var klass = palette_index >= 16 ? "ansi-palette-" + palette_index : ANSI_COLORS[palette_index > 7 ? 1 : 0][palette_index % 8]["class"];

                    if (is_foreground) {
                      self.fg = klass;
                    } else {
                      self.bg = klass;
                    }
                  }
                }
              } else if (mode === "2" && nums.length >= 3) {
                var r = parseInt(nums.shift());
                var g = parseInt(nums.shift());
                var b = parseInt(nums.shift());

                if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {
                  var color = r + ", " + g + ", " + b;

                  if (!use_classes) {
                    if (is_foreground) {
                      self.fg = color;
                    } else {
                      self.bg = color;
                    }
                  } else {
                    if (is_foreground) {
                      self.fg = "ansi-truecolor";
                      self.fg_truecolor = color;
                    } else {
                      self.bg = "ansi-truecolor";
                      self.bg_truecolor = color;
                    }
                  }
                }
              }
            }
          }
        }

        if (self.fg === null && self.bg === null && self.decoration === null) {
          return result;
        } else {
          var styles = [];
          var classes = [];
          var data = {};
          result.fg = self.fg;
          result.bg = self.bg;
          result.fg_truecolor = self.fg_truecolor;
          result.bg_truecolor = self.bg_truecolor;
          result.decoration = self.decoration;
          result.was_processed = true;
          return result;
        }
      }
    }, {
      key: "processChunk",
      value: function processChunk(text, options, markup) {
        var _this2 = this;

        var self = this;
        options = options || {};
        var jsonChunk = this.processChunkJson(text, options, markup);

        if (options.json) {
          return jsonChunk;
        }

        if (jsonChunk.isEmpty()) {
          return "";
        }

        if (!jsonChunk.was_processed) {
          return jsonChunk.content;
        }

        var use_classes = options.use_classes;
        var styles = [];
        var classes = [];
        var data = {};

        var render_data = function render_data(data) {
          var fragments = [];
          var key = void 0;

          for (key in data) {
            if (data.hasOwnProperty(key)) {
              fragments.push("data-" + key + "=\"" + _this2.escapeForHtml(data[key]) + "\"");
            }
          }

          return fragments.length > 0 ? " " + fragments.join(" ") : "";
        };

        if (jsonChunk.fg) {
          if (use_classes) {
            classes.push(jsonChunk.fg + "-fg");

            if (jsonChunk.fg_truecolor !== null) {
              data["ansi-truecolor-fg"] = jsonChunk.fg_truecolor;
              jsonChunk.fg_truecolor = null;
            }
          } else {
            styles.push("color:rgb(" + jsonChunk.fg + ")");
          }
        }

        if (jsonChunk.bg) {
          if (use_classes) {
            classes.push(jsonChunk.bg + "-bg");

            if (jsonChunk.bg_truecolor !== null) {
              data["ansi-truecolor-bg"] = jsonChunk.bg_truecolor;
              jsonChunk.bg_truecolor = null;
            }
          } else {
            styles.push("background-color:rgb(" + jsonChunk.bg + ")");
          }
        }

        if (jsonChunk.decoration) {
          if (use_classes) {
            classes.push("ansi-" + jsonChunk.decoration);
          } else if (jsonChunk.decoration === "bold") {
            styles.push("font-weight:bold");
          } else if (jsonChunk.decoration === "dim") {
            styles.push("opacity:0.5");
          } else if (jsonChunk.decoration === "italic") {
            styles.push("font-style:italic");
          } else if (jsonChunk.decoration === "reverse") {
            styles.push("filter:invert(100%)");
          } else if (jsonChunk.decoration === "hidden") {
            styles.push("visibility:hidden");
          } else if (jsonChunk.decoration === "strikethrough") {
            styles.push("text-decoration:line-through");
          } else {
            styles.push("text-decoration:" + jsonChunk.decoration);
          }
        }

        if (use_classes) {
          return "<span class=\"" + classes.join(" ") + "\"" + render_data(data) + ">" + jsonChunk.content + "</span>";
        } else {
          return "<span style=\"" + styles.join(";") + "\"" + render_data(data) + ">" + jsonChunk.content + "</span>";
        }
      }
    }]);

    return Anser;
  }();

  ;
  module.exports = Anser;
},479,[],"node_modules/anser/lib/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Components/View/View"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5], "./LogBoxStyle"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSection.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorSection(props) {
    return React.createElement(_View.default, {
      style: styles.section,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 27,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: styles.heading,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 28,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: styles.headingText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 29,
        columnNumber: 9
      }
    }, props.heading), props.action), React.createElement(_View.default, {
      style: styles.body,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 32,
        columnNumber: 7
      }
    }, props.children));
  }

  var styles = _StyleSheet.default.create({
    section: {
      marginTop: 15
    },
    heading: {
      alignItems: 'center',
      flexDirection: 'row',
      paddingHorizontal: 12,
      marginBottom: 10
    },
    headingText: {
      color: LogBoxStyle.getTextColor(1),
      flex: 1,
      fontSize: 18,
      fontWeight: '600',
      includeFontPadding: false,
      lineHeight: 20
    },
    body: {
      paddingBottom: 10
    }
  });

  var _default = LogBoxInspectorSection;
  exports.default = _default;
},480,[1,7,183,191,178,468],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSection.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _DeviceInfo = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/DeviceInfo"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Components/View/View"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "./LogBoxStyle"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorFooter.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorFooter(props) {
    if (props.level === 'syntax') {
      return React.createElement(_View.default, {
        style: styles.root,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 32,
          columnNumber: 7
        }
      }, React.createElement(_View.default, {
        style: styles.button,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 33,
          columnNumber: 9
        }
      }, React.createElement(_Text.default, {
        style: styles.syntaxErrorText,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34,
          columnNumber: 11
        }
      }, "This error cannot be dismissed.")));
    }

    return React.createElement(_View.default, {
      style: styles.root,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 43,
        columnNumber: 5
      }
    }, React.createElement(FooterButton, {
      text: "Dismiss",
      onPress: props.onDismiss,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 44,
        columnNumber: 7
      }
    }), React.createElement(FooterButton, {
      text: "Minimize",
      onPress: props.onMinimize,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 45,
        columnNumber: 7
      }
    }));
  }

  function FooterButton(props) {
    return React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: LogBoxStyle.getBackgroundDarkColor()
      },
      onPress: props.onPress,
      style: buttonStyles.safeArea,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 57,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: buttonStyles.content,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 64,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: buttonStyles.label,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 65,
        columnNumber: 9
      }
    }, props.text)));
  }

  var buttonStyles = _StyleSheet.default.create({
    safeArea: {
      flex: 1,
      paddingBottom: _DeviceInfo.default.getConstants().isIPhoneX_deprecated ? 30 : 0
    },
    content: {
      alignItems: 'center',
      height: 48,
      justifyContent: 'center'
    },
    label: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      includeFontPadding: false,
      lineHeight: 20
    }
  });

  var styles = _StyleSheet.default.create({
    root: {
      backgroundColor: LogBoxStyle.getBackgroundColor(1),
      shadowColor: '#000',
      shadowOffset: {
        width: 0,
        height: -2
      },
      shadowRadius: 2,
      shadowOpacity: 0.5,
      flexDirection: 'row'
    },
    button: {
      flex: 1
    },
    syntaxErrorText: {
      textAlign: 'center',
      width: '100%',
      height: 48,
      fontSize: 14,
      lineHeight: 20,
      paddingTop: 20,
      paddingBottom: 50,
      fontStyle: 'italic',
      color: LogBoxStyle.getTextColor(0.6)
    }
  });

  var _default = LogBoxInspectorFooter;
  exports.default = _default;
},481,[1,7,355,183,191,178,467,468],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorFooter.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Components/View/View"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[5], "./LogBoxStyle"));

  var _LogBoxMessage = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./LogBoxMessage"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorMessageHeader.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var SHOW_MORE_MESSAGE_LENGTH = 300;

  function LogBoxInspectorMessageHeader(props) {
    function renderShowMore() {
      if (props.message.content.length < SHOW_MORE_MESSAGE_LENGTH || !props.collapsed) {
        return null;
      }

      return React.createElement(_Text.default, {
        style: messageStyles.collapse,
        onPress: function onPress() {
          return props.onPress();
        },
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41,
          columnNumber: 7
        }
      }, "... See More");
    }

    return React.createElement(_View.default, {
      style: messageStyles.body,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 48,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: messageStyles.heading,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 49,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: [messageStyles.headingText, messageStyles[props.level]],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 50,
        columnNumber: 9
      }
    }, props.title)), React.createElement(_Text.default, {
      style: messageStyles.bodyText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 54,
        columnNumber: 7
      }
    }, React.createElement(_LogBoxMessage.default, {
      maxLength: props.collapsed ? SHOW_MORE_MESSAGE_LENGTH : Infinity,
      message: props.message,
      style: messageStyles.messageText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 55,
        columnNumber: 9
      }
    }), renderShowMore()));
  }

  var messageStyles = _StyleSheet.default.create({
    body: {
      backgroundColor: LogBoxStyle.getBackgroundColor(1),
      shadowColor: '#000',
      shadowOffset: {
        width: 0,
        height: 2
      },
      shadowRadius: 2,
      shadowOpacity: 0.5,
      flex: 0
    },
    bodyText: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      includeFontPadding: false,
      lineHeight: 20,
      fontWeight: '500',
      paddingHorizontal: 12,
      paddingBottom: 10
    },
    heading: {
      alignItems: 'center',
      flexDirection: 'row',
      paddingHorizontal: 12,
      marginTop: 10,
      marginBottom: 5
    },
    headingText: {
      flex: 1,
      fontSize: 20,
      fontWeight: '600',
      includeFontPadding: false,
      lineHeight: 28
    },
    warn: {
      color: LogBoxStyle.getWarningColor(1)
    },
    error: {
      color: LogBoxStyle.getErrorColor(1)
    },
    fatal: {
      color: LogBoxStyle.getFatalColor(1)
    },
    syntax: {
      color: LogBoxStyle.getFatalColor(1)
    },
    messageText: {
      color: LogBoxStyle.getTextColor(0.6)
    },
    collapse: {
      color: LogBoxStyle.getTextColor(0.7),
      fontSize: 14,
      fontWeight: '300',
      lineHeight: 12
    },
    button: {
      paddingVertical: 5,
      paddingHorizontal: 10,
      borderRadius: 3
    }
  });

  var _default = LogBoxInspectorMessageHeader;
  exports.default = _default;
},482,[1,7,183,191,178,468,469],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorMessageHeader.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/StyleSheet"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Utilities/Platform"));

  var _Text = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Components/View/View"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8], "./LogBoxStyle"));

  var _LogBoxInspectorSection = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./LogBoxInspectorSection"));

  var _openFileInEditor = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[10], "../../Core/Devtools/openFileInEditor"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorReactFrames.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var BEFORE_SLASH_RE = /^(.*)[\\/]/;

  function getPrettyFileName(path) {
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    if (/^index\./.test(fileName)) {
      var match = path.match(BEFORE_SLASH_RE);

      if (match) {
        var pathBeforeSlash = match[1];

        if (pathBeforeSlash) {
          var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
          fileName = folderName + '/​' + fileName;
        }
      }
    }

    return fileName;
  }

  function LogBoxInspectorReactFrames(props) {
    var _this = this;

    var _React$useState = React.useState(true),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        collapsed = _React$useState2[0],
        setCollapsed = _React$useState2[1];

    if (props.log.componentStack == null || props.log.componentStack.length < 1) {
      return null;
    }

    function getStackList() {
      if (collapsed) {
        return props.log.componentStack.slice(0, 3);
      } else {
        return props.log.componentStack;
      }
    }

    function getCollapseMessage() {
      if (props.log.componentStack.length <= 3) {
        return;
      }

      var count = props.log.componentStack.length - 3;

      if (collapsed) {
        return "See " + count + " more components";
      } else {
        return "Collapse " + count + " components";
      }
    }

    return React.createElement(_LogBoxInspectorSection.default, {
      heading: "Component Stack",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 80,
        columnNumber: 5
      }
    }, getStackList().map(function (frame, index) {
      return React.createElement(_View.default, {
        key: index,
        style: componentStyles.frameContainer,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 82,
          columnNumber: 9
        }
      }, React.createElement(_LogBoxButton.default, {
        backgroundColor: {
          default: 'transparent',
          pressed: LogBoxStyle.getBackgroundColor(1)
        },
        onPress: frame.fileName.startsWith('/') ? function () {
          var _frame$location$row, _frame$location;

          return (0, _openFileInEditor.default)(frame.fileName, (_frame$location$row = (_frame$location = frame.location) == null ? void 0 : _frame$location.row) != null ? _frame$location$row : 1);
        } : null,
        style: componentStyles.frame,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 86,
          columnNumber: 11
        }
      }, React.createElement(_View.default, {
        style: componentStyles.component,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 101,
          columnNumber: 13
        }
      }, React.createElement(_Text.default, {
        style: componentStyles.frameName,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 102,
          columnNumber: 15
        }
      }, React.createElement(_Text.default, {
        style: componentStyles.bracket,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 103,
          columnNumber: 17
        }
      }, '<'), frame.content, React.createElement(_Text.default, {
        style: componentStyles.bracket,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 105,
          columnNumber: 17
        }
      }, ' />'))), React.createElement(_Text.default, {
        style: componentStyles.frameLocation,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 108,
          columnNumber: 13
        }
      }, getPrettyFileName(frame.fileName), frame.location ? ":" + frame.location.row : '')));
    }), React.createElement(_View.default, {
      style: componentStyles.collapseContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 115,
        columnNumber: 7
      }
    }, React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: LogBoxStyle.getBackgroundColor(1)
      },
      onPress: function onPress() {
        return setCollapsed(!collapsed);
      },
      style: componentStyles.collapseButton,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 116,
        columnNumber: 9
      }
    }, React.createElement(_Text.default, {
      style: componentStyles.collapse,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 123,
        columnNumber: 11
      }
    }, getCollapseMessage()))));
  }

  var componentStyles = _StyleSheet.default.create({
    collapseContainer: {
      marginLeft: 15,
      flexDirection: 'row'
    },
    collapseButton: {
      borderRadius: 5
    },
    collapse: {
      color: LogBoxStyle.getTextColor(0.7),
      fontSize: 12,
      fontWeight: '300',
      lineHeight: 20,
      marginTop: 0,
      paddingVertical: 5,
      paddingHorizontal: 10
    },
    frameContainer: {
      flexDirection: 'row',
      paddingHorizontal: 15
    },
    frame: {
      flex: 1,
      paddingVertical: 4,
      paddingHorizontal: 10,
      borderRadius: 5
    },
    component: {
      flexDirection: 'row',
      paddingRight: 10
    },
    frameName: {
      fontFamily: _Platform.default.select({
        android: 'monospace',
        ios: 'Menlo'
      }),
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      includeFontPadding: false,
      lineHeight: 18
    },
    bracket: {
      fontFamily: _Platform.default.select({
        android: 'monospace',
        ios: 'Menlo'
      }),
      color: LogBoxStyle.getTextColor(0.4),
      fontSize: 14,
      fontWeight: '500',
      includeFontPadding: false,
      lineHeight: 18
    },
    frameLocation: {
      color: LogBoxStyle.getTextColor(0.7),
      fontSize: 12,
      fontWeight: '300',
      includeFontPadding: false,
      lineHeight: 16,
      paddingLeft: 10
    }
  });

  var _default = LogBoxInspectorReactFrames;
  exports.default = _default;
},483,[7,31,1,183,65,191,178,467,468,480,457],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorReactFrames.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getCollapseMessage = getCollapseMessage;
  exports.default = void 0;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Components/View/View"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./LogBoxButton"));

  var _LogBoxInspectorSourceMapStatus = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "./LogBoxInspectorSourceMapStatus"));

  var _LogBoxInspectorStackFrame = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "./LogBoxInspectorStackFrame"));

  var _LogBoxInspectorSection = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[9], "./LogBoxInspectorSection"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10], "./LogBoxStyle"));

  var _openFileInEditor = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[11], "../../Core/Devtools/openFileInEditor"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrames.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function getCollapseMessage(stackFrames, collapsed) {
    if (stackFrames.length === 0) {
      return 'No frames to show';
    }

    var collapsedCount = stackFrames.reduce(function (count, _ref) {
      var collapse = _ref.collapse;

      if (collapse === true) {
        return count + 1;
      }

      return count;
    }, 0);

    if (collapsedCount === 0) {
      return 'Showing all frames';
    }

    var framePlural = "frame" + (collapsedCount > 1 ? 's' : '');

    if (collapsedCount === stackFrames.length) {
      return collapsed ? "See" + (collapsedCount > 1 ? ' all ' : ' ') + collapsedCount + " collapsed " + framePlural : "Collapse" + (collapsedCount > 1 ? ' all ' : ' ') + collapsedCount + " " + framePlural;
    } else {
      return collapsed ? "See " + collapsedCount + " more " + framePlural : "Collapse " + collapsedCount + " " + framePlural;
    }
  }

  function LogBoxInspectorStackFrames(props) {
    var _React$useState = React.useState(true),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        collapsed = _React$useState2[0],
        setCollapsed = _React$useState2[1];

    function getStackList() {
      if (collapsed === true) {
        return props.log.getAvailableStack().filter(function (_ref2) {
          var collapse = _ref2.collapse;
          return !collapse;
        });
      } else {
        return props.log.getAvailableStack();
      }
    }

    if (props.log.getAvailableStack().length === 0) {
      return null;
    }

    return React.createElement(_LogBoxInspectorSection.default, {
      heading: "Call Stack",
      action: React.createElement(_LogBoxInspectorSourceMapStatus.default, {
        onPress: props.log.symbolicated.status === 'FAILED' ? props.onRetry : null,
        status: props.log.symbolicated.status,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 86,
          columnNumber: 9
        }
      }),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 83,
        columnNumber: 5
      }
    }, props.log.symbolicated.status !== 'COMPLETE' && React.createElement(_View.default, {
      style: stackStyles.hintBox,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 94,
        columnNumber: 9
      }
    }, React.createElement(_Text.default, {
      style: stackStyles.hintText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 95,
        columnNumber: 11
      }
    }, "This call stack is not symbolicated. Some features are unavailable such as viewing the function name or tapping to open files.")), React.createElement(StackFrameList, {
      list: getStackList(),
      status: props.log.symbolicated.status,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 101,
        columnNumber: 7
      }
    }), React.createElement(StackFrameFooter, {
      onPress: function onPress() {
        return setCollapsed(!collapsed);
      },
      message: getCollapseMessage(props.log.getAvailableStack(), collapsed),
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 105,
        columnNumber: 7
      }
    }));
  }

  function StackFrameList(props) {
    var _this = this;

    return React.createElement(React.Fragment, null, props.list.map(function (frame, index) {
      var file = frame.file,
          lineNumber = frame.lineNumber;
      return React.createElement(_LogBoxInspectorStackFrame.default, {
        key: index,
        frame: frame,
        onPress: props.status === 'COMPLETE' && file != null && lineNumber != null ? function () {
          return (0, _openFileInEditor.default)(file, lineNumber);
        } : null,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 119,
          columnNumber: 11
        }
      });
    }));
  }

  function StackFrameFooter(props) {
    return React.createElement(_View.default, {
      style: stackStyles.collapseContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 136,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: LogBoxStyle.getBackgroundColor(1)
      },
      onPress: props.onPress,
      style: stackStyles.collapseButton,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 137,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: stackStyles.collapse,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 144,
        columnNumber: 9
      }
    }, props.message)));
  }

  var stackStyles = _StyleSheet.default.create({
    section: {
      marginTop: 15
    },
    heading: {
      alignItems: 'center',
      flexDirection: 'row',
      paddingHorizontal: 12,
      marginBottom: 10
    },
    headingText: {
      color: LogBoxStyle.getTextColor(1),
      flex: 1,
      fontSize: 20,
      fontWeight: '600',
      includeFontPadding: false,
      lineHeight: 20
    },
    body: {
      paddingBottom: 10
    },
    bodyText: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      includeFontPadding: false,
      lineHeight: 18,
      fontWeight: '500',
      paddingHorizontal: 27
    },
    hintText: {
      color: LogBoxStyle.getTextColor(0.7),
      fontSize: 13,
      includeFontPadding: false,
      lineHeight: 18,
      fontWeight: '400',
      marginHorizontal: 10
    },
    hintBox: {
      backgroundColor: LogBoxStyle.getBackgroundColor(),
      marginHorizontal: 10,
      paddingHorizontal: 5,
      paddingVertical: 10,
      borderRadius: 5,
      marginBottom: 5
    },
    collapseContainer: {
      marginLeft: 15,
      flexDirection: 'row'
    },
    collapseButton: {
      borderRadius: 5
    },
    collapse: {
      color: LogBoxStyle.getTextColor(0.7),
      fontSize: 12,
      fontWeight: '300',
      lineHeight: 20,
      marginTop: 0,
      paddingHorizontal: 10,
      paddingVertical: 5
    }
  });

  var _default = LogBoxInspectorStackFrames;
  exports.default = _default;
},484,[7,31,1,183,191,178,467,485,488,480,468,457],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrames.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/slicedToArray"));

  var _Animated = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Animated/Animated"));

  var _Easing = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../Animated/Easing"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Text/Text"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[8], "./LogBoxStyle"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSourceMapStatus.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorSourceMapStatus(props) {
    var _React$useState = React.useState({
      animation: null,
      rotate: null
    }),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
        state = _React$useState2[0],
        setState = _React$useState2[1];

    React.useEffect(function () {
      if (props.status === 'PENDING') {
        if (state.animation == null) {
          var animated = new _Animated.default.Value(0);

          var animation = _Animated.default.loop(_Animated.default.timing(animated, {
            duration: 2000,
            easing: _Easing.default.linear,
            toValue: 1,
            useNativeDriver: true
          }));

          setState({
            animation: animation,
            rotate: animated.interpolate({
              inputRange: [0, 1],
              outputRange: ['0deg', '360deg']
            })
          });
          animation.start();
        }
      } else {
        if (state.animation != null) {
          state.animation.stop();
          setState({
            animation: null,
            rotate: null
          });
        }
      }

      return function () {
        if (state.animation != null) {
          state.animation.stop();
        }
      };
    }, [props.status, state.animation]);
    var image;
    var color;

    switch (props.status) {
      case 'FAILED':
        image = _$$_REQUIRE(_dependencyMap[9], "./LogBoxImages/alert-triangle.png");
        color = LogBoxStyle.getErrorColor(1);
        break;

      case 'PENDING':
        image = _$$_REQUIRE(_dependencyMap[10], "./LogBoxImages/loader.png");
        color = LogBoxStyle.getWarningColor(1);
        break;
    }

    if (props.status === 'COMPLETE' || image == null) {
      return null;
    }

    return React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: LogBoxStyle.getBackgroundColor(1)
      },
      hitSlop: {
        bottom: 8,
        left: 8,
        right: 8,
        top: 8
      },
      onPress: props.onPress,
      style: styles.root,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 93,
        columnNumber: 5
      }
    }, React.createElement(_Animated.default.Image, {
      source: image,
      style: [styles.image, {
        tintColor: color
      }, state.rotate == null || props.status !== 'PENDING' ? null : {
        transform: [{
          rotate: state.rotate
        }]
      }],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 101,
        columnNumber: 7
      }
    }), React.createElement(_Text.default, {
      style: [styles.text, {
        color: color
      }],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 111,
        columnNumber: 7
      }
    }, "Source Map"));
  }

  var styles = _StyleSheet.default.create({
    root: {
      alignItems: 'center',
      borderRadius: 12,
      flexDirection: 'row',
      height: 24,
      paddingHorizontal: 8
    },
    image: {
      height: 14,
      width: 16,
      marginEnd: 4,
      tintColor: LogBoxStyle.getTextColor(0.4)
    },
    text: {
      fontSize: 12,
      includeFontPadding: false,
      lineHeight: 16
    }
  });

  var _default = LogBoxInspectorSourceMapStatus;
  exports.default = _default;
},485,[7,31,318,238,1,183,191,467,468,486,487],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorSourceMapStatus.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
    "width": 48,
    "height": 42,
    "scales": [1],
    "hash": "ae0fcc2b007ded72c6f985671da3338e",
    "name": "alert-triangle",
    "type": "png"
  });
},486,[471],"node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/alert-triangle.png");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
    "width": 44,
    "height": 44,
    "scales": [1],
    "hash": "46d1173c53d96832e868151c1648ea42",
    "name": "loader",
    "type": "png"
  });
},487,[471],"node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/loader.png");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../Components/View/View"));

  var _Platform = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Utilities/Platform"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], "./LogBoxStyle"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrame.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorStackFrame(props) {
    var frame = props.frame,
        onPress = props.onPress;
    var column = frame.column != null && parseInt(frame.column, 10);
    var location = getFileName(frame.file) + (frame.lineNumber != null ? ':' + frame.lineNumber + (column && !isNaN(column) ? ':' + (column + 1) : '') : '');
    return React.createElement(_View.default, {
      style: styles.frameContainer,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 40,
        columnNumber: 5
      }
    }, React.createElement(_LogBoxButton.default, {
      backgroundColor: {
        default: 'transparent',
        pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : 'transparent'
      },
      onPress: onPress,
      style: styles.frame,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 41,
        columnNumber: 7
      }
    }, React.createElement(_Text.default, {
      style: [styles.name, frame.collapse === true && styles.dim],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 48,
        columnNumber: 9
      }
    }, frame.methodName), React.createElement(_Text.default, {
      ellipsizeMode: "middle",
      numberOfLines: 1,
      style: [styles.location, frame.collapse === true && styles.dim],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 51,
        columnNumber: 9
      }
    }, location)));
  }

  function getFileName(file) {
    if (file == null) {
      return '<unknown>';
    }

    var queryIndex = file.indexOf('?');
    return file.substring(file.lastIndexOf('/') + 1, queryIndex === -1 ? file.length : queryIndex);
  }

  var styles = _StyleSheet.default.create({
    frameContainer: {
      flexDirection: 'row',
      paddingHorizontal: 15
    },
    frame: {
      flex: 1,
      paddingVertical: 4,
      paddingHorizontal: 10,
      borderRadius: 5
    },
    lineLocation: {
      flexDirection: 'row'
    },
    name: {
      color: LogBoxStyle.getTextColor(1),
      fontSize: 14,
      includeFontPadding: false,
      lineHeight: 18,
      fontWeight: '400',
      fontFamily: _Platform.default.select({
        android: 'monospace',
        ios: 'Menlo'
      })
    },
    location: {
      color: LogBoxStyle.getTextColor(0.8),
      fontSize: 12,
      fontWeight: '300',
      includeFontPadding: false,
      lineHeight: 16,
      paddingLeft: 10
    },
    dim: {
      color: LogBoxStyle.getTextColor(0.4),
      fontWeight: '300'
    },
    line: {
      color: LogBoxStyle.getTextColor(0.8),
      fontSize: 12,
      fontWeight: '300',
      includeFontPadding: false,
      lineHeight: 16
    }
  });

  var _default = LogBoxInspectorStackFrame;
  exports.default = _default;
},488,[1,7,183,191,178,65,467,468],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorStackFrame.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _Image = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "../../Image/Image"));

  var _Platform = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "../../Utilities/Platform"));

  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], "react"));

  var _StyleSheet = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "../../StyleSheet/StyleSheet"));

  var _Text = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "../../Text/Text"));

  var _View = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "../../Components/View/View"));

  var _StatusBar = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[7], "../../Components/StatusBar/StatusBar"));

  var _LogBoxButton = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[8], "./LogBoxButton"));

  var LogBoxStyle = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[9], "./LogBoxStyle"));

  var _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorHeader.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function LogBoxInspectorHeader(props) {
    if (props.level === 'syntax') {
      return React.createElement(_View.default, {
        style: [styles.safeArea, styles[props.level]],
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 33,
          columnNumber: 7
        }
      }, React.createElement(_View.default, {
        style: styles.header,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 34,
          columnNumber: 9
        }
      }, React.createElement(_View.default, {
        style: styles.title,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 35,
          columnNumber: 11
        }
      }, React.createElement(_Text.default, {
        style: styles.titleText,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 36,
          columnNumber: 13
        }
      }, "Failed to compile"))));
    }

    var prevIndex = props.selectedIndex - 1 < 0 ? props.total - 1 : props.selectedIndex - 1;
    var nextIndex = props.selectedIndex + 1 > props.total - 1 ? 0 : props.selectedIndex + 1;
    var titleText = "Log " + (props.selectedIndex + 1) + " of " + props.total;
    return React.createElement(_View.default, {
      style: [styles.safeArea, styles[props.level]],
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 51,
        columnNumber: 5
      }
    }, React.createElement(_View.default, {
      style: styles.header,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 52,
        columnNumber: 7
      }
    }, React.createElement(LogBoxInspectorHeaderButton, {
      disabled: props.total <= 1,
      level: props.level,
      image: _$$_REQUIRE(_dependencyMap[10], "./LogBoxImages/chevron-left.png"),
      onPress: function onPress() {
        return props.onSelectIndex(prevIndex);
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 53,
        columnNumber: 9
      }
    }), React.createElement(_View.default, {
      style: styles.title,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 59,
        columnNumber: 9
      }
    }, React.createElement(_Text.default, {
      style: styles.titleText,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 60,
        columnNumber: 11
      }
    }, titleText)), React.createElement(LogBoxInspectorHeaderButton, {
      disabled: props.total <= 1,
      level: props.level,
      image: _$$_REQUIRE(_dependencyMap[11], "./LogBoxImages/chevron-right.png"),
      onPress: function onPress() {
        return props.onSelectIndex(nextIndex);
      },
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 62,
        columnNumber: 9
      }
    })));
  }

  var backgroundForLevel = function backgroundForLevel(level) {
    return {
      warn: {
        default: 'transparent',
        pressed: LogBoxStyle.getWarningDarkColor()
      },
      error: {
        default: 'transparent',
        pressed: LogBoxStyle.getErrorDarkColor()
      },
      fatal: {
        default: 'transparent',
        pressed: LogBoxStyle.getFatalDarkColor()
      },
      syntax: {
        default: 'transparent',
        pressed: LogBoxStyle.getFatalDarkColor()
      }
    }[level];
  };

  function LogBoxInspectorHeaderButton(props) {
    return React.createElement(_LogBoxButton.default, {
      backgroundColor: backgroundForLevel(props.level),
      onPress: props.disabled ? null : props.onPress,
      style: headerStyles.button,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 102,
        columnNumber: 5
      }
    }, props.disabled ? null : React.createElement(_Image.default, {
      source: props.image,
      style: headerStyles.buttonImage,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 107,
        columnNumber: 9
      }
    }));
  }

  var headerStyles = _StyleSheet.default.create({
    button: {
      alignItems: 'center',
      aspectRatio: 1,
      justifyContent: 'center',
      marginTop: 5,
      marginRight: 6,
      marginLeft: 6,
      marginBottom: -8,
      borderRadius: 3
    },
    buttonImage: {
      height: 14,
      width: 8,
      tintColor: LogBoxStyle.getTextColor()
    }
  });

  var styles = _StyleSheet.default.create({
    syntax: {
      backgroundColor: LogBoxStyle.getFatalColor()
    },
    fatal: {
      backgroundColor: LogBoxStyle.getFatalColor()
    },
    warn: {
      backgroundColor: LogBoxStyle.getWarningColor()
    },
    error: {
      backgroundColor: LogBoxStyle.getErrorColor()
    },
    header: {
      flexDirection: 'row',
      height: _Platform.default.select({
        android: 48,
        ios: 44
      })
    },
    title: {
      alignItems: 'center',
      flex: 1,
      justifyContent: 'center'
    },
    titleText: {
      color: LogBoxStyle.getTextColor(),
      fontSize: 16,
      fontWeight: '600',
      includeFontPadding: false,
      lineHeight: 20
    },
    safeArea: {
      paddingTop: _Platform.default.OS === 'android' ? _StatusBar.default.currentHeight : 40
    }
  });

  var _default = LogBoxInspectorHeader;
  exports.default = _default;
},489,[7,272,65,1,183,191,178,207,467,468,490,491],"node_modules/react-native/Libraries/LogBox/UI/LogBoxInspectorHeader.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
    "width": 16,
    "height": 28,
    "scales": [1],
    "hash": "34d53ae6f3c2303163010aef6efe27ba",
    "name": "chevron-left",
    "type": "png"
  });
},490,[471],"node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/chevron-left.png");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native/Libraries/LogBox/UI/LogBoxImages",
    "width": 16,
    "height": 28,
    "scales": [1],
    "hash": "a610d434605f8a50094a4029a0ea5ff6",
    "name": "chevron-right",
    "type": "png"
  });
},491,[471],"node_modules/react-native/Libraries/LogBox/UI/LogBoxImages/chevron-right.png");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  /** @license React vundefined
   * use-subscription.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  'use strict';

  if (process.env.NODE_ENV !== "production") {
    (function () {
      'use strict';

      var _assign = _$$_REQUIRE(_dependencyMap[0], "object-assign");

      var react = _$$_REQUIRE(_dependencyMap[1], "react");

      function useSubscription(_ref) {
        var getCurrentValue = _ref.getCurrentValue,
            subscribe = _ref.subscribe;

        var _useState = react.useState(function () {
          return {
            getCurrentValue: getCurrentValue,
            subscribe: subscribe,
            value: getCurrentValue()
          };
        }),
            state = _useState[0],
            setState = _useState[1];

        var valueToReturn = state.value;

        if (state.getCurrentValue !== getCurrentValue || state.subscribe !== subscribe) {
          valueToReturn = getCurrentValue();
          setState({
            getCurrentValue: getCurrentValue,
            subscribe: subscribe,
            value: valueToReturn
          });
        }

        react.useDebugValue(valueToReturn);
        react.useEffect(function () {
          var didUnsubscribe = false;

          var checkForUpdates = function checkForUpdates() {
            if (didUnsubscribe) {
              return;
            }

            var value = getCurrentValue();
            setState(function (prevState) {
              if (prevState.getCurrentValue !== getCurrentValue || prevState.subscribe !== subscribe) {
                return prevState;
              }

              if (prevState.value === value) {
                return prevState;
              }

              return _assign({}, prevState, {
                value: value
              });
            });
          };

          var unsubscribe = subscribe(checkForUpdates);
          checkForUpdates();
          return function () {
            didUnsubscribe = true;
            unsubscribe();
          };
        }, [getCurrentValue, subscribe]);
        return valueToReturn;
      }

      exports.useSubscription = useSubscription;
    })();
  }
},492,[3,1],"node_modules/use-subscription/cjs/use-subscription.development.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _App = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./App"));

  var _default = _App.default;
  exports.default = _default;
},493,[7,494],"MultiBundleRnApp.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], "react"));

  var _reactNative = _$$_REQUIRE(_dependencyMap[1], "react-native");

  var _this = this,
      _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/App.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var Section = function Section(_ref) {
    var children = _ref.children,
        title = _ref.title;
    var isDarkMode = (0, _reactNative.useColorScheme)() === 'dark';
    return _react.default.createElement(_reactNative.View, {
      style: styles.sectionContainer,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 32,
        columnNumber: 5
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: [styles.sectionTitle, {
        color: isDarkMode ? _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").Colors.white : _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").Colors.black
      }],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 33,
        columnNumber: 7
      }
    }, title), _react.default.createElement(_reactNative.Text, {
      style: [styles.sectionDescription, {
        color: isDarkMode ? _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").Colors.light : _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").Colors.dark
      }],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 42,
        columnNumber: 7
      }
    }, children));
  };

  var App = function App() {
    (0, _react.useEffect)(function () {
      console.log('App.useEffect', Date.now());
    }, []);
    var isDarkMode = (0, _reactNative.useColorScheme)() === 'dark';
    var backgroundStyle = {
      backgroundColor: isDarkMode ? _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").Colors.darker : _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").Colors.lighter
    };
    return _react.default.createElement(_reactNative.SafeAreaView, {
      style: backgroundStyle,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 67,
        columnNumber: 5
      }
    }, _react.default.createElement(_reactNative.StatusBar, {
      barStyle: isDarkMode ? 'light-content' : 'dark-content',
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 68,
        columnNumber: 7
      }
    }), _react.default.createElement(_reactNative.ScrollView, {
      contentInsetAdjustmentBehavior: "automatic",
      style: backgroundStyle,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 69,
        columnNumber: 7
      }
    }, _react.default.createElement(_$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").Header, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 72,
        columnNumber: 9
      }
    }), _react.default.createElement(_reactNative.View, {
      style: {
        backgroundColor: isDarkMode ? _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").Colors.black : _$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").Colors.white
      },
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 73,
        columnNumber: 9
      }
    }, _react.default.createElement(Section, {
      title: "Step One",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 77,
        columnNumber: 11
      }
    }, "Edit ", _react.default.createElement(_reactNative.Text, {
      style: styles.highlight,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 78,
        columnNumber: 18
      }
    }, "App.js"), " to change this screen and then come back to see your edits."), _react.default.createElement(Section, {
      title: "See Your Changes",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 81,
        columnNumber: 11
      }
    }, _react.default.createElement(_$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").ReloadInstructions, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 82,
        columnNumber: 13
      }
    })), _react.default.createElement(Section, {
      title: "Debug",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 84,
        columnNumber: 11
      }
    }, _react.default.createElement(_$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").DebugInstructions, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 85,
        columnNumber: 13
      }
    })), _react.default.createElement(Section, {
      title: "Learn More",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 87,
        columnNumber: 11
      }
    }, "Read the docs to discover what to do next:"), _react.default.createElement(_$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/NewAppScreen").LearnMoreLinks, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 90,
        columnNumber: 11
      }
    }))));
  };

  var styles = _reactNative.StyleSheet.create({
    sectionContainer: {
      marginTop: 32,
      paddingHorizontal: 24
    },
    sectionTitle: {
      fontSize: 24,
      fontWeight: '600'
    },
    sectionDescription: {
      marginTop: 8,
      fontSize: 18,
      fontWeight: '400'
    },
    highlight: {
      fontWeight: '700'
    }
  });

  var _default = App;
  exports.default = _default;
},494,[1,5,495],"App.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Colors", {
    enumerable: true,
    get: function get() {
      return _Colors.default;
    }
  });
  Object.defineProperty(exports, "Header", {
    enumerable: true,
    get: function get() {
      return _Header.default;
    }
  });
  Object.defineProperty(exports, "HermesBadge", {
    enumerable: true,
    get: function get() {
      return _HermesBadge.default;
    }
  });
  Object.defineProperty(exports, "LearnMoreLinks", {
    enumerable: true,
    get: function get() {
      return _LearnMoreLinks.default;
    }
  });
  Object.defineProperty(exports, "DebugInstructions", {
    enumerable: true,
    get: function get() {
      return _DebugInstructions.default;
    }
  });
  Object.defineProperty(exports, "ReloadInstructions", {
    enumerable: true,
    get: function get() {
      return _ReloadInstructions.default;
    }
  });

  var _Colors = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./components/Colors"));

  var _Header = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "./components/Header"));

  var _HermesBadge = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "./components/HermesBadge"));

  var _LearnMoreLinks = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "./components/LearnMoreLinks"));

  var _DebugInstructions = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[5], "./components/DebugInstructions"));

  var _ReloadInstructions = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[6], "./components/ReloadInstructions"));
},495,[7,496,497,498,500,502,503],"node_modules/react-native/Libraries/NewAppScreen/index.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var _default = {
    primary: '#1292B4',
    white: '#FFF',
    lighter: '#F3F3F3',
    light: '#DAE1E7',
    dark: '#444',
    darker: '#222',
    black: '#000'
  };
  exports.default = _default;
},496,[],"node_modules/react-native/Libraries/NewAppScreen/components/Colors.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0], "react-native");

  var _react = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _Colors = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "./Colors"));

  var _HermesBadge = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[4], "./HermesBadge"));

  var _this = this,
      _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/NewAppScreen/components/Header.js";

  var Header = function Header() {
    var isDarkMode = (0, _reactNative.useColorScheme)() === 'dark';
    return _react.default.createElement(_reactNative.ImageBackground, {
      accessibilityRole: "image",
      source: _$$_REQUIRE(_dependencyMap[5], "./logo.png"),
      style: [styles.background, {
        backgroundColor: isDarkMode ? _Colors.default.darker : _Colors.default.lighter
      }],
      imageStyle: styles.logo,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 21,
        columnNumber: 5
      }
    }, _react.default.createElement(_HermesBadge.default, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 31,
        columnNumber: 7
      }
    }), _react.default.createElement(_reactNative.Text, {
      style: [styles.text, {
        color: isDarkMode ? _Colors.default.white : _Colors.default.black
      }],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 32,
        columnNumber: 7
      }
    }, "Welcome to", '\n', "React Native"));
  };

  var styles = _reactNative.StyleSheet.create({
    background: {
      paddingBottom: 40,
      paddingTop: 96,
      paddingHorizontal: 32
    },
    logo: {
      opacity: 0.2,
      overflow: 'visible',
      resizeMode: 'cover',
      marginLeft: -128,
      marginBottom: -192
    },
    text: {
      fontSize: 40,
      fontWeight: '700',
      textAlign: 'center'
    }
  });

  var _default = Header;
  exports.default = _default;
},497,[5,7,1,496,498,499],"node_modules/react-native/Libraries/NewAppScreen/components/Header.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _react = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "react"));

  var _reactNative = _$$_REQUIRE(_dependencyMap[2], "react-native");

  var _Colors = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[3], "./Colors"));

  var _this = this,
      _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/NewAppScreen/components/HermesBadge.js";

  var HermesBadge = function HermesBadge() {
    var isDarkMode = (0, _reactNative.useColorScheme)() === 'dark';
    return global.HermesInternal ? _react.default.createElement(_reactNative.View, {
      style: styles.badge,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 19,
        columnNumber: 5
      }
    }, _react.default.createElement(_reactNative.Text, {
      style: [styles.badgeText, {
        color: isDarkMode ? _Colors.default.light : _Colors.default.dark
      }],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 20,
        columnNumber: 7
      }
    }, "Engine: Hermes")) : null;
  };

  var styles = _reactNative.StyleSheet.create({
    badge: {
      position: 'absolute',
      top: 8,
      right: 12
    },
    badgeText: {
      fontSize: 14,
      fontWeight: '600',
      textAlign: 'right'
    }
  });

  var _default = HermesBadge;
  exports.default = _default;
},498,[7,1,5,496],"node_modules/react-native/Libraries/NewAppScreen/components/HermesBadge.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  module.exports = _$$_REQUIRE(_dependencyMap[0], "react-native/Libraries/Image/AssetRegistry").registerAsset({
    "__packager_asset": true,
    "httpServerLocation": "/assets/node_modules/react-native/Libraries/NewAppScreen/components",
    "width": 512,
    "height": 512,
    "scales": [1],
    "hash": "47ce6e77f039020ee2e76a10c1e988e9",
    "name": "logo",
    "type": "png"
  });
},499,[471],"node_modules/react-native/Libraries/NewAppScreen/components/logo.png");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _Colors = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[1], "./Colors"));

  var _openURLInBrowser = _$$_REQUIRE(_dependencyMap[0], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "react-native/Libraries/Core/Devtools/openURLInBrowser"));

  var _reactNative = _$$_REQUIRE(_dependencyMap[3], "react-native");

  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], "react"));

  var _this = this,
      _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/NewAppScreen/components/LearnMoreLinks.js";

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  var links = [{
    id: 1,
    title: 'The Basics',
    link: 'https://reactnative.dev/docs/tutorial',
    description: 'Explains a Hello World for React Native.'
  }, {
    id: 2,
    title: 'Style',
    link: 'https://reactnative.dev/docs/style',
    description: 'Covers how to use the prop named style which controls the visuals.'
  }, {
    id: 3,
    title: 'Layout',
    link: 'https://reactnative.dev/docs/flexbox',
    description: 'React Native uses flexbox for layout, learn how it works.'
  }, {
    id: 4,
    title: 'Components',
    link: 'https://reactnative.dev/docs/components-and-apis',
    description: 'The full list of components and APIs inside React Native.'
  }, {
    id: 5,
    title: 'Navigation',
    link: 'https://reactnative.dev/docs/navigation',
    description: 'How to handle moving between screens inside your application.'
  }, {
    id: 6,
    title: 'Networking',
    link: 'https://reactnative.dev/docs/network',
    description: 'How to use the Fetch API in React Native.'
  }, {
    id: 7,
    title: 'Help',
    link: 'https://reactnative.dev/help',
    description: 'Need more help? There are many other React Native developers who may have the answer.'
  }, {
    id: 8,
    title: 'Follow us on Twitter',
    link: 'https://twitter.com/reactnative',
    description: 'Stay in touch with the community, join in on Q&As and more by following React Native on Twitter.'
  }];

  var LinkList = function LinkList() {
    var isDarkMode = (0, _reactNative.useColorScheme)() === 'dark';
    return _react.default.createElement(_reactNative.View, {
      style: styles.container,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 82,
        columnNumber: 5
      }
    }, links.map(function (_ref) {
      var id = _ref.id,
          title = _ref.title,
          link = _ref.link,
          description = _ref.description;
      return _react.default.createElement(_react.Fragment, {
        key: id,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 84,
          columnNumber: 9
        }
      }, _react.default.createElement(_reactNative.View, {
        style: [styles.separator, {
          backgroundColor: isDarkMode ? _Colors.default.dark : _Colors.default.light
        }],
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 85,
          columnNumber: 11
        }
      }), _react.default.createElement(_reactNative.TouchableOpacity, {
        accessibilityRole: "button",
        onPress: function onPress() {
          return (0, _openURLInBrowser.default)(link);
        },
        style: styles.linkContainer,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 93,
          columnNumber: 11
        }
      }, _react.default.createElement(_reactNative.Text, {
        style: styles.link,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 97,
          columnNumber: 13
        }
      }, title), _react.default.createElement(_reactNative.Text, {
        style: [styles.description, {
          color: isDarkMode ? _Colors.default.lighter : _Colors.default.dark
        }],
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 98,
          columnNumber: 13
        }
      }, description)));
    }));
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      marginTop: 32,
      paddingHorizontal: 24
    },
    linkContainer: {
      flexWrap: 'wrap',
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      paddingVertical: 8
    },
    link: {
      flex: 2,
      fontSize: 18,
      fontWeight: '400',
      color: _Colors.default.primary
    },
    description: {
      flex: 3,
      paddingVertical: 16,
      fontWeight: '400',
      fontSize: 18
    },
    separator: {
      height: _reactNative.StyleSheet.hairlineWidth
    }
  });

  var _default = LinkList;
  exports.default = _default;
},500,[7,496,501,5,1],"node_modules/react-native/Libraries/NewAppScreen/components/LearnMoreLinks.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function openURLInBrowser(url) {
    fetch(_$$_REQUIRE(_dependencyMap[0], "./getDevServer")().url + 'open-url', {
      method: 'POST',
      body: JSON.stringify({
        url: url
      })
    });
  }

  module.exports = openURLInBrowser;
},501,[393],"node_modules/react-native/Libraries/Core/Devtools/openURLInBrowser.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0], "react-native");

  var _react = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _this = this,
      _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/NewAppScreen/components/DebugInstructions.js";

  var styles = _reactNative.StyleSheet.create({
    highlight: {
      fontWeight: '700'
    }
  });

  var DebugInstructions = _reactNative.Platform.select({
    ios: function ios() {
      return _react.default.createElement(_reactNative.Text, {
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 23,
          columnNumber: 5
        }
      }, "Press ", _react.default.createElement(_reactNative.Text, {
        style: styles.highlight,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 24,
          columnNumber: 13
        }
      }, "Cmd + D"), " in the simulator or", ' ', _react.default.createElement(_reactNative.Text, {
        style: styles.highlight,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 25,
          columnNumber: 7
        }
      }, "Shake"), " your device to open the React Native debug menu.");
    },
    default: function _default() {
      return _react.default.createElement(_reactNative.Text, {
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 30,
          columnNumber: 5
        }
      }, "Press ", _react.default.createElement(_reactNative.Text, {
        style: styles.highlight,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 31,
          columnNumber: 13
        }
      }, "Cmd or Ctrl + M"), " or", ' ', _react.default.createElement(_reactNative.Text, {
        style: styles.highlight,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 32,
          columnNumber: 7
        }
      }, "Shake"), " your device to open the React Native debug menu.");
    }
  });

  var _default2 = DebugInstructions;
  exports.default = _default2;
},502,[5,7,1],"node_modules/react-native/Libraries/NewAppScreen/components/DebugInstructions.js");
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _reactNative = _$$_REQUIRE(_dependencyMap[0], "react-native");

  var _react = _$$_REQUIRE(_dependencyMap[1], "@babel/runtime/helpers/interopRequireDefault")(_$$_REQUIRE(_dependencyMap[2], "react"));

  var _this = this,
      _jsxFileName = "/home/varunkumar/Desktop/github/ReactNativeMultipleBundle/RNCodeSplitting/node_modules/react-native/Libraries/NewAppScreen/components/ReloadInstructions.js";

  var styles = _reactNative.StyleSheet.create({
    highlight: {
      fontWeight: '700'
    }
  });

  var ReloadInstructions = _reactNative.Platform.select({
    ios: function ios() {
      return _react.default.createElement(_reactNative.Text, {
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 23,
          columnNumber: 5
        }
      }, "Press ", _react.default.createElement(_reactNative.Text, {
        style: styles.highlight,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 24,
          columnNumber: 13
        }
      }, "Cmd + R"), " in the simulator to reload your app's code.");
    },
    default: function _default() {
      return _react.default.createElement(_reactNative.Text, {
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 29,
          columnNumber: 5
        }
      }, "Double tap ", _react.default.createElement(_reactNative.Text, {
        style: styles.highlight,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 30,
          columnNumber: 18
        }
      }, "R"), " on your keyboard to reload your app's code.");
    }
  });

  var _default2 = ReloadInstructions;
  exports.default = _default2;
},503,[5,7,1],"node_modules/react-native/Libraries/NewAppScreen/components/ReloadInstructions.js");
__r(73);
__r(387);